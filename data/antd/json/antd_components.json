{
  "Button": [
    {
      "property": "block",
      "description": "Option to fit button width to its parent width",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "property": "danger",
      "description": "Set the danger status of button",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "property": "disabled",
      "description": "Disabled state of button",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "property": "ghost",
      "description": "Make background transparent and invert text and border colors",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "property": "href",
      "description": "Redirect url of link button",
      "type": "string",
      "default": "-",
      "version": ""
    },
    {
      "property": "htmlType",
      "description": "Set the original html type of button, see: MDN",
      "type": "string",
      "default": "button",
      "version": ""
    },
    {
      "property": "icon",
      "description": "Set the icon component of button",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "loading",
      "description": "Set the loading status of button",
      "type": "boolean | { delay: number }",
      "default": "false",
      "version": ""
    },
    {
      "property": "shape",
      "description": "Can be set button shape",
      "type": "circle | round",
      "default": "-",
      "version": ""
    },
    {
      "property": "size",
      "description": "Set the size of button",
      "type": "large | middle | small",
      "default": "middle",
      "version": ""
    },
    {
      "property": "target",
      "description": "Same as target attribute of a, works when href is specified",
      "type": "string",
      "default": "-",
      "version": ""
    },
    {
      "property": "type",
      "description": "Can be set to primary ghost dashed link text default",
      "type": "string",
      "default": "default",
      "version": ""
    },
    {
      "property": "onClick",
      "description": "Set the handler to handle click event",
      "type": "(event) => void",
      "default": "-",
      "version": ""
    }
  ],
  "Icon": {
    "Common-Icon": [
      {
        "property": "className",
        "description": "The className of Icon",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "rotate",
        "description": "Rotate by n degrees (not working in IE9)",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "spin",
        "description": "Rotate icon with animation",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "style",
        "description": "The style properties of icon, like fontSize and color",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "twoToneColor",
        "description": "Only supports the two-tone icon. Specify the primary color",
        "type": "string (hex color)",
        "default": "-",
        "version": ""
      }
    ],
    "Custom-Icon": [
      {
        "property": "component",
        "description": "The component used for the root node",
        "type": "ComponentType<CustomIconComponentProps>",
        "default": "-",
        "version": ""
      },
      {
        "property": "rotate",
        "description": "Rotate degrees (not working in IE9)",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "spin",
        "description": "Rotate icon with animation",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "style",
        "description": "The style properties of icon, like fontSize and color",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    ],
    "": [
      {
        "property": "className",
        "description": "The computed class name of the svg element",
        "type": "string",
        "readonly": "-",
        "version": ""
      },
      {
        "property": "fill",
        "description": "Define the color used to paint the svg element",
        "type": "string",
        "readonly": "currentColor",
        "version": ""
      },
      {
        "property": "height",
        "description": "The height of the svg element",
        "type": "string | number",
        "readonly": "1em",
        "version": ""
      },
      {
        "property": "style",
        "description": "The computed style of the svg element",
        "type": "CSSProperties",
        "readonly": "-",
        "version": ""
      },
      {
        "property": "width",
        "description": "The width of the svg element",
        "type": "string | number",
        "readonly": "1em",
        "version": ""
      }
    ]
  },
  "Typography": {
    "Typography.Text": [
      {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "copyable",
        "description": "Whether to be copyable, customize it via setting an object",
        "type": "boolean | copyable",
        "default": "false",
        "version": "copyable"
      },
      {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "editable",
        "description": "If editable. Can control edit state when is object",
        "type": "boolean | editable",
        "default": "false",
        "version": "editable"
      },
      {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "keyboard",
        "description": "Keyboard style",
        "type": "boolean",
        "default": "false",
        "version": "4.3.0"
      },
      {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "strong",
        "description": "Bold style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "italic",
        "description": "Italic style",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      {
        "property": "type",
        "description": "Content type",
        "type": "secondary | success | warning | danger",
        "default": "-",
        "version": "success: 4.6.0"
      },
      {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    ],
    "Typography.Title": [
      {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "copyable",
        "description": "Whether to be copyable, customize it via setting an object",
        "type": "boolean | copyable",
        "default": "false",
        "version": "copyable"
      },
      {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "editable",
        "description": "If editable. Can control edit state when is object",
        "type": "boolean | editable",
        "default": "false",
        "version": "editable"
      },
      {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows, can configure rows and expandable by using object",
        "type": "boolean | ellipsis",
        "default": "false",
        "version": "ellipsis"
      },
      {
        "property": "level",
        "description": "Set content importance. Match with h1, h2, h3, h4, h5",
        "type": "number: 1, 2, 3, 4, 5",
        "default": "1",
        "version": "5: 4.6.0"
      },
      {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "italic",
        "description": "Italic style",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      {
        "property": "type",
        "description": "Content type",
        "type": "secondary | success | warning | danger",
        "default": "-",
        "version": "success: 4.6.0"
      },
      {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    ],
    "Typography.Paragraph": [
      {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "copyable",
        "description": "Whether to be copyable, customize it via setting an object",
        "type": "boolean | copyable",
        "default": "false",
        "version": "copyable"
      },
      {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "editable",
        "description": "If editable. Can control edit state when is object",
        "type": "boolean | editable",
        "default": "false",
        "version": "editable"
      },
      {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows, can configure rows and expandable by using object",
        "type": "boolean | ellipsis",
        "default": "false",
        "version": "ellipsis"
      },
      {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "strong",
        "description": "Bold style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "italic",
        "description": "Italic style",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      {
        "property": "type",
        "description": "Content type",
        "type": "secondary | success | warning | danger",
        "default": "-",
        "version": "success: 4.6.0"
      },
      {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    ],
    "copyable": [
      {
        "property": "icon",
        "description": "Custom copy icon: [copyIcon, copiedIcon]",
        "type": "[ReactNode, ReactNode]",
        "default": "-",
        "version": "4.6.0"
      },
      {
        "property": "text",
        "description": "The text to copy",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "tooltips",
        "description": "Custom tooltip text, hide when it is false",
        "type": "[ReactNode, ReactNode]",
        "default": "[Copy, Copied]",
        "version": "4.4.0"
      },
      {
        "property": "onCopy",
        "description": "Called when copied text",
        "type": "function",
        "default": "-",
        "version": ""
      }
    ],
    "editable": [
      {
        "property": "autoSize",
        "description": "autoSize attribute of textarea",
        "type": "boolean | { minRows: number, maxRows: number }",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "editing",
        "description": "Whether to be editable",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "icon",
        "description": "Custom editable icon",
        "type": "ReactNode",
        "default": "<EditOutlined />",
        "version": "4.6.0"
      },
      {
        "property": "maxLength",
        "description": "maxLength attribute of textarea",
        "type": "number",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "tooltip",
        "description": "Custom tooltip text, hide when it is false",
        "type": "boolean | ReactNode",
        "default": "Edit",
        "version": "4.6.0"
      },
      {
        "property": "onCancel",
        "description": "Called when type ESC to exit editable state",
        "type": "function",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Called when input at textarea",
        "type": "function(event)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onEnd",
        "description": "Called when type ENTER to exit editable state",
        "type": "function",
        "default": "-",
        "version": "4.14.0"
      },
      {
        "property": "onStart",
        "description": "Called when enter editable state",
        "type": "function",
        "default": "-",
        "version": ""
      },
      {
        "property": "onCancel",
        "description": "Called when type ESC to exit editable state",
        "type": "function",
        "default": "-",
        "version": ""
      },
      {
        "property": "onEnd",
        "description": "Called when type ENTER to exit editable state",
        "type": "function",
        "default": "-",
        "version": ""
      }
    ],
    "ellipsis": [
      {
        "property": "expandable",
        "description": "Whether to be expandable",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "rows",
        "description": "Max rows of content",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "suffix",
        "description": "Suffix of ellipsis content",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "symbol",
        "description": "Custom description of ellipsis",
        "type": "ReactNode",
        "default": "Expand",
        "version": ""
      },
      {
        "property": "tooltip",
        "description": "Show tooltip when ellipsis",
        "type": "boolean | ReactNode",
        "default": "-",
        "version": "4.11.0"
      },
      {
        "property": "onEllipsis",
        "description": "Called when enter or leave ellipsis state",
        "type": "function(ellipsis)",
        "default": "-",
        "version": "4.2.0"
      },
      {
        "property": "onExpand",
        "description": "Called when expand content",
        "type": "function(event)",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Divider": [
    {
      "property": "className",
      "description": "The className of container",
      "type": "string",
      "default": "-",
      "version": ""
    },
    {
      "property": "dashed",
      "description": "Whether line is dashed",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "property": "orientation",
      "description": "The position of title inside divider",
      "type": "left | right | center",
      "default": "center",
      "version": ""
    },
    {
      "property": "plain",
      "description": "Divider text show as plain style",
      "type": "boolean",
      "default": "true",
      "version": "4.2.0"
    },
    {
      "property": "style",
      "description": "The style object of container",
      "type": "CSSProperties",
      "default": "-",
      "version": ""
    },
    {
      "property": "type",
      "description": "The direction type of divider",
      "type": "horizontal | vertical",
      "default": "horizontal",
      "version": ""
    }
  ],
  "Grid": {
    "Row": [
      {
        "property": "align",
        "description": "Vertical alignment",
        "type": "top | middle | bottom",
        "default": "top",
        "version": ""
      },
      {
        "property": "gutter",
        "description": "Spacing between grids, could be a number or a object like { xs: 8, sm: 16, md: 24}. Or you can use array to make horizontal and vertical spacing work at the same time [horizontal, vertical]",
        "type": "number | object | array",
        "default": "0",
        "version": ""
      },
      {
        "property": "justify",
        "description": "Horizontal arrangement",
        "type": "start | end | center | space-around | space-between",
        "default": "start",
        "version": ""
      },
      {
        "property": "wrap",
        "description": "Auto wrap line",
        "type": "boolean",
        "default": "true",
        "version": "4.8.0"
      }
    ],
    "Col": [
      {
        "property": "flex",
        "description": "Flex layout style",
        "type": "string | number",
        "default": "-",
        "version": ""
      },
      {
        "property": "offset",
        "description": "The number of cells to offset Col from the left",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "order",
        "description": "Raster order",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "pull",
        "description": "The number of cells that raster is moved to the left",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "push",
        "description": "The number of cells that raster is moved to the right",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "span",
        "description": "Raster number of cells to occupy, 0 corresponds to display: none",
        "type": "number",
        "default": "none",
        "version": ""
      },
      {
        "property": "xs",
        "description": "screen < 576px and also default setting, could be a span value or an object containing above props",
        "type": "number | object",
        "default": "-",
        "version": ""
      },
      {
        "property": "sm",
        "description": "screen ≥ 576px, could be a span value or an object containing above props",
        "type": "number | object",
        "default": "-",
        "version": ""
      },
      {
        "property": "md",
        "description": "screen ≥ 768px, could be a span value or an object containing above props",
        "type": "number | object",
        "default": "-",
        "version": ""
      },
      {
        "property": "lg",
        "description": "screen ≥ 992px, could be a span value or an object containing above props",
        "type": "number | object",
        "default": "-",
        "version": ""
      },
      {
        "property": "xl",
        "description": "screen ≥ 1200px, could be a span value or an object containing above props",
        "type": "number | object",
        "default": "-",
        "version": ""
      },
      {
        "property": "xxl",
        "description": "screen ≥ 1600px, could be a span value or an object containing above props",
        "type": "number | object",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Layout": {
    "Layout": [
      {
        "property": "className",
        "description": "Container className",
        "type": "string",
        "default": "-"
      },
      {
        "property": "hasSider",
        "description": "Whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering",
        "type": "boolean",
        "default": "-"
      },
      {
        "property": "style",
        "description": "To customize the styles",
        "type": "CSSProperties",
        "default": "-"
      }
    ],
    "Layout.Sider": [
      {
        "property": "breakpoint",
        "description": "Breakpoints of the responsive layout",
        "type": "xs | sm | md | lg | xl | xxl",
        "default": "-"
      },
      {
        "property": "className",
        "description": "Container className",
        "type": "string",
        "default": "-"
      },
      {
        "property": "collapsed",
        "description": "To set the current status",
        "type": "boolean",
        "default": "-"
      },
      {
        "property": "collapsedWidth",
        "description": "Width of the collapsed sidebar, by setting to 0 a special trigger will appear",
        "type": "number",
        "default": "80"
      },
      {
        "property": "collapsible",
        "description": "Whether can be collapsed",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "defaultCollapsed",
        "description": "To set the initial status",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "reverseArrow",
        "description": "Reverse direction of arrow, for a sider that expands from the right",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "style",
        "description": "To customize the styles",
        "type": "CSSProperties",
        "default": "-"
      },
      {
        "property": "theme",
        "description": "Color theme of the sidebar",
        "type": "light | dark",
        "default": "dark"
      },
      {
        "property": "trigger",
        "description": "Specify the customized trigger, set to null to hide the trigger",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "width",
        "description": "Width of the sidebar",
        "type": "number | string",
        "default": "200"
      },
      {
        "property": "zeroWidthTriggerStyle",
        "description": "To customize the styles of the special trigger that appears when collapsedWidth is 0",
        "type": "object",
        "default": "-"
      },
      {
        "property": "onBreakpoint",
        "description": "The callback function, executed when breakpoints changed",
        "type": "(broken) => {}",
        "default": "-"
      },
      {
        "property": "onCollapse",
        "description": "The callback function, executed by clicking the trigger or activating the responsive layout",
        "type": "(collapsed, type) => {}",
        "default": "-"
      }
    ]
  },
  "Space": [
    {
      "property": "align",
      "description": "Align items",
      "type": "start | end |center |baseline",
      "default": "-",
      "version": "4.2.0"
    },
    {
      "property": "direction",
      "description": "The space direction",
      "type": "vertical | horizontal",
      "default": "horizontal",
      "version": "4.1.0"
    },
    {
      "property": "size",
      "description": "The space size",
      "type": "Size | Size[]",
      "default": "small",
      "version": "4.1.0 | Array: 4.9.0"
    },
    {
      "property": "split",
      "description": "Set split",
      "type": "ReactNode",
      "default": "-",
      "version": "4.7.0"
    },
    {
      "property": "wrap",
      "description": "Auto wrap line, when horizontal effective",
      "type": "boolean",
      "default": "false",
      "version": "4.9.0"
    }
  ],
  "Affix": [
    {
      "property": "offsetBottom",
      "description": "Offset from the bottom of the viewport (in pixels)",
      "type": "number",
      "default": "-"
    },
    {
      "property": "offsetTop",
      "description": "Offset from the top of the viewport (in pixels)",
      "type": "number",
      "default": "0"
    },
    {
      "property": "target",
      "description": "Specifies the scrollable area DOM node",
      "type": "() => HTMLElement",
      "default": "() => window"
    },
    {
      "property": "onChange",
      "description": "Callback for when Affix state is changed",
      "type": "function(affixed)",
      "default": "-"
    }
  ],
  "Breadcrumb": {
    "Breadcrumb": [
      {
        "property": "itemRender",
        "description": "Custom item renderer",
        "type": "(route, params, routes, paths) => ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "params",
        "description": "Routing parameters",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "routes",
        "description": "The routing stack information of router",
        "type": "routes[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "separator",
        "description": "Custom separator",
        "type": "ReactNode",
        "default": "/",
        "version": ""
      }
    ],
    "Breadcrumb.Item": [
      {
        "property": "className",
        "description": "The additional css class",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "dropdownProps",
        "description": "The dropdown props",
        "type": "Dropdown",
        "default": "-",
        "version": ""
      },
      {
        "property": "href",
        "description": "Target of hyperlink",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "overlay",
        "description": "The dropdown menu",
        "type": "Menu | () => Menu",
        "default": "-",
        "version": ""
      },
      {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "(e:MouseEvent) => void",
        "default": "-",
        "version": ""
      }
    ],
    "Breadcrumb.Separator": [
      {
        "property": "children",
        "description": "Custom separator",
        "type": "ReactNode",
        "default": "/",
        "version": ""
      }
    ]
  },
  "Dropdown": {
    "Dropdown": [
      {
        "property": "arrow",
        "description": "Whether the dropdown arrow should be visible",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Whether the dropdown menu is disabled",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "getPopupContainer",
        "description": "To set the container of the dropdown menu. The default is to create a div element in body, but you can reset it to the scrolling area and make a relative reposition. Example on CodePen",
        "type": "(triggerNode: HTMLElement) => HTMLElement",
        "default": "() => document.body",
        "version": ""
      },
      {
        "property": "overlay",
        "description": "The dropdown menu",
        "type": "Menu | () => Menu",
        "default": "-",
        "version": ""
      },
      {
        "property": "overlayClassName",
        "description": "The class name of the dropdown root element",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "overlayStyle",
        "description": "The style of the dropdown root element",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "placement",
        "description": "Placement of popup menu: bottomLeft, bottomCenter, bottomRight, topLeft, topCenter or topRight",
        "type": "string",
        "default": "bottomLeft",
        "version": ""
      },
      {
        "property": "trigger",
        "description": "The trigger mode which executes the dropdown action. Note that hover can't be used on touchscreens",
        "type": "Array<click|hover|contextMenu>",
        "default": "[hover]",
        "version": ""
      },
      {
        "property": "visible",
        "description": "Whether the dropdown menu is currently visible",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "onVisibleChange",
        "description": "Called when the visible state is changed",
        "type": "(visible: boolean) => void",
        "default": "-",
        "version": ""
      }
    ],
    "Dropdown.Button": [
      {
        "property": "buttonsRender",
        "description": "Custom buttons inside Dropdown.Button",
        "type": "(buttons: ReactNode[]) => ReactNode[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Whether the dropdown menu is disabled",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "icon",
        "description": "Icon (appears on the right)",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "overlay",
        "description": "The dropdown menu",
        "type": "Menu",
        "default": "-",
        "version": ""
      },
      {
        "property": "placement",
        "description": "Placement of popup menu: bottomLeft bottomCenter bottomRight topLeft topCenter topRight",
        "type": "string",
        "default": "bottomLeft",
        "version": ""
      },
      {
        "property": "size",
        "description": "Size of the button, the same as Button",
        "type": "string",
        "default": "default",
        "version": ""
      },
      {
        "property": "trigger",
        "description": "The trigger mode which executes the dropdown action",
        "type": "Array<click|hover|contextMenu>",
        "default": "[hover]",
        "version": ""
      },
      {
        "property": "type",
        "description": "Type of the button, the same as Button",
        "type": "string",
        "default": "default",
        "version": ""
      },
      {
        "property": "visible",
        "description": "Whether the dropdown menu is currently visible",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "onClick",
        "description": "The same as Button: called when you click the button on the left",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "onVisibleChange",
        "description": "Called when the visible state is changed",
        "type": "(visible: boolean) => void",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Menu": {
    "Menu": [
      {
        "param": "defaultOpenKeys",
        "description": "Array with the keys of default opened sub menus",
        "type": "string[]",
        "default value": "-",
        "version": ""
      },
      {
        "param": "defaultSelectedKeys",
        "description": "Array with the keys of default selected menu items",
        "type": "string[]",
        "default value": "-",
        "version": ""
      },
      {
        "param": "expandIcon",
        "description": "custom expand icon of submenu",
        "type": "ReactNode | (props: SubMenuProps & { isSubMenu: boolean }) => ReactNode",
        "default value": "-",
        "version": "4.9.0"
      },
      {
        "param": "forceSubMenuRender",
        "description": "Render submenu into DOM before it becomes visible",
        "type": "boolean",
        "default value": "false",
        "version": ""
      },
      {
        "param": "inlineCollapsed",
        "description": "Specifies the collapsed status when menu is inline mode",
        "type": "boolean",
        "default value": "-",
        "version": ""
      },
      {
        "param": "inlineIndent",
        "description": "Indent (in pixels) of inline menu items on each level",
        "type": "number",
        "default value": "24",
        "version": ""
      },
      {
        "param": "mode",
        "description": "Type of menu",
        "type": "vertical | horizontal | inline",
        "default value": "vertical",
        "version": ""
      },
      {
        "param": "multiple",
        "description": "Allows selection of multiple items",
        "type": "boolean",
        "default value": "false",
        "version": ""
      },
      {
        "param": "openKeys",
        "description": "Array with the keys of currently opened sub-menus",
        "type": "string[]",
        "default value": "-",
        "version": ""
      },
      {
        "param": "overflowedIndicator",
        "description": "Customized icon when menu is collapsed",
        "type": "ReactNode",
        "default value": "-",
        "version": ""
      },
      {
        "param": "selectable",
        "description": "Allows selecting menu items",
        "type": "boolean",
        "default value": "true",
        "version": ""
      },
      {
        "param": "selectedKeys",
        "description": "Array with the keys of currently selected menu items",
        "type": "string[]",
        "default value": "-",
        "version": ""
      },
      {
        "param": "style",
        "description": "Style of the root node",
        "type": "CSSProperties",
        "default value": "-",
        "version": ""
      },
      {
        "param": "subMenuCloseDelay",
        "description": "Delay time to hide submenu when mouse leaves (in seconds)",
        "type": "number",
        "default value": "0.1",
        "version": ""
      },
      {
        "param": "subMenuOpenDelay",
        "description": "Delay time to show submenu when mouse enters, (in seconds)",
        "type": "number",
        "default value": "0",
        "version": ""
      },
      {
        "param": "theme",
        "description": "Color theme of the menu",
        "type": "light | dark",
        "default value": "light",
        "version": ""
      },
      {
        "param": "triggerSubMenuAction",
        "description": "Which action can trigger submenu open/close",
        "type": "hover | click",
        "default value": "hover",
        "version": ""
      },
      {
        "param": "onClick",
        "description": "Called when a menu item is clicked",
        "type": "function({ item, key, keyPath, domEvent })",
        "default value": "-",
        "version": ""
      },
      {
        "param": "onDeselect",
        "description": "Called when a menu item is deselected (multiple mode only)",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default value": "-",
        "version": ""
      },
      {
        "param": "onOpenChange",
        "description": "Called when sub-menus are opened or closed",
        "type": "function(openKeys: string[])",
        "default value": "-",
        "version": ""
      },
      {
        "param": "onSelect",
        "description": "Called when a menu item is selected",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default value": "-",
        "version": ""
      }
    ],
    "Menu.Item": [
      {
        "param": "danger",
        "description": "Display the danger style",
        "type": "boolean",
        "default value": "false",
        "version": "4.3.0"
      },
      {
        "param": "disabled",
        "description": "Whether menu item is disabled",
        "type": "boolean",
        "default value": "false",
        "version": ""
      },
      {
        "param": "icon",
        "description": "The icon of the menu item",
        "type": "ReactNode",
        "default value": "-",
        "version": "4.2.0"
      },
      {
        "param": "key",
        "description": "Unique ID of the menu item",
        "type": "string",
        "default value": "-",
        "version": ""
      },
      {
        "param": "title",
        "description": "Set display title for collapsed item",
        "type": "string",
        "default value": "-",
        "version": ""
      }
    ],
    "Menu.SubMenu": [
      {
        "param": "children",
        "description": "Sub-menus or sub-menu items",
        "type": "Array<MenuItem | SubMenu>",
        "default value": "-",
        "version": ""
      },
      {
        "param": "disabled",
        "description": "Whether sub-menu is disabled",
        "type": "boolean",
        "default value": "false",
        "version": ""
      },
      {
        "param": "icon",
        "description": "Icon of sub menu",
        "type": "ReactNode",
        "default value": "-",
        "version": "4.2.0"
      },
      {
        "param": "key",
        "description": "Unique ID of the sub-menu",
        "type": "string",
        "default value": "-",
        "version": ""
      },
      {
        "param": "popupClassName",
        "description": "Sub-menu class name, not working when mode=\"inline\"",
        "type": "string",
        "default value": "-",
        "version": ""
      },
      {
        "param": "popupOffset",
        "description": "Sub-menu offset, not working when mode=\"inline\"",
        "type": "[number, number]",
        "default value": "-",
        "version": ""
      },
      {
        "param": "title",
        "description": "Title of sub menu",
        "type": "ReactNode",
        "default value": "-",
        "version": ""
      },
      {
        "param": "onTitleClick",
        "description": "Callback executed when the sub-menu title is clicked",
        "type": "function({ key, domEvent })",
        "default value": "-",
        "version": ""
      }
    ],
    "Menu.ItemGroup": [
      {
        "param": "children",
        "description": "Sub-menu items",
        "type": "MenuItem[]",
        "default value": "-",
        "version": ""
      },
      {
        "param": "title",
        "description": "The title of the group",
        "type": "ReactNode",
        "default value": "-",
        "version": ""
      }
    ]
  },
  "PageHeader": [
    {
      "param": "avatar",
      "description": "Avatar next to the title bar",
      "type": "AvatarProps",
      "default value": "-",
      "version": ""
    },
    {
      "param": "backIcon",
      "description": "Custom back icon, if false the back icon will not be displayed",
      "type": "ReactNode | boolean",
      "default value": "<ArrowLeft />",
      "version": ""
    },
    {
      "param": "breadcrumb",
      "description": "Breadcrumb configuration",
      "type": "Breadcrumb",
      "default value": "-",
      "version": ""
    },
    {
      "param": "breadcrumbRender",
      "description": "Customize the content of the breadcrumb area",
      "type": "(props, originBreadcrumb)=> ReactNode",
      "default value": "-",
      "version": "4.11.0"
    },
    {
      "param": "extra",
      "description": "Operating area, at the end of the line of the title line",
      "type": "ReactNode",
      "default value": "-",
      "version": ""
    },
    {
      "param": "footer",
      "description": "PageHeader's footer, generally used to render TabBar",
      "type": "ReactNode",
      "default value": "-",
      "version": ""
    },
    {
      "param": "ghost",
      "description": "PageHeader type, will change background color",
      "type": "boolean",
      "default value": "true",
      "version": ""
    },
    {
      "param": "subTitle",
      "description": "Custom subtitle text",
      "type": "ReactNode",
      "default value": "-",
      "version": ""
    },
    {
      "param": "tags",
      "description": "Tag list next to title",
      "type": "Tag[] | Tag",
      "default value": "-",
      "version": ""
    },
    {
      "param": "title",
      "description": "Custom title text",
      "type": "ReactNode",
      "default value": "-",
      "version": ""
    },
    {
      "param": "onBack",
      "description": "Back icon click event",
      "type": "() => void",
      "default value": "-",
      "version": ""
    }
  ],
  "Pagination": [
    {
      "property": "current",
      "description": "Current page number",
      "type": "number",
      "default": "-",
      "version": ""
    },
    {
      "property": "defaultCurrent",
      "description": "Default initial page number",
      "type": "number",
      "default": "1",
      "version": ""
    },
    {
      "property": "defaultPageSize",
      "description": "Default number of data items per page",
      "type": "number",
      "default": "10",
      "version": ""
    },
    {
      "property": "disabled",
      "description": "Disable pagination",
      "type": "boolean",
      "default": "-",
      "version": ""
    },
    {
      "property": "hideOnSinglePage",
      "description": "Whether to hide pager on single page",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "property": "itemRender",
      "description": "To customize item's innerHTML",
      "type": "(page, type: 'page' | 'prev' | 'next', originalElement) => React.ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "pageSize",
      "description": "Number of data items per page",
      "type": "number",
      "default": "-",
      "version": ""
    },
    {
      "property": "pageSizeOptions",
      "description": "Specify the sizeChanger options",
      "type": "string[]",
      "default": "[10, 20, 50, 100]",
      "version": ""
    },
    {
      "property": "responsive",
      "description": "If size is not specified, Pagination would resize according to the width of the window",
      "type": "boolean",
      "default": "-",
      "version": ""
    },
    {
      "property": "showLessItems",
      "description": "Show less page items",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "property": "showQuickJumper",
      "description": "Determine whether you can jump to pages directly",
      "type": "boolean | { goButton: ReactNode }",
      "default": "false",
      "version": ""
    },
    {
      "property": "showSizeChanger",
      "description": "Determine whether to show pageSize select, it will be true when total > 50",
      "type": "boolean",
      "default": "-",
      "version": ""
    },
    {
      "property": "showTitle",
      "description": "Show page item's title",
      "type": "boolean",
      "default": "true",
      "version": ""
    },
    {
      "property": "showTotal",
      "description": "To display the total number and range",
      "type": "function(total, range)",
      "default": "-",
      "version": ""
    },
    {
      "property": "simple",
      "description": "Whether to use simple mode",
      "type": "boolean",
      "default": "-",
      "version": ""
    },
    {
      "property": "size",
      "description": "Specify the size of Pagination, can be set to small",
      "type": "default | small",
      "default": "default",
      "version": ""
    },
    {
      "property": "total",
      "description": "Total number of data items",
      "type": "number",
      "default": "0",
      "version": ""
    },
    {
      "property": "onChange",
      "description": "Called when the page number or pageSize is changed, and it takes the resulting page number and pageSize as its arguments",
      "type": "function(page, pageSize)",
      "default": "-",
      "version": ""
    },
    {
      "property": "onShowSizeChange",
      "description": "Called when pageSize is changed",
      "type": "function(current, size)",
      "default": "-",
      "version": ""
    }
  ],
  "Steps": {
    "Steps": [
      {
        "property": "className",
        "description": "Additional class to Steps",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "current",
        "description": "To set the current step, counting from 0. You can overwrite this state by using status of Step",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "direction",
        "description": "To specify the direction of the step bar, horizontal or vertical",
        "type": "string",
        "default": "horizontal",
        "version": ""
      },
      {
        "property": "initial",
        "description": "Set the initial step, counting from 0",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "labelPlacement",
        "description": "Place title and description with horizontal or vertical direction",
        "type": "string",
        "default": "horizontal",
        "version": ""
      },
      {
        "property": "percent",
        "description": "Progress circle percentage of current step in process status (only works on basic Steps)",
        "type": "number",
        "default": "-",
        "version": "4.5.0"
      },
      {
        "property": "progressDot",
        "description": "Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be vertical",
        "type": "boolean | (iconDot, {index, status, title, description}) => ReactNode",
        "default": "false",
        "version": ""
      },
      {
        "property": "responsive",
        "description": "change to vertical direction when screen width smaller than 532px",
        "type": "boolean",
        "default": "-",
        "version": "true"
      },
      {
        "property": "size",
        "description": "To specify the size of the step bar, default and small are currently supported",
        "type": "string",
        "default": "default",
        "version": ""
      },
      {
        "property": "status",
        "description": "To specify the status of current step, can be set to one of the following values: wait process finish error",
        "type": "string",
        "default": "process",
        "version": ""
      },
      {
        "property": "type",
        "description": "Type of steps, can be set to one of the following values: default, navigation",
        "type": "string",
        "default": "default",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Trigger when Step is changed",
        "type": "(current) => void",
        "default": "-",
        "version": ""
      }
    ],
    "Steps.Step": [
      {
        "property": "description",
        "description": "Description of the step, optional property",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disable click",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "icon",
        "description": "Icon of the step, optional property",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "status",
        "description": "To specify the status. It will be automatically set by current of Steps if not configured. Optional values are: wait process finish error",
        "type": "string",
        "default": "wait",
        "version": ""
      },
      {
        "property": "subTitle",
        "description": "Subtitle of the step",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "Title of the step",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    ]
  },
  "AutoComplete": {
    "Methods": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ]
  },
  "Cascader": {
    "API": [
      {
        "property": "allowClear",
        "description": "Whether allow clear",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "changeOnSelect",
        "description": "Change value on each selection if set to true, see above demo for details",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "className",
        "description": "The additional css class",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "Initial selected value",
        "type": "string[] | number[]",
        "default": "[]",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Whether disabled select",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "displayRender",
        "description": "The render function of displaying selected options",
        "type": "(label, selectedOptions) => ReactNode",
        "default": "label => label.join(/)",
        "version": ""
      },
      {
        "property": "dropdownRender",
        "description": "Customize dropdown content",
        "type": "(menus: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "expandIcon",
        "description": "Customize the current item expand icon",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "expandTrigger",
        "description": "expand current item when click or hover, one of click hover",
        "type": "string",
        "default": "click",
        "version": ""
      },
      {
        "property": "fieldNames",
        "description": "Custom field name for label and value and children",
        "type": "object",
        "default": "{ label: label, value: value, children: children }",
        "version": ""
      },
      {
        "property": "getPopupContainer",
        "description": "Parent Node which the selector should be rendered to. Default to body. When position issues happen, try to modify it into scrollable content and position it relative. example",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      {
        "property": "loadData",
        "description": "To load option lazily, and it cannot work with showSearch",
        "type": "(selectedOptions) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "notFoundContent",
        "description": "Specify content to show when no result matches",
        "type": "string",
        "default": "Not Found",
        "version": ""
      },
      {
        "property": "options",
        "description": "The data options of cascade",
        "type": "Option[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "placeholder",
        "description": "The input placeholder",
        "type": "string",
        "default": "Please select",
        "version": ""
      },
      {
        "property": "popupClassName",
        "description": "The additional className of popup overlay",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "popupPlacement",
        "description": "Use preset popup align config from builtinPlacements：bottomLeft bottomRight topLeft topRight",
        "type": "string",
        "default": "bottomLeft",
        "version": ""
      },
      {
        "property": "popupVisible",
        "description": "Set visible of cascader popup",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "showSearch",
        "description": "Whether show search input in single mode",
        "type": "boolean | Object",
        "default": "false",
        "version": ""
      },
      {
        "property": "size",
        "description": "The input size",
        "type": "large | middle | small",
        "default": "-",
        "version": ""
      },
      {
        "property": "style",
        "description": "The additional style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "The selected value",
        "type": "string[] | number[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback when finishing cascader select",
        "type": "(value, selectedOptions) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "onPopupVisibleChange",
        "description": "Callback when popup shown or hidden",
        "type": "(value) => void",
        "default": "-",
        "version": ""
      }
    ],
    "Methods": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ]
  },
  "Checkbox": {
    "Checkbox": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ],
    "Checkbox-Group": [
      {
        "property": "defaultValue",
        "description": "Default selected value",
        "type": "string[]",
        "default": "[]",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "If disable all checkboxes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "name",
        "description": "The name property of all input[type=\"checkbox\"] children",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "options",
        "description": "Specifies options",
        "type": "string[] | Option[]",
        "default": "[]",
        "version": ""
      },
      {
        "property": "value",
        "description": "Used for setting the currently selected value",
        "type": "string[]",
        "default": "[]",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes",
        "type": "function(checkedValue)",
        "default": "-",
        "version": ""
      }
    ]
  },
  "DatePicker": {
    "Common-API": [
      {
        "property": "allowClear",
        "description": "Whether to show clear button",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "className",
        "description": "The picker className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "dateRender",
        "description": "Custom rendering function for date cells",
        "type": "function(currentDate: moment, today: moment) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Determine whether the DatePicker is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabledDate",
        "description": "Specify the date that cannot be selected",
        "type": "(currentDate: moment) => boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "dropdownClassName",
        "description": "To customize the className of the popup calendar",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "getPopupContainer",
        "description": "To set the container of the floating layer, while the default is to create a div element in body",
        "type": "function(trigger)",
        "default": "-",
        "version": ""
      },
      {
        "property": "inputReadOnly",
        "description": "Set the readonly attribute of the input tag (avoids virtual keyboard on touch devices)",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "locale",
        "description": "Localization configuration",
        "type": "object",
        "default": "default",
        "version": ""
      },
      {
        "property": "mode",
        "description": "The picker panel mode（ Cannot select year or month anymore? )",
        "type": "time | date | month | year | decade",
        "default": "-",
        "version": ""
      },
      {
        "property": "open",
        "description": "The open state of picker",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "panelRender",
        "description": "Customize panel render",
        "type": "(panelNode) => ReactNode",
        "default": "-",
        "version": "4.5.0"
      },
      {
        "property": "picker",
        "description": "Set picker type",
        "type": "date | week | month | quarter | year",
        "default": "date",
        "version": "quarter: 4.1.0"
      },
      {
        "property": "placeholder",
        "description": "The placeholder of date input",
        "type": "string | [string,string]",
        "default": "-",
        "version": ""
      },
      {
        "property": "popupStyle",
        "description": "To customize the style of the popup calendar",
        "type": "CSSProperties",
        "default": "{}",
        "version": ""
      },
      {
        "property": "size",
        "description": "To determine the size of the input box, the height of large and small, are 40px and 24px respectively, while default size is 32px",
        "type": "large | middle | small",
        "default": "-",
        "version": ""
      },
      {
        "property": "style",
        "description": "To customize the style of the input box",
        "type": "CSSProperties",
        "default": "{}",
        "version": ""
      },
      {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "onOpenChange",
        "description": "Callback function, can be executed whether the popup calendar is popped up or closed",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onPanelChange",
        "description": "Callback when picker panel mode is changed",
        "type": "function(value, mode)",
        "default": "-",
        "version": ""
      }
    ],
    "Common-Methods": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ],
    "DatePicker": [
      {
        "property": "defaultPickerValue",
        "description": "To set default picker date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "To set default date, if start time or end time is null or undefined, the date range will be an open interval",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabledTime",
        "description": "To specify the time that cannot be selected",
        "type": "function(date)",
        "default": "-",
        "version": ""
      },
      {
        "property": "format",
        "description": "To set the date format, refer to moment.js. When an array is provided, all values are used for parsing and first value is used for formatting, support Custom Format",
        "type": "string | (value: moment) => string | (string | (value: moment) => string)[]",
        "default": "YYYY-MM-DD",
        "version": ""
      },
      {
        "property": "renderExtraFooter",
        "description": "Render extra footer in panel",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "showNow",
        "description": "Whether to show 'Now' button on panel when showTime is set",
        "type": "boolean",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "showTime",
        "description": "To provide an additional time selection",
        "type": "object | boolean",
        "default": "TimePicker Options",
        "version": ""
      },
      {
        "property": "showTime.defaultValue",
        "description": "To set default time of selected date, demo",
        "type": "moment",
        "default": "moment()",
        "version": ""
      },
      {
        "property": "showToday",
        "description": "Whether to show Today button",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "value",
        "description": "To set date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback function, can be executed when the selected time is changing",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onOk",
        "description": "Callback when click ok button",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      {
        "property": "onPanelChange",
        "description": "Callback function for panel changing",
        "type": "function(value, mode)",
        "default": "-",
        "version": ""
      }
    ],
    "DatePicker[picker=year]": [
      {
        "property": "defaultPickerValue",
        "description": "To set default picker date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "To set default date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "format",
        "description": "To set the date format, refer to moment.js",
        "type": "string",
        "default": "YYYY",
        "version": ""
      },
      {
        "property": "renderExtraFooter",
        "description": "Render extra footer in panel",
        "type": "() => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "To set date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback function, can be executed when the selected time is changing",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      }
    ],
    "DatePicker[picker=month]": [
      {
        "property": "defaultPickerValue",
        "description": "To set default picker date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "To set default date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "format",
        "description": "To set the date format, refer to moment.js",
        "type": "string",
        "default": "YYYY-MM",
        "version": ""
      },
      {
        "property": "monthCellRender",
        "description": "Custom month cell content render method",
        "type": "function(date, locale): ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "renderExtraFooter",
        "description": "Render extra footer in panel",
        "type": "() => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "To set date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback function, can be executed when the selected time is changing",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      }
    ],
    "DatePicker[picker=week]": [
      {
        "property": "defaultPickerValue",
        "description": "To set default picker date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "To set default date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "format",
        "description": "To set the date format, refer to moment.js",
        "type": "string",
        "default": "YYYY-wo",
        "version": ""
      },
      {
        "property": "renderExtraFooter",
        "description": "Render extra footer in panel",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "To set date",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback function, can be executed when the selected time is changing",
        "type": "function(date: moment, dateString: string)",
        "default": "-",
        "version": ""
      }
    ],
    "RangePicker": [
      {
        "property": "allowEmpty",
        "description": "Allow start or end input leave empty",
        "type": "[boolean, boolean]",
        "default": "[false, false]",
        "version": ""
      },
      {
        "property": "dateRender",
        "description": "Customize date cell. info argument is added in 4.3.0",
        "type": "function(currentDate: moment, today: moment, info: { range: start | end }) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultPickerValue",
        "description": "To set default picker date",
        "type": "[moment, moment]",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "To set default date",
        "type": "[moment, moment]",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "If disable start or end",
        "type": "[boolean, boolean]",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabledTime",
        "description": "To specify the time that cannot be selected",
        "type": "function(date: moment, partial: start | end)",
        "default": "-",
        "version": ""
      },
      {
        "property": "format",
        "description": "To set the date format, refer to moment.js. When an array is provided, all values are used for parsing and first value is used for formatting",
        "type": "string | string[]",
        "default": "YYYY-MM-DD HH:mm:ss",
        "version": ""
      },
      {
        "property": "ranges",
        "description": "The preseted ranges for quick selection",
        "type": "{ [range: string]: moment[] } | { [range: string]: () => moment[] }",
        "default": "-",
        "version": ""
      },
      {
        "property": "renderExtraFooter",
        "description": "Render extra footer in panel",
        "type": "() => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "separator",
        "description": "Set separator between inputs",
        "type": "React.ReactNode",
        "default": "<SwapRightOutlined />",
        "version": ""
      },
      {
        "property": "showTime",
        "description": "To provide an additional time selection",
        "type": "object | boolean",
        "default": "TimePicker Options",
        "version": ""
      },
      {
        "property": "showTime.defaultValue",
        "description": "To set default time of selected date, demo",
        "type": "moment[]",
        "default": "[moment(), moment()]",
        "version": ""
      },
      {
        "property": "value",
        "description": "To set date",
        "type": "[moment, moment]",
        "default": "-",
        "version": ""
      },
      {
        "property": "onCalendarChange",
        "description": "Callback function, can be executed when the start time or the end time of the range is changing. info argument is added in 4.4.0",
        "type": "function(dates: [moment, moment], dateStrings: [string, string], info: { range:start|end })",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback function, can be executed when the selected time is changing",
        "type": "function(dates: [moment, moment], dateStrings: [string, string])",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Form": {
    "Form": [
      {
        "property": "colon",
        "description": "Configure the default value of colon for Form.Item. Indicates whether the colon after the label is displayed (only effective when prop layout is horizontal)",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "component",
        "description": "Set the Form rendering element. Do not create a DOM node for false",
        "type": "ComponentType | false",
        "default": "form",
        "version": ""
      },
      {
        "property": "fields",
        "description": "Control of form fields through state management (such as redux). Not recommended for non-strong demand. View example",
        "type": "FieldData[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "form",
        "description": "Form control instance created by Form.useForm(). Automatically created when not provided",
        "type": "FormInstance",
        "default": "-",
        "version": ""
      },
      {
        "property": "initialValues",
        "description": "Set value by Form initialization or reset",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "labelAlign",
        "description": "The text align of label of all items",
        "type": "left | right",
        "default": "right",
        "version": ""
      },
      {
        "property": "labelCol",
        "description": "Label layout, like <Col> component. Set span offset value like {span: 3, offset: 12} or sm: {span: 3, offset: 12}",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "layout",
        "description": "Form layout",
        "type": "horizontal | vertical | inline",
        "default": "horizontal",
        "version": ""
      },
      {
        "property": "name",
        "description": "Form name. Will be the prefix of Field id",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "preserve",
        "description": "Keep field value even when field removed",
        "type": "boolean",
        "default": "true",
        "version": "4.4.0"
      },
      {
        "property": "requiredMark",
        "description": "Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",
        "type": "boolean | optional",
        "default": "true",
        "version": "4.6.0"
      },
      {
        "property": "scrollToFirstError",
        "description": "Auto scroll to first failed field when submit",
        "type": "boolean | Options",
        "default": "false",
        "version": ""
      },
      {
        "property": "size",
        "description": "Set field component size (antd components only)",
        "type": "small | middle | large",
        "default": "-",
        "version": ""
      },
      {
        "property": "validateMessages",
        "description": "Validation prompt template, description see below",
        "type": "ValidateMessages",
        "default": "-",
        "version": ""
      },
      {
        "property": "validateTrigger",
        "description": "Config field validate trigger",
        "type": "string | string[]",
        "default": "onChange",
        "version": "4.3.0"
      },
      {
        "property": "wrapperCol",
        "description": "The layout for input controls, same as labelCol",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "onFieldsChange",
        "description": "Trigger when field updated",
        "type": "function(changedFields, allFields)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onFinish",
        "description": "Trigger after submitting the form and verifying data successfully",
        "type": "function(values)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onFinishFailed",
        "description": "Trigger after submitting the form and verifying data failed",
        "type": "function({ values, errorFields, outOfDate })",
        "default": "-",
        "version": ""
      },
      {
        "property": "onValuesChange",
        "description": "Trigger when value updated",
        "type": "function(changedValues, allValues)",
        "default": "-",
        "version": ""
      }
    ],
    "Form.Item": [
      {
        "property": "colon",
        "description": "Used with label, whether to display : after label text.",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "dependencies",
        "description": "Set the dependency field. See below",
        "type": "NamePath[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "extra",
        "description": "The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "getValueFromEvent",
        "description": "Specify how to get value from event or other onChange arguments",
        "type": "(..args: any[]) => any",
        "default": "-",
        "version": ""
      },
      {
        "property": "getValueProps",
        "description": "Additional props with sub component",
        "type": "(value: any) => any",
        "default": "-",
        "version": "4.2.0"
      },
      {
        "property": "hasFeedback",
        "description": "Used with validateStatus, this option specifies the validation status icon. Recommended to be used only with Input",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "help",
        "description": "The prompt message. If not provided, the prompt message will be generated by the validation rule.",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "hidden",
        "description": "Whether to hide Form.Item (still collect and validate value)",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      {
        "property": "htmlFor",
        "description": "Set sub label htmlFor",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "initialValue",
        "description": "Config sub default value. Form initialValues get higher priority when conflict",
        "type": "string",
        "default": "-",
        "version": "4.2.0"
      },
      {
        "property": "label",
        "description": "Label text",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "labelAlign",
        "description": "The text align of label",
        "type": "left | right",
        "default": "right",
        "version": ""
      },
      {
        "property": "labelCol",
        "description": "The layout of label. You can set span offset to something like {span: 3, offset: 12} or sm: {span: 3, offset: 12} same as with <Col>. You can set labelCol on Form which will not affect nest Item. If both exists, use Item first",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "messageVariables",
        "description": "The default validate field info",
        "type": "Record<string, string>",
        "default": "-",
        "version": "4.7.0"
      },
      {
        "property": "name",
        "description": "Field name, support array",
        "type": "NamePath",
        "default": "-",
        "version": ""
      },
      {
        "property": "normalize",
        "description": "Normalize value from component value before passing to Form instance. Do not support async",
        "type": "(value, prevValue, prevValues) => any",
        "default": "-",
        "version": ""
      },
      {
        "property": "noStyle",
        "description": "No style for true, used as a pure field control",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "preserve",
        "description": "Keep field value even when field removed",
        "type": "boolean",
        "default": "true",
        "version": "4.4.0"
      },
      {
        "property": "required",
        "description": "Display required style. It will be generated by the validation rule",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "rules",
        "description": "Rules for field validation. Click here to see an example",
        "type": "Rule[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "shouldUpdate",
        "description": "Custom field update logic. See below",
        "type": "boolean | (prevValue, curValue) => boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "tooltip",
        "description": "Config tooltip info",
        "type": "ReactNode | TooltipProps & { icon: ReactNode }",
        "default": "-",
        "version": "4.7.0"
      },
      {
        "property": "trigger",
        "description": "When to collect the value of children node. Click here to see an example",
        "type": "string",
        "default": "onChange",
        "version": ""
      },
      {
        "property": "validateFirst",
        "description": "Whether stop validate on first rule of error for this field. Will parallel validate when parallel cofigured",
        "type": "boolean | parallel",
        "default": "false",
        "version": "parallel: 4.5.0"
      },
      {
        "property": "validateStatus",
        "description": "The validation status. If not provided, it will be generated by validation rule. options: success warning error validating",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "validateTrigger",
        "description": "When to validate the value of children node",
        "type": "string | string[]",
        "default": "onChange",
        "version": ""
      },
      {
        "property": "valuePropName",
        "description": "Props of children node, for example, the prop of Switch is 'checked'. This prop is an encapsulation of getValueProps, which will be invalid after customizing getValueProps",
        "type": "string",
        "default": "value",
        "version": ""
      },
      {
        "property": "wrapperCol",
        "description": "The layout for input controls, same as labelCol. You can set wrapperCol on Form which will not affect nest Item. If both exists, use Item first",
        "type": "object",
        "default": "-",
        "version": ""
      }
    ],
    "Form.List": [
      {
        "property": "children",
        "description": "Render function",
        "type": "(fields: Field[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "initialValue",
        "description": "Config sub default value. Form initialValues get higher priority when conflict",
        "type": "any[]",
        "default": "-",
        "version": "4.9.0"
      },
      {
        "property": "name",
        "description": "Field name, support array",
        "type": "NamePath",
        "default": "-",
        "version": ""
      },
      {
        "property": "rules",
        "description": "Validate rules, only support customize validator. Should work with ErrorList",
        "type": "{ validator, message }[]",
        "default": "-",
        "version": "4.7.0"
      }
    ],
    "operation": [
      {
        "property": "add",
        "description": "add form item",
        "type": "(defaultValue?: any, insertIndex?: number) => void",
        "default": "insertIndex: 4.6.0"
      },
      {
        "property": "move",
        "description": "move form item",
        "type": "(from: number, to: number) => void",
        "default": "-"
      },
      {
        "property": "remove",
        "description": "remove form item",
        "type": "(index: number | number[]) => void",
        "default": "number[]: 4.5.0"
      }
    ],
    "Form.ErrorList": [
      {
        "property": "errors",
        "description": "Error list",
        "type": "ReactNode[]",
        "default": "-"
      }
    ],
    "Form.Provider": [
      {
        "property": "onFormChange",
        "description": "Triggered when a sub form field updates",
        "type": "function(formName: string, info: { changedFields, forms })",
        "default": "-"
      },
      {
        "property": "onFormFinish",
        "description": "Triggered when a sub form submits",
        "type": "function(formName: string, info: { values, forms })",
        "default": "-"
      }
    ],
    "FormInstance": [
      {
        "name": "getFieldError",
        "description": "Get the error messages by the field name",
        "type": "(name: NamePath) => string[]",
        "version": ""
      },
      {
        "name": "getFieldInstance",
        "description": "Get field instance",
        "type": "(name: NamePath) => any",
        "version": "4.4.0"
      },
      {
        "name": "getFieldsError",
        "description": "Get the error messages by the fields name. Return as an array",
        "type": "(nameList?: NamePath[]) => FieldError[]",
        "version": ""
      },
      {
        "name": "getFieldsValue",
        "description": "Get values by a set of field names. Return according to the corresponding structure. Default return mounted field value, but you can use getFieldsValue(true) to get all values",
        "type": "(nameList?: NamePath[], filterFunc?: (meta: { touched: boolean, validating: boolean }) => boolean) => any",
        "version": ""
      },
      {
        "name": "getFieldValue",
        "description": "Get the value by the field name",
        "type": "(name: NamePath) => any",
        "version": ""
      },
      {
        "name": "isFieldsTouched",
        "description": "Check if fields have been operated. Check if all fields is touched when allTouched is true",
        "type": "(nameList?: NamePath[], allTouched?: boolean) => boolean",
        "version": ""
      },
      {
        "name": "isFieldTouched",
        "description": "Check if a field has been operated",
        "type": "(name: NamePath) => boolean",
        "version": ""
      },
      {
        "name": "isFieldValidating",
        "description": "Check field if is in validating",
        "type": "(name: NamePath) => boolean",
        "version": ""
      },
      {
        "name": "resetFields",
        "description": "Reset fields to initialValues",
        "type": "(fields?: FieldData[]) => void",
        "version": ""
      },
      {
        "name": "scrollToField",
        "description": "Scroll to field position",
        "type": "(name: NamePath, options: [ScrollOptions]) => void",
        "version": ""
      },
      {
        "name": "setFields",
        "description": "Set fields status",
        "type": "(fields: FieldData[]) => void",
        "version": ""
      },
      {
        "name": "setFieldsValue",
        "description": "Set fields value",
        "type": "(values) => void",
        "version": ""
      },
      {
        "name": "submit",
        "description": "Submit the form. It's same as click submit button",
        "type": "() => void",
        "version": ""
      },
      {
        "name": "validateFields",
        "description": "Validate fields",
        "type": "(nameList?: NamePath[]) => Promise",
        "version": ""
      }
    ],
    "FieldData": [
      {
        "name": "errors",
        "description": "Error messages",
        "type": "string[]"
      },
      {
        "name": "name",
        "description": "Field name path",
        "type": "NamePath[]"
      },
      {
        "name": "touched",
        "description": "Whether is operated",
        "type": "boolean"
      },
      {
        "name": "validating",
        "description": "Whether is in validating",
        "type": "boolean"
      },
      {
        "name": "value",
        "description": "Field value",
        "type": "any"
      }
    ],
    "": [
      {
        "name": "defaultField",
        "description": "Validate rule for all array elements, valid when type is array",
        "type": "rule"
      },
      {
        "name": "enum",
        "description": "Match enum value. You need to set type to enum to enable this",
        "type": "any[]"
      },
      {
        "name": "fields",
        "description": "Validate rule for child elements, valid when type is array or object",
        "type": "Record<string, rule>"
      },
      {
        "name": "len",
        "description": "Length of string, number, array",
        "type": "number"
      },
      {
        "name": "max",
        "description": "type required: max length of string, number, array",
        "type": "number"
      },
      {
        "name": "message",
        "description": "Error message. Will auto generate by template if not provided",
        "type": "string"
      },
      {
        "name": "min",
        "description": "type required: min length of string, number, array",
        "type": "number"
      },
      {
        "name": "pattern",
        "description": "Regex pattern",
        "type": "RegExp"
      },
      {
        "name": "required",
        "description": "Required field",
        "type": "boolean"
      },
      {
        "name": "transform",
        "description": "Transform value to the rule before validation",
        "type": "(value) => any"
      },
      {
        "name": "type",
        "description": "Normally string |number |boolean |url | email. More type to ref here",
        "type": "string"
      },
      {
        "name": "validateTrigger",
        "description": "Set validate trigger event. Must be the sub set of validateTrigger in Form.Item",
        "type": "string | string[]"
      },
      {
        "name": "validator",
        "description": "Customize validation rule. Accept Promise as return. See example",
        "type": "(rule, value) => Promise"
      },
      {
        "name": "whitespace",
        "description": "Failed if only has whitespace, only work with type: 'string' rule",
        "type": "boolean"
      }
    ]
  },
  "Input": {
    "Input": [
      {
        "property": "addonAfter",
        "description": "The label text displayed after (on the right side of) the input field",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "addonBefore",
        "description": "The label text displayed before (on the left side of) the input field",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "allowClear",
        "description": "If allow to remove input content with clear icon",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": "4.5.0"
      },
      {
        "property": "defaultValue",
        "description": "The initial input content",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Whether the input is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "id",
        "description": "The ID for input",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "maxLength",
        "description": "The max length",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "prefix",
        "description": "The prefix icon for the Input",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "size",
        "description": "The size of the input box. Note: in the context of a form, the large size is used",
        "type": "large | middle | small",
        "default": "-",
        "version": ""
      },
      {
        "property": "suffix",
        "description": "The suffix icon for the Input",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "type",
        "description": "The type of input, see: MDN( use Input.TextArea instead of type=\"textarea\")",
        "type": "string",
        "default": "text",
        "version": ""
      },
      {
        "property": "value",
        "description": "The input content value",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback when user input",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed",
        "type": "function(e)",
        "default": "-",
        "version": ""
      }
    ],
    "Input.TextArea": [
      {
        "property": "allowClear",
        "description": "If allow to remove input content with clear icon",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "autoSize",
        "description": "Height autosize feature, can be set to true | false or an object { minRows: 2, maxRows: 6 }",
        "type": "boolean | object",
        "default": "false",
        "version": ""
      },
      {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": "4.5.0"
      },
      {
        "property": "defaultValue",
        "description": "The initial input content",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "maxLength",
        "description": "The max length",
        "type": "number",
        "default": "-",
        "version": "4.7.0"
      },
      {
        "property": "showCount",
        "description": "Whether show text count",
        "type": "boolean | { formatter: ({ count: number, maxLength?: number }) => string }",
        "default": "false",
        "version": "4.7.0 (formatter: 4.10.0)"
      },
      {
        "property": "value",
        "description": "The input content value",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onResize",
        "description": "The callback function that is triggered when resize",
        "type": "function({ width, height })",
        "default": "-",
        "version": ""
      }
    ],
    "Input.Search": [
      {
        "property": "enterButton",
        "description": "Whether to show an enter button after input. This property conflicts with the addonAfter property",
        "type": "boolean | ReactNode",
        "default": "false"
      },
      {
        "property": "loading",
        "description": "Search box with loading",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "onSearch",
        "description": "The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key",
        "type": "function(value, event)",
        "default": "-"
      }
    ],
    "Input.Group": [
      {
        "property": "compact",
        "description": "Whether use compact style",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "size",
        "description": "The size of Input.Group specifies the size of the included Input fields. Available: large default small",
        "type": "string",
        "default": "default"
      }
    ],
    "Input.Password": [
      {
        "property": "iconRender",
        "description": "Custom toggle button",
        "type": "(visible) => ReactNode",
        "default": "(visible) => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)",
        "version": "4.3.0"
      },
      {
        "property": "visibilityToggle",
        "description": "Whether show toggle button",
        "type": "boolean",
        "default": "true",
        "version": ""
      }
    ],
    "Input-Methods": [
      {
        "name": "blur",
        "description": "Remove focus",
        "parameters": "-",
        "version": ""
      },
      {
        "name": "focus",
        "description": "Get focus",
        "parameters": "(option?: { preventScroll?: boolean, cursor?: 'start' | 'end' | 'all' })",
        "version": "option - 4.10.0"
      }
    ]
  },
  "InputNumber": {
    "API": [
      {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": "4.12.0"
      },
      {
        "property": "decimalSeparator",
        "description": "Decimal separator",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      {
        "property": "defaultValue",
        "description": "The initial value",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      {
        "property": "disabled",
        "description": "If disable the input",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      {
        "property": "formatter",
        "description": "Specifies the format of the value presented",
        "type": "function(value: number | string): string",
        "default": "-",
        "version": "-"
      },
      {
        "property": "keyboard",
        "description": "If enable keyboard behavior",
        "type": "boolean",
        "default": "true",
        "version": "4.12.0"
      },
      {
        "property": "max",
        "description": "The max value",
        "type": "number",
        "default": "Number.MAX_SAFE_INTEGER",
        "version": "-"
      },
      {
        "property": "min",
        "description": "The min value",
        "type": "number",
        "default": "Number.MIN_SAFE_INTEGER",
        "version": "-"
      },
      {
        "property": "parser",
        "description": "Specifies the value extracted from formatter",
        "type": "function(string): number",
        "default": "-",
        "version": "-"
      },
      {
        "property": "precision",
        "description": "The precision of input value. Will use formatter when config of formatter",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      {
        "property": "readOnly",
        "description": "If readonly the input",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      {
        "property": "size",
        "description": "The height of input box",
        "type": "large | middle | small",
        "default": "-",
        "version": "-"
      },
      {
        "property": "step",
        "description": "The number to which the current value is increased or decreased. It can be an integer or decimal",
        "type": "number | string",
        "default": "1",
        "version": "-"
      },
      {
        "property": "stringMode",
        "description": "Set value as string to support high precision decimals. Will return string value by onChange",
        "type": "boolean",
        "default": "false",
        "version": "4.13.0"
      },
      {
        "property": "value",
        "description": "The current value",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      {
        "property": "onChange",
        "description": "The callback triggered when the value is changed",
        "type": "function(value: number | string | null)",
        "default": "-",
        "version": "-"
      },
      {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed",
        "type": "function(e)",
        "default": "-",
        "version": "-"
      },
      {
        "property": "onStep",
        "description": "The callback function that is triggered when click up or down buttons",
        "type": "(value: number, info: { offset: number, type: 'up' | 'down' }) => void",
        "default": "-",
        "version": "4.7.0"
      }
    ],
    "Methods": [
      {
        "name": "blur()",
        "description": "Remove focus"
      },
      {
        "name": "focus()",
        "description": "Get focus"
      }
    ]
  },
  "Mentions": {
    "Mention": [
      {
        "property": "autoFocus",
        "description": "Auto get focus when component mounted",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "autoSize",
        "description": "Textarea height autosize feature, can be set to true | false or an object { minRows: 2, maxRows: 6 }",
        "type": "boolean | object",
        "default": "false"
      },
      {
        "property": "defaultValue",
        "description": "Default value",
        "type": "string",
        "default": "-"
      },
      {
        "property": "filterOption",
        "description": "Customize filter option logic",
        "type": "false | (input: string, option: OptionProps) => boolean",
        "default": "-"
      },
      {
        "property": "getPopupContainer",
        "description": "Set the mount HTML node for suggestions",
        "type": "() => HTMLElement",
        "default": "-"
      },
      {
        "property": "notFoundContent",
        "description": "Set mentions content when not match",
        "type": "ReactNode",
        "default": "Not Found"
      },
      {
        "property": "placement",
        "description": "Set popup placement",
        "type": "top | bottom",
        "default": "bottom"
      },
      {
        "property": "prefix",
        "description": "Set trigger prefix keyword",
        "type": "string | string[]",
        "default": "@"
      },
      {
        "property": "split",
        "description": "Set split string before and after selected mention",
        "type": "string",
        "default": ""
      },
      {
        "property": "validateSearch",
        "description": "Customize trigger search logic",
        "type": "(text: string, props: MentionsProps) => void",
        "default": "-"
      },
      {
        "property": "value",
        "description": "Set value of mentions",
        "type": "string",
        "default": "-"
      },
      {
        "property": "onBlur",
        "description": "Trigger when mentions lose focus",
        "type": "() => void",
        "default": "-"
      },
      {
        "property": "onChange",
        "description": "Trigger when value changed",
        "type": "(text: string) => void",
        "default": "-"
      },
      {
        "property": "onFocus",
        "description": "Trigger when mentions get focus",
        "type": "() => void",
        "default": "-"
      },
      {
        "property": "onResize",
        "description": "The callback function that is triggered when textarea resize",
        "type": "function({ width, height })",
        "default": "-"
      },
      {
        "property": "onSearch",
        "description": "Trigger when prefix hit",
        "type": "(text: string, prefix: string) => void",
        "default": "-"
      },
      {
        "property": "onSelect",
        "description": "Trigger when user select the option",
        "type": "(option: OptionProps, prefix: string) => void",
        "default": "-"
      }
    ],
    "Mention-methods": [
      {
        "name": "blur()",
        "description": "Remove focus"
      },
      {
        "name": "focus()",
        "description": "Get focus"
      }
    ],
    "Option": [
      {
        "property": "children",
        "description": "Suggestion content",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "value",
        "description": "The value of suggestion, the value will insert into input filed while selected",
        "type": "string",
        "default": "-"
      }
    ]
  },
  "Radio": {
    "Radio/Radio.Button": [
      {
        "property": "autoFocus",
        "description": "Whether get focus when component mounted",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "checked",
        "description": "Specifies whether the radio is selected",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "defaultChecked",
        "description": "Specifies the initial state: whether or not the radio is selected",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "disabled",
        "description": "Disable radio",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "value",
        "description": "According to value for comparison, to determine whether the selected",
        "type": "any",
        "default": "-"
      }
    ],
    "RadioGroup": [
      {
        "property": "buttonStyle",
        "description": "The style type of radio button",
        "type": "outline | solid",
        "default": "outline",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "Default selected value",
        "type": "any",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disable all radio buttons",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "name",
        "description": "The name property of all input[type=\"radio\"] children",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "options",
        "description": "Set children optional",
        "type": "string[] | Array<{ label: string value: string disabled?: boolean }>",
        "default": "-",
        "version": ""
      },
      {
        "property": "optionType",
        "description": "Set Radio optionType",
        "type": "default | button",
        "default": "default",
        "version": "4.4.0"
      },
      {
        "property": "size",
        "description": "The size of radio button style",
        "type": "large | middle | small",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "Used for setting the currently selected value",
        "type": "any",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes",
        "type": "function(e:Event)",
        "default": "-",
        "version": ""
      }
    ],
    "Radio": [
      {
        "name": "blur()",
        "description": "Remove focus"
      },
      {
        "name": "focus()",
        "description": "Get focus"
      }
    ]
  },
  "Rate": {
    "API": [
      {
        "property": "allowClear",
        "description": "Whether to allow clear when click again",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "allowHalf",
        "description": "Whether to allow semi selection",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "character",
        "description": "The custom character of rate",
        "type": "ReactNode | (RateProps) => ReactNode",
        "default": "<StarFilled />",
        "version": "function(): 4.4.0"
      },
      {
        "property": "className",
        "description": "The custom class name of rate",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "count",
        "description": "Star count",
        "type": "number",
        "default": "5",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "The default value",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "If read only, unable to interact",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "style",
        "description": "The custom style object of rate",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "tooltips",
        "description": "Customize tooltip by each character",
        "type": "string[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "The current value",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "onBlur",
        "description": "Callback when component lose focus",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback when select value",
        "type": "function(value: number)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onFocus",
        "description": "Callback when component get focus",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      {
        "property": "onHoverChange",
        "description": "Callback when hover item",
        "type": "function(value: number)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onKeyDown",
        "description": "Callback when keydown on component",
        "type": "function(event)",
        "default": "-",
        "version": ""
      }
    ],
    "Methods": [
      {
        "name": "blur()",
        "description": "Remove focus"
      },
      {
        "name": "focus()",
        "description": "Get focus"
      }
    ]
  },
  "Select": {
    "Select-Methods": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ],
    "Option-props": [
      {
        "property": "className",
        "description": "The additional class to option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disable this option",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "title",
        "description": "title of Select after select this Option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "Default to filter with this property",
        "type": "string | number",
        "default": "-",
        "version": ""
      }
    ],
    "OptGroup-props": [
      {
        "property": "key",
        "description": "Group key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "label",
        "description": "Group label",
        "type": "string | React.Element",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Slider": {
    "API": [
      {
        "property": "autoFocus",
        "description": "Whether get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "The default value of slider. When range is false, use number, otherwise, use [number, number]",
        "type": "number | [number, number]",
        "default": "0 | [0, 0]",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "If true, the slider will not be interactable",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "dots",
        "description": "Whether the thumb can drag over tick only",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "getTooltipPopupContainer",
        "description": "The DOM container of the Tooltip, the default behavior is to create a div element in body",
        "type": "(triggerNode) => HTMLElement",
        "default": "() => document.body",
        "version": ""
      },
      {
        "property": "included",
        "description": "Make effect when marks not null, true means containment and false means coordinative",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "marks",
        "description": "Tick mark of Slider, type of key must be number, and must in closed interval [min, max], each mark can declare its own style",
        "type": "object",
        "default": "{ number: ReactNode } | { number: { style: CSSProperties, label: ReactNode } }",
        "version": ""
      },
      {
        "property": "max",
        "description": "The maximum value the slider can slide to",
        "type": "number",
        "default": "100",
        "version": ""
      },
      {
        "property": "min",
        "description": "The minimum value the slider can slide to",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "range",
        "description": "Dual thumb mode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "reverse",
        "description": "Reverse the component",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "step",
        "description": "The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When marks no null, step can be null",
        "type": "number | null",
        "default": "1",
        "version": ""
      },
      {
        "property": "tipFormatter",
        "description": "Slider will pass its value to tipFormatter, and display its value in Tooltip, and hide Tooltip when return value is null",
        "type": "value => ReactNode | null",
        "default": "IDENTITY",
        "version": ""
      },
      {
        "property": "tooltipPlacement",
        "description": "Set Tooltip display position. Ref Tooltip",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "tooltipVisible",
        "description": "If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "The value of slider. When range is false, use number, otherwise, use [number, number]",
        "type": "number | [number, number]",
        "default": "-",
        "version": ""
      },
      {
        "property": "vertical",
        "description": "If true, the slider will be vertical",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "onAfterChange",
        "description": "Fire when onmouseup is fired",
        "type": "(value) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback function that is fired when the user changes the slider's value",
        "type": "(value) => void",
        "default": "-",
        "version": ""
      }
    ],
    "range": [
      {
        "property": "draggableTrack",
        "description": "Whether range track can be drag",
        "type": "boolean",
        "default": "false",
        "version": "4.10.0"
      }
    ],
    "Methods": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ]
  },
  "Switch": {
    "API": [
      {
        "property": "autoFocus",
        "description": "Whether get focus when component mounted",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "checked",
        "description": "Determine whether the Switch is checked",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "checkedChildren",
        "description": "The content to be shown when the state is checked",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "className",
        "description": "The additional class to Switch",
        "type": "string",
        "default": "-"
      },
      {
        "property": "defaultChecked",
        "description": "Whether to set the initial state",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "disabled",
        "description": "Disable switch",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "loading",
        "description": "Loading state of switch",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "size",
        "description": "The size of the Switch, options: default small",
        "type": "string",
        "default": "default"
      },
      {
        "property": "unCheckedChildren",
        "description": "The content to be shown when the state is unchecked",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "onChange",
        "description": "Trigger when the checked state is changing",
        "type": "function(checked: boolean, event: Event)",
        "default": "-"
      },
      {
        "property": "onClick",
        "description": "Trigger when clicked",
        "type": "function(checked: boolean, event: Event)",
        "default": "-"
      }
    ],
    "Methods": [
      {
        "name": "blur()",
        "description": "Remove focus"
      },
      {
        "name": "focus()",
        "description": "Get focus"
      }
    ]
  },
  "TimePicker": {
    "": [
      {
        "property": "allowClear",
        "description": "Whether allow clearing text",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "className",
        "description": "The className of picker",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "clearIcon",
        "description": "The custom clear icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "clearText",
        "description": "The clear tooltip of icon",
        "type": "string",
        "default": "clear",
        "version": ""
      },
      {
        "property": "defaultValue",
        "description": "To set default time",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Determine whether the TimePicker is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabledHours",
        "description": "To specify the hours that cannot be selected",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabledMinutes",
        "description": "To specify the minutes that cannot be selected",
        "type": "function(selectedHour)",
        "default": "-",
        "version": ""
      },
      {
        "property": "disabledSeconds",
        "description": "To specify the seconds that cannot be selected",
        "type": "function(selectedHour, selectedMinute)",
        "default": "-",
        "version": ""
      },
      {
        "property": "format",
        "description": "To set the time format",
        "type": "string",
        "default": "HH:mm:ss",
        "version": ""
      },
      {
        "property": "getPopupContainer",
        "description": "To set the container of the floating layer, while the default is to create a div element in body",
        "type": "function(trigger)",
        "default": "-",
        "version": ""
      },
      {
        "property": "hideDisabledOptions",
        "description": "Whether hide the options that can not be selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "hourStep",
        "description": "Interval between hours in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      {
        "property": "inputReadOnly",
        "description": "Set the readonly attribute of the input tag (avoids virtual keyboard on touch devices)",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "minuteStep",
        "description": "Interval between minutes in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      {
        "property": "open",
        "description": "Whether to popup panel",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "placeholder",
        "description": "Display when there's no value",
        "type": "string | [string, string]",
        "default": "Select a time",
        "version": ""
      },
      {
        "property": "popupClassName",
        "description": "The className of panel",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "popupStyle",
        "description": "The style of panel",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "renderExtraFooter",
        "description": "Called from time picker panel to render some addon to its bottom",
        "type": "() => ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "secondStep",
        "description": "Interval between seconds in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      {
        "property": "showNow",
        "description": "Whether to show Now button on panel",
        "type": "boolean",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "use12Hours",
        "description": "Display as 12 hours format, with default format h:mm:ss a",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "value",
        "description": "To set time",
        "type": "moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "A callback function, can be executed when the selected time is changing",
        "type": "function(time: moment, timeString: string): void",
        "default": "-",
        "version": ""
      },
      {
        "property": "onOpenChange",
        "description": "A callback function which will be called while panel opening/closing",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "onSelect",
        "description": "A callback function, executes when a value is selected",
        "type": "function(time: moment): void",
        "default": "-",
        "version": ""
      }
    ],
    "Methods": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ],
    "RangePicker": [
      {
        "property": "order",
        "description": "Order start and end time",
        "type": "boolean",
        "default": "true",
        "version": "4.1.0"
      }
    ]
  },
  "Transfer": {
    "Render-Props": [
      {
        "property": "direction",
        "description": "List render direction",
        "type": "left | right",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disable list or not",
        "type": "boolean",
        "version": ""
      },
      {
        "property": "filteredItems",
        "description": "Filtered items",
        "type": "RecordType[]",
        "version": ""
      },
      {
        "property": "selectedKeys",
        "description": "Selected items",
        "type": "string[]",
        "version": ""
      },
      {
        "property": "onItemSelect",
        "description": "Select item",
        "type": "(key: string, selected: boolean)",
        "version": ""
      },
      {
        "property": "onItemSelectAll",
        "description": "Select a group of items",
        "type": "(keys: string[], selected: boolean)",
        "version": ""
      }
    ]
  },
  "TreeSelect": {
    "Tree-Methods": [
      {
        "name": "blur()",
        "description": "Remove focus",
        "version": ""
      },
      {
        "name": "focus()",
        "description": "Get focus",
        "version": ""
      }
    ],
    "TreeNode-props": [
      {
        "property": "checkable",
        "description": "When Tree is checkable, set TreeNode display Checkbox or not",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "disableCheckbox",
        "description": "Disables the checkbox of the treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disabled or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "isLeaf",
        "description": "Leaf node or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "key",
        "description": "Required property (unless using treeDataSimpleMode), should be unique in the tree",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "selectable",
        "description": "Whether can be selected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "title",
        "description": "Content showed on the treeNodes",
        "type": "ReactNode",
        "default": "---",
        "version": ""
      },
      {
        "property": "value",
        "description": "Will be treated as treeNodeFilterProp by default, should be unique in the tree",
        "type": "string",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Upload": {
    "API": [
      {
        "property": "accept",
        "description": "File types that can be accepted. See input accept Attribute",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "action",
        "description": "Uploading URL",
        "type": "string | (file) => Promise<string>",
        "default": "-",
        "version": ""
      },
      {
        "property": "beforeUpload",
        "description": "Hook function which will be executed before uploading. Uploading will be stopped with false or a rejected Promise returned. When returned value is Upload.LIST_IGNORE, the list of files that have been uploaded will ignore it. Warning：this function is not supported in IE9",
        "type": "(file, fileList) => boolean | Promise<File> | Upload.LIST_IGNORE",
        "default": "-",
        "version": ""
      },
      {
        "property": "customRequest",
        "description": "Override for the default xhr behavior allowing for additional customization and ability to implement your own XMLHttpRequest",
        "type": "function",
        "default": "-",
        "version": ""
      },
      {
        "property": "data",
        "description": "Uploading extra params or function which can return uploading extra params",
        "type": "object | (file) => object | Promise<object>",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultFileList",
        "description": "Default list of files that have been uploaded",
        "type": "object[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "directory",
        "description": "Support upload whole directory (caniuse)",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "disabled",
        "description": "Disable upload button",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "fileList",
        "description": "List of files that have been uploaded (controlled). Here is a common issue #2423 when using it",
        "type": "UploadFile[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "headers",
        "description": "Set request headers, valid above IE10",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "iconRender",
        "description": "Custom show icon",
        "type": "(file: UploadFile, listType?: UploadListType) => ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "isImageUrl",
        "description": "Customize if render <img /> in thumbnail",
        "type": "(file: UploadFile) => boolean",
        "default": "(inside implementation)",
        "version": ""
      },
      {
        "property": "itemRender",
        "description": "Custom item of uploadList",
        "type": "(originNode: ReactElement, file: UploadFile, fileList: object[], actions: { download: function, preview: function, remove: function }) => React.ReactNode",
        "default": "-",
        "version": "4.16.0"
      },
      {
        "property": "listType",
        "description": "Built-in stylesheets, support for three types: text, picture or picture-card",
        "type": "string",
        "default": "text",
        "version": ""
      },
      {
        "property": "maxCount",
        "description": "Limit the number of uploaded files. Will replace current one when maxCount is 1",
        "type": "number",
        "default": "-",
        "version": "4.10.0"
      },
      {
        "property": "method",
        "description": "The http method of upload request",
        "type": "string",
        "default": "post",
        "version": ""
      },
      {
        "property": "multiple",
        "description": "Whether to support selected multiple file. IE10+ supported. You can select multiple files with CTRL holding down while multiple is set to be true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "name",
        "description": "The name of uploading file",
        "type": "string",
        "default": "file",
        "version": ""
      },
      {
        "property": "openFileDialogOnClick",
        "description": "Click open file dialog",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "previewFile",
        "description": "Customize preview file logic",
        "type": "(file: File | Blob) => Promise<dataURL: string>",
        "default": "-",
        "version": ""
      },
      {
        "property": "progress",
        "description": "Custom progress bar",
        "type": "ProgressProps (support type=\"line\" only)",
        "default": "{ strokeWidth: 2, showInfo: false }",
        "version": "4.3.0"
      },
      {
        "property": "showUploadList",
        "description": "Whether to show default upload list, could be an object to specify showPreviewIcon, showRemoveIcon, showDownloadIcon, removeIcon and downloadIcon individually",
        "type": "boolean | { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean, removeIcon?: ReactNode | (file: UploadFile) => ReactNode, downloadIcon?: ReactNode | (file: UploadFile) => ReactNode }",
        "default": "true",
        "version": "function: 4.7.0"
      },
      {
        "property": "withCredentials",
        "description": "The ajax upload with cookie sent",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "A callback function, can be executed when uploading state is changing, see onChange",
        "type": "function",
        "default": "-",
        "version": ""
      },
      {
        "property": "onDrop",
        "description": "A callback function executed when files are dragged and dropped into upload area",
        "type": "(event: React.DragEvent) => void",
        "default": "-",
        "version": "4.16.0"
      },
      {
        "property": "onDownload",
        "description": "Click the method to download the file, pass the method to perform the method logic, do not pass the default jump to the new TAB",
        "type": "function(file): void",
        "default": "(Jump to new TAB)",
        "version": ""
      },
      {
        "property": "onPreview",
        "description": "A callback function, will be executed when file link or preview icon is clicked",
        "type": "function(file)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onRemove",
        "description": "A callback function, will be executed when removing file button is clicked, remove event will be prevented when return value is false or a Promise which resolve(false) or reject",
        "type": "function(file): boolean | Promise",
        "default": "-",
        "version": ""
      }
    ],
    "UploadFile": [
      {
        "property": "name",
        "description": "File name",
        "type": "string",
        "default": "-"
      },
      {
        "property": "percent",
        "description": "Upload progress percent",
        "type": "number",
        "default": "-"
      },
      {
        "property": "status",
        "description": "Upload status. Show different style when configured",
        "type": "error | success | done | uploading | removed",
        "default": "-"
      },
      {
        "property": "thumbUrl",
        "description": "Thumb image url",
        "type": "string",
        "default": "-"
      },
      {
        "property": "uid",
        "description": "unique id. Will auto generate when not provided",
        "type": "string",
        "default": "-"
      },
      {
        "property": "url",
        "description": "Download url",
        "type": "string",
        "default": "-"
      }
    ]
  },
  "Avatar": {
    "Avatar": [
      {
        "property": "alt",
        "description": "This attribute defines the alternative text describing the image",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "gap",
        "description": "Letter type unit distance between left and right sides",
        "type": "number",
        "default": "4",
        "version": "4.3.0"
      },
      {
        "property": "icon",
        "description": "Custom icon type for an icon avatar",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "shape",
        "description": "The shape of avatar",
        "type": "circle | square",
        "default": "circle",
        "version": ""
      },
      {
        "property": "size",
        "description": "The size of the avatar",
        "type": "number | large | small | default | { xs: number, sm: number, ...}",
        "default": "default",
        "version": "4.7.0"
      },
      {
        "property": "src",
        "description": "The address of the image for an image avatar or image element",
        "type": "string | ReactNode",
        "default": "-",
        "version": "ReactNode: 4.8.0"
      },
      {
        "property": "srcSet",
        "description": "A list of sources to use for different screen resolutions",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "draggable",
        "description": "Whether the picture is allowed to be dragged",
        "type": "boolean | 'true' | 'false'",
        "default": "-",
        "version": ""
      },
      {
        "property": "onError",
        "description": "Handler when img load error, return false to prevent default fallback behavior",
        "type": "() => boolean",
        "default": "-",
        "version": ""
      }
    ],
    "Avatar.Group-(4.5.0+)": [
      {
        "property": "maxCount",
        "description": "Max avatars to show",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "maxPopoverPlacement",
        "description": "The placement of excess avatar Popover",
        "type": "top | bottom",
        "default": "top",
        "version": ""
      },
      {
        "property": "maxStyle",
        "description": "The style of excess avatar style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "size",
        "description": "The size of the avatar",
        "type": "number | large | small | default | { xs: number, sm: number, ...}",
        "default": "default",
        "version": "4.8.0"
      }
    ]
  },
  "Badge": {
    "Badge": [
      {
        "property": "color",
        "description": "Customize Badge dot color",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "count",
        "description": "Number to show in badge",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "dot",
        "description": "Whether to display a red dot instead of count",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "offset",
        "description": "Set offset of the badge dot",
        "type": "[number, number]",
        "default": "-",
        "version": ""
      },
      {
        "property": "overflowCount",
        "description": "Max count to show",
        "type": "number",
        "default": "99",
        "version": ""
      },
      {
        "property": "showZero",
        "description": "Whether to show badge when count is zero",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "size",
        "description": "If count is set, size sets the size of badge",
        "type": "default | small",
        "default": "-",
        "version": "4.6.0"
      },
      {
        "property": "status",
        "description": "Set Badge as a status dot",
        "type": "success | processing | default | error | warning",
        "default": "-",
        "version": ""
      },
      {
        "property": "text",
        "description": "If status is set, text sets the display text of the status dot",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "Text to show when hovering over the badge",
        "type": "string",
        "default": "-",
        "version": ""
      }
    ],
    "Badge.Ribbon-(4.5.0+)": [
      {
        "property": "color",
        "description": "Customize Ribbon color",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "placement",
        "description": "The placement of the Ribbon, start and end follow text direction (RTL or LTR)",
        "type": "start | end",
        "default": "end",
        "version": ""
      },
      {
        "property": "text",
        "description": "Content inside the Ribbon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Calendar": [
    {
      "property": "dateCellRender",
      "description": "Customize the display of the date cell, the returned content will be appended to the cell",
      "type": "function(date: moment): ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "dateFullCellRender",
      "description": "Customize the display of the date cell, the returned content will override the cell",
      "type": "function(date: moment): ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "defaultValue",
      "description": "The date selected by default",
      "type": "moment",
      "default": "-",
      "version": ""
    },
    {
      "property": "disabledDate",
      "description": "Function that specifies the dates that cannot be selected, currentDate is same moment object as value prop which you shouldn't mutate it](https://github.com/ant-design/ant-design/issues/30987)",
      "type": "(currentDate: moment) => boolean",
      "default": "-",
      "version": ""
    },
    {
      "property": "fullscreen",
      "description": "Whether to display in full-screen",
      "type": "boolean",
      "default": "true",
      "version": ""
    },
    {
      "property": "headerRender",
      "description": "Render custom header in panel",
      "type": "function(object:{value: moment, type: string, onChange: f(), onTypeChange: f()})",
      "default": "-",
      "version": ""
    },
    {
      "property": "locale",
      "description": "The calendar's locale",
      "type": "object",
      "default": "(default)",
      "version": ""
    },
    {
      "property": "mode",
      "description": "The display mode of the calendar",
      "type": "month | year",
      "default": "month",
      "version": ""
    },
    {
      "property": "monthCellRender",
      "description": "Customize the display of the month cell, the returned content will be appended to the cell",
      "type": "function(date: moment): ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "monthFullCellRender",
      "description": "Customize the display of the month cell, the returned content will override the cell",
      "type": "function(date: moment): ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "validRange",
      "description": "To set valid range",
      "type": "[moment, moment]",
      "default": "-",
      "version": ""
    },
    {
      "property": "value",
      "description": "The current selected date",
      "type": "moment",
      "default": "-",
      "version": ""
    },
    {
      "property": "onChange",
      "description": "Callback for when date changes",
      "type": "function(date: moment）",
      "default": "-",
      "version": ""
    },
    {
      "property": "onPanelChange",
      "description": "Callback for when panel changes",
      "type": "function(date: moment, mode: string)",
      "default": "-",
      "version": ""
    },
    {
      "property": "onSelect",
      "description": "Callback for when a date is selected",
      "type": "function(date: moment）",
      "default": "-",
      "version": ""
    }
  ],
  "Card": {
    "Card": [
      {
        "property": "actions",
        "description": "The action list, shows at the bottom of the Card",
        "type": "Array<ReactNode>",
        "default": "-",
        "version": ""
      },
      {
        "property": "activeTabKey",
        "description": "Current TabPane's key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "bodyStyle",
        "description": "Inline style to apply to the card content",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "bordered",
        "description": "Toggles rendering of the border around the card",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "cover",
        "description": "Card cover",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultActiveTabKey",
        "description": "Initial active TabPane's key, if activeTabKey is not set",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "extra",
        "description": "Content to render in the top-right corner of the card",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "headStyle",
        "description": "Inline style to apply to the card head",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "hoverable",
        "description": "Lift up when hovering card",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "loading",
        "description": "Shows a loading indicator while the contents of the card are being fetched",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "size",
        "description": "Size of card",
        "type": "default | small",
        "default": "default",
        "version": ""
      },
      {
        "property": "tabBarExtraContent",
        "description": "Extra content in tab bar",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "tabList",
        "description": "List of TabPane's head",
        "type": "Array<{key: string, tab: ReactNode}>",
        "default": "-",
        "version": ""
      },
      {
        "property": "tabProps",
        "description": "Tabs",
        "type": "-",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "Card title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "type",
        "description": "Card style type, can be set to inner or not set",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "onTabChange",
        "description": "Callback when tab is switched",
        "type": "(key) => void",
        "default": "-",
        "version": ""
      }
    ],
    "Card.Grid": [
      {
        "property": "className",
        "description": "The className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "hoverable",
        "description": "Lift up when hovering card grid",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "style",
        "description": "The style object of container",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    ],
    "Card.Meta": [
      {
        "property": "avatar",
        "description": "Avatar or icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "className",
        "description": "The className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "description",
        "description": "Description content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "style",
        "description": "The style object of container",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "Title content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Carousel": {
    "API": [
      {
        "property": "autoplay",
        "description": "Whether to scroll automatically",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "dotPosition",
        "description": "The position of the dots, which can be one of top bottom left right",
        "type": "string",
        "default": "bottom",
        "version": ""
      },
      {
        "property": "dots",
        "description": "Whether to show the dots at the bottom of the gallery, object for dotsClass and any others",
        "type": "boolean | { className?: string }",
        "default": "true",
        "version": ""
      },
      {
        "property": "easing",
        "description": "Transition interpolation function name",
        "type": "string",
        "default": "linear",
        "version": ""
      },
      {
        "property": "effect",
        "description": "Transition effect",
        "type": "scrollx | fade",
        "default": "scrollx",
        "version": ""
      },
      {
        "property": "afterChange",
        "description": "Callback function called after the current index changes",
        "type": "function(current)",
        "default": "-",
        "version": ""
      },
      {
        "property": "beforeChange",
        "description": "Callback function called before the current index changes",
        "type": "function(from, to)",
        "default": "-",
        "version": ""
      }
    ],
    "Methods": [
      {
        "name": "goTo(slideNumber, dontAnimate)",
        "description": "Go to slide index, if dontAnimate=true, it happens without animation"
      },
      {
        "name": "next()",
        "description": "Change current slide to next slide"
      },
      {
        "name": "prev()",
        "description": "Change current slide to previous slide"
      }
    ]
  },
  "Collapse": {
    "Collapse.Panel": [
      {
        "property": "collapsible",
        "description": "Specify whether the panel be collapsible or the trigger area of collapsible",
        "type": "header | disabled",
        "default": "-",
        "version": "4.9.0"
      },
      {
        "property": "extra",
        "description": "The extra element in the corner",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "forceRender",
        "description": "Forced render of content on panel, instead of lazy rending after clicking on header",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "header",
        "description": "Title of the panel",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "key",
        "description": "Unique key identifying the panel from among its siblings",
        "type": "string | number",
        "default": "-",
        "version": ""
      },
      {
        "property": "showArrow",
        "description": "If false, panel will not show arrow icon",
        "type": "boolean",
        "default": "true",
        "version": ""
      }
    ]
  },
  "Comment": [
    {
      "property": "actions",
      "description": "List of action items rendered below the comment content",
      "type": "Array<ReactNode>",
      "default": "-",
      "version": ""
    },
    {
      "property": "author",
      "description": "The element to display as the comment author",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "avatar",
      "description": "The element to display as the comment avatar - generally an antd Avatar or src",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "children",
      "description": "Nested comments should be provided as children of the Comment",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "content",
      "description": "The main content of the comment",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "datetime",
      "description": "A datetime element containing the time to be displayed",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    }
  ],
  "Descriptions": {
    "Descriptions": [
      {
        "property": "bordered",
        "description": "Whether to display the border",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "colon",
        "description": "Change default props colon value of Descriptions.Item",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "column",
        "description": "The number of DescriptionItems in a row,could be a number or a object like { xs: 8, sm: 16, md: 24},(Only set bordered={true} to take effect)",
        "type": "number",
        "default": "3",
        "version": ""
      },
      {
        "property": "contentStyle",
        "description": "Customize label style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.10.0"
      },
      {
        "property": "extra",
        "description": "The action area of the description list, placed at the top-right",
        "type": "ReactNode",
        "default": "-",
        "version": "4.5.0"
      },
      {
        "property": "labelStyle",
        "description": "Customize label style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.10.0"
      },
      {
        "property": "layout",
        "description": "Define description layout",
        "type": "horizontal | vertical",
        "default": "horizontal",
        "version": ""
      },
      {
        "property": "size",
        "description": "Set the size of the list. Can be set to middle,small, or not filled",
        "type": "default | middle | small",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "The title of the description list, placed at the top",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    ],
    "DescriptionItem": [
      {
        "property": "contentStyle",
        "description": "Customize label style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.9.0"
      },
      {
        "property": "label",
        "description": "The description of the content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "labelStyle",
        "description": "Customize label style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.9.0"
      },
      {
        "property": "span",
        "description": "The number of columns included",
        "type": "number",
        "default": "1",
        "version": ""
      }
    ]
  },
  "Empty": [
    {
      "property": "description",
      "description": "Customize description",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "image",
      "description": "Customize image. Will treat as image url when string provided",
      "type": "ReactNode",
      "default": "Empty.PRESENTED_IMAGE_DEFAULT",
      "version": ""
    },
    {
      "property": "imageStyle",
      "description": "The style of image",
      "type": "CSSProperties",
      "default": "-",
      "version": ""
    }
  ],
  "Image": [
    {
      "property": "alt",
      "description": "Image description",
      "type": "string",
      "default": "-",
      "version": "4.6.0"
    },
    {
      "property": "fallback",
      "description": "Load failure fault-tolerant src",
      "type": "string",
      "default": "-",
      "version": "4.6.0"
    },
    {
      "property": "height",
      "description": "Image height",
      "type": "string | number",
      "default": "-",
      "version": "4.6.0"
    },
    {
      "property": "placeholder",
      "description": "Load placeholder, use default placeholder when set true",
      "type": "ReactNode",
      "default": "-",
      "version": "4.6.0"
    },
    {
      "property": "preview",
      "description": "preview config, disabled when false",
      "type": "boolean | previewType",
      "default": "true",
      "version": "4.6.0 previewType:4.7.0"
    },
    {
      "property": "src",
      "description": "Image path",
      "type": "string",
      "default": "-",
      "version": "4.6.0"
    },
    {
      "property": "width",
      "description": "Image width",
      "type": "string | number",
      "default": "-",
      "version": "4.6.0"
    },
    {
      "property": "onError",
      "description": "Load failed callback",
      "type": "(event: Event) => void",
      "default": "-",
      "version": "4.12.0"
    }
  ],
  "List": {
    "List": [
      {
        "property": "bordered",
        "description": "Toggles rendering of the border around the list",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "dataSource",
        "description": "DataSource array for list",
        "type": "any[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "footer",
        "description": "List footer renderer",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "grid",
        "description": "The grid type of list. You can set grid to something like {gutter: 16, column: 4}",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "header",
        "description": "List header renderer",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "itemLayout",
        "description": "The layout of list",
        "type": "horizontal | vertical",
        "default": "horizontal",
        "version": ""
      },
      {
        "property": "loading",
        "description": "Shows a loading indicator while the contents of the list are being fetched",
        "type": "boolean | SpinProps (more)",
        "default": "false",
        "version": ""
      },
      {
        "property": "loadMore",
        "description": "Shows a load more content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "locale",
        "description": "The i18n text including empty text",
        "type": "object",
        "default": "{emptyText: No Data}",
        "version": ""
      },
      {
        "property": "pagination",
        "description": "Pagination config, hide it by setting it to false",
        "type": "boolean | object",
        "default": "false",
        "version": ""
      },
      {
        "property": "renderItem",
        "description": "Customize list item when using dataSource",
        "type": "(item) => ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "rowKey",
        "description": "Item's unique key, could be a string or function that returns a string",
        "type": "string | Function(record): string",
        "default": "key",
        "version": ""
      },
      {
        "property": "size",
        "description": "Size of list",
        "type": "default | large | small",
        "default": "default",
        "version": ""
      },
      {
        "property": "split",
        "description": "Toggles rendering of the split under the list item",
        "type": "boolean",
        "default": "true",
        "version": ""
      }
    ],
    "pagination": [
      {
        "property": "position",
        "description": "The specify the position of Pagination",
        "type": "top | bottom | both",
        "default": "bottom"
      }
    ],
    "List-grid-props": [
      {
        "property": "column",
        "description": "The column of grid",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "gutter",
        "description": "The spacing between grid",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "xs",
        "description": "<576px column of grid",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "sm",
        "description": "≥576px column of grid",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "md",
        "description": "≥768px column of grid",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "lg",
        "description": "≥992px column of grid",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "xl",
        "description": "≥1200px column of grid",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "xxl",
        "description": "≥1600px column of grid",
        "type": "number",
        "default": "-",
        "version": ""
      }
    ],
    "List.Item": [
      {
        "property": "actions",
        "description": "The actions content of list item. If itemLayout is vertical, shows the content on bottom, otherwise shows content on the far right",
        "type": "Array<ReactNode>",
        "default": "-",
        "version": ""
      },
      {
        "property": "extra",
        "description": "The extra content of list item. If itemLayout is vertical, shows the content on right, otherwise shows content on the far right",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    ],
    "List.Item.Meta": [
      {
        "property": "avatar",
        "description": "The avatar of list item",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "description",
        "description": "The description of list item",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "The title of list item",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Popover": [
    {
      "param": "content",
      "description": "Content of the card",
      "type": "ReactNode | () => ReactNode",
      "default value": "-",
      "version": ""
    },
    {
      "param": "title",
      "description": "Title of the card",
      "type": "ReactNode | () => ReactNode",
      "default value": "-",
      "version": ""
    }
  ],
  "Statistic": {
    "Statistic": [
      {
        "property": "decimalSeparator",
        "description": "The decimal separator",
        "type": "string",
        "default": ".",
        "version": ""
      },
      {
        "property": "formatter",
        "description": "Customize value display logic",
        "type": "(value) => ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "groupSeparator",
        "description": "Group separator",
        "type": "string",
        "default": ",",
        "version": ""
      },
      {
        "property": "loading",
        "description": "Loading status of Statistic",
        "type": "boolean",
        "default": "false",
        "version": "4.8.0"
      },
      {
        "property": "precision",
        "description": "The precision of input value",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "prefix",
        "description": "The prefix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "suffix",
        "description": "The suffix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "Display title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "Display value",
        "type": "string | number",
        "default": "-",
        "version": ""
      },
      {
        "property": "valueStyle",
        "description": "Set value css style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    ],
    "Statistic.Countdown": [
      {
        "property": "format",
        "description": "Format as moment",
        "type": "string",
        "default": "HH:mm:ss",
        "version": ""
      },
      {
        "property": "prefix",
        "description": "The prefix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "suffix",
        "description": "The suffix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "Display title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "value",
        "description": "Set target countdown time",
        "type": "number | moment",
        "default": "-",
        "version": ""
      },
      {
        "property": "valueStyle",
        "description": "Set value css style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "onFinish",
        "description": "Trigger when time's up",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Trigger when time's changing",
        "type": "(value: number) => void",
        "default": "-",
        "version": "4.16.0"
      }
    ]
  },
  "Table": {
    "ColumnGroup": [
      {
        "property": "title",
        "description": "Title of the column group",
        "type": "ReactNode",
        "default": "-"
      }
    ],
    "pagination": [
      {
        "property": "position",
        "description": "Specify the position of Pagination, could betopLeft | topCenter | topRight |bottomLeft | bottomCenter | bottomRight",
        "type": "Array",
        "default": "[bottomRight]"
      }
    ],
    "expandable": [
      {
        "property": "childrenColumnName",
        "description": "The column contains children to display",
        "type": "string",
        "default": "children",
        "version": ""
      },
      {
        "property": "columnWidth",
        "description": "Set the width of the expand column",
        "type": "string | number",
        "default": "-",
        "version": ""
      },
      {
        "property": "defaultExpandAllRows",
        "description": "Expand all rows initially",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "defaultExpandedRowKeys",
        "description": "Initial expanded row keys",
        "type": "string[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "expandedRowClassName",
        "description": "Expanded row's className",
        "type": "function(record, index, indent): string",
        "default": "-",
        "version": ""
      },
      {
        "property": "expandedRowKeys",
        "description": "Current expanded row keys",
        "type": "string[]",
        "default": "-",
        "version": ""
      },
      {
        "property": "expandedRowRender",
        "description": "Expanded container render for each row",
        "type": "function(record, index, indent, expanded): ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "expandIcon",
        "description": "Customize row expand Icon. Ref example",
        "type": "function(props): ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "expandIconColumnIndex",
        "description": "Customize expand icon column index. Not render when -1",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "expandRowByClick",
        "description": "Whether to expand row by clicking anywhere in the whole row",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "fixed",
        "description": "Whether the expansion icon is fixed. Optional true left right",
        "type": "boolean | string",
        "default": "false",
        "version": "4.16.0"
      },
      {
        "property": "indentSize",
        "description": "Indent size in pixels of tree data",
        "type": "number",
        "default": "15",
        "version": ""
      },
      {
        "property": "rowExpandable",
        "description": "Enable row can be expandable",
        "type": "(record) => boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "onExpand",
        "description": "Callback executed when the row expand icon is clicked",
        "type": "function(expanded, record)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onExpandedRowsChange",
        "description": "Callback executed when the expanded rows change",
        "type": "function(expandedRows)",
        "default": "-",
        "version": ""
      }
    ],
    "scroll": [
      {
        "property": "scrollToFirstRowOnChange",
        "description": "Whether to scroll to the top of the table when paging, sorting, filtering changes",
        "type": "boolean",
        "default": "-"
      },
      {
        "property": "x",
        "description": "Set horizontal scrolling, can also be used to specify the width of the scroll area, could be number, percent value, true and 'max-content'",
        "type": "string | number | true",
        "default": "-"
      },
      {
        "property": "y",
        "description": "Set vertical scrolling, can also be used to specify the height of the scroll area, could be string or number",
        "type": "string | number",
        "default": "-"
      }
    ],
    "selection": [
      {
        "property": "key",
        "description": "Unique key of this selection",
        "type": "string",
        "default": "-"
      },
      {
        "property": "text",
        "description": "Display text of this selection",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "onSelect",
        "description": "Callback executed when this selection is clicked",
        "type": "function(changeableRowKeys)",
        "default": "-"
      }
    ]
  },
  "Tabs": {
    "Tabs": [
      {
        "property": "activeKey",
        "description": "Current TabPane's key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "addIcon",
        "description": "Customize add icon",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "animated",
        "description": "Whether to change tabs with animation. Only works while tabPosition=\"top\"",
        "type": "boolean | { inkBar: boolean, tabPane: boolean }",
        "default": "{ inkBar: true, tabPane: false }",
        "version": ""
      },
      {
        "property": "centered",
        "description": "Centers tabs",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      {
        "property": "defaultActiveKey",
        "description": "Initial active TabPane's key, if activeKey is not set",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "hideAdd",
        "description": "Hide plus icon or not. Only works while type=\"editable-card\"",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "moreIcon",
        "description": "The custom icon of ellipsis",
        "type": "ReactNode",
        "default": "<EllipsisOutlined />",
        "version": "4.14.0"
      },
      {
        "property": "renderTabBar",
        "description": "Replace the TabBar",
        "type": "(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement",
        "default": "-",
        "version": ""
      },
      {
        "property": "size",
        "description": "Preset tab bar size",
        "type": "large | default | small",
        "default": "default",
        "version": ""
      },
      {
        "property": "tabBarExtraContent",
        "description": "Extra content in tab bar",
        "type": "ReactNode | {left?: ReactNode, right?: ReactNode}",
        "default": "-",
        "version": "object: 4.6.0"
      },
      {
        "property": "tabBarGutter",
        "description": "The gap between tabs",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "tabBarStyle",
        "description": "Tab bar style object",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "tabPosition",
        "description": "Position of tabs",
        "type": "top | right | bottom | left",
        "default": "top",
        "version": ""
      },
      {
        "property": "type",
        "description": "Basic style of tabs",
        "type": "line | card | editable-card",
        "default": "line",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Callback executed when active tab is changed",
        "type": "function(activeKey) {}",
        "default": "-",
        "version": ""
      },
      {
        "property": "onEdit",
        "description": "Callback executed when tab is added or removed. Only works while type=\"editable-card\"",
        "type": "(targetKey, action) => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "onTabClick",
        "description": "Callback executed when tab is clicked",
        "type": "function(key: string, event: MouseEvent)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onTabScroll",
        "description": "Trigger when tab scroll",
        "type": "function({ direction: left | right | top | bottom })",
        "default": "-",
        "version": "4.3.0"
      }
    ],
    "Tabs.TabPane": [
      {
        "property": "closeIcon",
        "description": "Customize close icon in TabPane's head. Only works while type=\"editable-card\"",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "forceRender",
        "description": "Forced render of content in tabs, not lazy render after clicking on tabs",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "key",
        "description": "TabPane's key",
        "type": "string",
        "default": "-"
      },
      {
        "property": "tab",
        "description": "Show text in TabPane's head",
        "type": "ReactNode",
        "default": "-"
      }
    ]
  },
  "Tag": {
    "Tag": [
      {
        "property": "closable",
        "description": "Whether the Tag can be closed",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      {
        "property": "color",
        "description": "Color of the Tag",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "icon",
        "description": "Set the icon of tag",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "visible",
        "description": "Whether the Tag is closed or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "onClose",
        "description": "Callback executed when tag is closed",
        "type": "(e) => void",
        "default": "-",
        "version": ""
      }
    ],
    "Tag.CheckableTag": [
      {
        "property": "checked",
        "description": "Checked status of Tag",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "onChange",
        "description": "Callback executed when Tag is checked/unchecked",
        "type": "(checked) => void",
        "default": "-"
      }
    ]
  },
  "Timeline": {
    "Timeline": [
      {
        "property": "mode",
        "description": "By sending alternate the timeline will distribute the nodes to the left and right",
        "type": "left | alternate | right",
        "default": "-"
      },
      {
        "property": "pending",
        "description": "Set the last ghost node's existence or its content",
        "type": "boolean | ReactNode",
        "default": "false"
      },
      {
        "property": "pendingDot",
        "description": "Set the dot of the last ghost node when pending is true",
        "type": "ReactNode",
        "default": "<LoadingOutlined />"
      },
      {
        "property": "reverse",
        "description": "Whether reverse nodes or not",
        "type": "boolean",
        "default": "false"
      }
    ],
    "Timeline.Item": [
      {
        "property": "color",
        "description": "Set the circle's color to blue, red, green, gray or other custom colors",
        "type": "string",
        "default": "blue"
      },
      {
        "property": "dot",
        "description": "Customize timeline dot",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "label",
        "description": "Set the label",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "position",
        "description": "Customize node position",
        "type": "left | right",
        "default": "-"
      }
    ]
  },
  "Tooltip": {
    "API": [
      {
        "property": "title",
        "description": "The text shown in the tooltip",
        "type": "ReactNode | () => ReactNode",
        "default": "-"
      }
    ],
    "Common-API": [
      {
        "property": "align",
        "description": "This value will be merged into placement's config, please refer to the settings rc-tooltip",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "arrowPointAtCenter",
        "description": "Whether the arrow is pointed at the center of target",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "autoAdjustOverflow",
        "description": "Whether to adjust popup placement automatically when popup is off screen",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "color",
        "description": "The background color",
        "type": "string",
        "default": "-",
        "version": "4.3.0"
      },
      {
        "property": "defaultVisible",
        "description": "Whether the floating tooltip card is visible by default",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "destroyTooltipOnHide",
        "description": "Whether destroy tooltip when hidden, parent container of tooltip will be destroyed when keepParent is false",
        "type": "boolean | { keepParent?: boolean }",
        "default": "false",
        "version": ""
      },
      {
        "property": "getPopupContainer",
        "description": "The DOM container of the tip, the default behavior is to create a div element in body",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      {
        "property": "mouseEnterDelay",
        "description": "Delay in seconds, before tooltip is shown on mouse enter",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      {
        "property": "mouseLeaveDelay",
        "description": "Delay in seconds, before tooltip is hidden on mouse leave",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      {
        "property": "overlayClassName",
        "description": "Class name of the tooltip card",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "overlayStyle",
        "description": "Style of the tooltip card",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "overlayInnerStyle",
        "description": "Style of the tooltip inner content",
        "type": "object",
        "default": "-",
        "version": ""
      },
      {
        "property": "placement",
        "description": "The position of the tooltip relative to the target, which can be one of top left right bottom topLeft topRight bottomLeft bottomRight leftTop leftBottom rightTop rightBottom",
        "type": "string",
        "default": "top",
        "version": ""
      },
      {
        "property": "trigger",
        "description": "Tooltip trigger mode. Could be multiple by passing an array",
        "type": "hover | focus | click | contextMenu | Array<string>",
        "default": "hover",
        "version": ""
      },
      {
        "property": "visible",
        "description": "Whether the floating tooltip card is visible or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "zIndex",
        "description": "Config z-index of Tooltip",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "onVisibleChange",
        "description": "Callback executed when visibility of the tooltip card is changed",
        "type": "(visible) => void",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Tree": {
    "TreeNode-props": [
      {
        "property": "checkable",
        "description": "When Tree is checkable, set TreeNode display Checkbox or not",
        "type": "boolean",
        "default": "-",
        "": ""
      },
      {
        "property": "disableCheckbox",
        "description": "Disables the checkbox of the treeNode",
        "type": "boolean",
        "default": "false",
        "": ""
      },
      {
        "property": "disabled",
        "description": "Disables the treeNode",
        "type": "boolean",
        "default": "false",
        "": ""
      },
      {
        "property": "icon",
        "description": "Customize icon. When you pass component, whose render will receive full TreeNode props as component props",
        "type": "ReactNode | (props) => ReactNode",
        "default": "-",
        "": ""
      },
      {
        "property": "isLeaf",
        "description": "Determines if this is a leaf node(effective when loadData is specified). false will force trade TreeNode as a parent node",
        "type": "boolean",
        "default": "-",
        "": ""
      },
      {
        "property": "key",
        "description": "Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree",
        "type": "string",
        "default": "(internal calculated position of treeNode)",
        "": ""
      },
      {
        "property": "selectable",
        "description": "Set whether the treeNode can be selected",
        "type": "boolean",
        "default": "true",
        "": ""
      },
      {
        "property": "title",
        "description": "Title",
        "type": "ReactNode",
        "default": "---",
        "": ""
      }
    ],
    "DirectoryTree-props": [
      {
        "property": "expandAction",
        "description": "Directory open logic, optional: false | click | doubleClick",
        "type": "string | boolean",
        "default": "click"
      }
    ]
  },
  "Alert": {
    "API": [
      {
        "property": "action",
        "description": "The action of Alert",
        "type": "ReactNode",
        "default": "-",
        "version": "4.9.0"
      },
      {
        "property": "afterClose",
        "description": "Called when close animation is finished",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      {
        "property": "banner",
        "description": "Whether to show as banner",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "closable",
        "description": "Whether Alert can be closed",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      {
        "property": "closeText",
        "description": "Close text to show",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "description",
        "description": "Additional content of Alert",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "icon",
        "description": "Custom icon, effective when showIcon is true",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "message",
        "description": "Content of Alert",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "showIcon",
        "description": "Whether to show icon",
        "type": "boolean",
        "default": "false, in banner mode default is true",
        "version": ""
      },
      {
        "property": "type",
        "description": "Type of Alert styles, options: success, info, warning, error",
        "type": "string",
        "default": "info, in banner mode default is warning",
        "version": ""
      },
      {
        "property": "onClose",
        "description": "Callback when Alert is closed",
        "type": "(e: MouseEvent) => void",
        "default": "-",
        "version": ""
      }
    ],
    "Alert.ErrorBoundary": [
      {
        "property": "description",
        "description": "Custom error description to show",
        "type": "ReactNode",
        "default": "{{ error stack }}",
        "version": ""
      },
      {
        "property": "message",
        "description": "Custom error message to show",
        "type": "ReactNode",
        "default": "{{ error }}",
        "version": ""
      }
    ]
  },
  "Drawer": [
    {
      "props": "afterVisibleChange",
      "description": "Callback after the animation ends when switching drawers",
      "type": "function(visible)",
      "default": "-",
      "version": ""
    },
    {
      "props": "bodyStyle",
      "description": "Style of the drawer content part",
      "type": "object",
      "default": "-",
      "version": ""
    },
    {
      "props": "className",
      "description": "The class name of the container of the Drawer dialog",
      "type": "string",
      "default": "-",
      "version": ""
    },
    {
      "props": "closable",
      "description": "Whether a close (x) button is visible on top right of the Drawer dialog or not",
      "type": "boolean",
      "default": "true",
      "version": ""
    },
    {
      "props": "closeIcon",
      "description": "Custom close icon",
      "type": "ReactNode",
      "default": "<CloseOutlined />",
      "version": ""
    },
    {
      "props": "contentWrapperStyle",
      "description": "Style of the drawer wrapper of content part",
      "type": "CSSProperties",
      "default": "-",
      "version": ""
    },
    {
      "props": "destroyOnClose",
      "description": "Whether to unmount child components on closing drawer or not",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "props": "drawerStyle",
      "description": "Style of the popup layer element",
      "type": "object",
      "default": "-",
      "version": ""
    },
    {
      "props": "footer",
      "description": "The footer for Drawer",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "props": "footerStyle",
      "description": "Style of the drawer footer part",
      "type": "CSSProperties",
      "default": "-",
      "version": ""
    },
    {
      "props": "forceRender",
      "description": "Prerender Drawer component forcely",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "props": "getContainer",
      "description": "Return the mounted node for Drawer",
      "type": "HTMLElement | () => HTMLElement | Selectors | false",
      "default": "body",
      "version": ""
    },
    {
      "props": "headerStyle",
      "description": "Style of the drawer header part",
      "type": "object",
      "default": "-",
      "version": ""
    },
    {
      "props": "height",
      "description": "Placement is top or bottom, height of the Drawer dialog",
      "type": "string | number",
      "default": "256",
      "version": ""
    },
    {
      "props": "keyboard",
      "description": "Whether support press esc to close",
      "type": "boolean",
      "default": "true",
      "version": ""
    },
    {
      "props": "mask",
      "description": "Whether to show mask or not",
      "type": "boolean",
      "default": "true",
      "version": ""
    },
    {
      "props": "maskClosable",
      "description": "Clicking on the mask (area outside the Drawer) to close the Drawer or not",
      "type": "boolean",
      "default": "true",
      "version": ""
    },
    {
      "props": "maskStyle",
      "description": "Style for Drawer's mask element",
      "type": "CSSProperties",
      "default": "{}",
      "version": ""
    },
    {
      "props": "placement",
      "description": "The placement of the Drawer",
      "type": "top | right | bottom | left",
      "default": "right",
      "version": ""
    },
    {
      "props": "push",
      "description": "Nested drawers push behavior",
      "type": "boolean | { distance: string | number }",
      "default": "{ distance: 180 }",
      "version": "4.5.0+"
    },
    {
      "props": "style",
      "description": "Style of wrapper element which contains mask compare to drawerStyle",
      "type": "CSSProperties",
      "default": "-",
      "version": ""
    },
    {
      "props": "title",
      "description": "The title for Drawer",
      "type": "ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "props": "visible",
      "description": "Whether the Drawer dialog is visible or not",
      "type": "boolean",
      "default": "false",
      "version": ""
    },
    {
      "props": "width",
      "description": "Width of the Drawer dialog",
      "type": "string | number",
      "default": "256",
      "version": ""
    },
    {
      "props": "zIndex",
      "description": "The z-index of the Drawer",
      "type": "number",
      "default": "1000",
      "version": ""
    },
    {
      "props": "onClose",
      "description": "Specify a callback that will be called when a user clicks mask, close button or Cancel button",
      "type": "function(e)",
      "default": "-",
      "version": ""
    }
  ],
  "Message": {
    "": [
      {
        "argument": "duration",
        "description": "Time before auto-dismiss, in seconds",
        "type": "number",
        "default": "3",
        "version": ""
      },
      {
        "argument": "getContainer",
        "description": "Return the mount node for Message",
        "type": "() => HTMLElement",
        "default": "() => document.body",
        "version": ""
      },
      {
        "argument": "maxCount",
        "description": "Max message show, drop oldest if exceed limit",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "argument": "prefixCls",
        "description": "The prefix className of message node",
        "type": "string",
        "default": "ant-message",
        "version": "4.5.0"
      },
      {
        "argument": "rtl",
        "description": "Whether to enable RTL mode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "argument": "top",
        "description": "Distance from top",
        "type": "number",
        "default": "8",
        "version": ""
      }
    ]
  },
  "Modal": {
    "API": [
      {
        "property": "afterClose",
        "description": "Specify a function that will be called when modal is closed completely",
        "type": "function",
        "default": "-",
        "version": ""
      },
      {
        "property": "bodyStyle",
        "description": "Body style for modal body element. Such as height, padding etc",
        "type": "CSSProperties",
        "default": "",
        "version": ""
      },
      {
        "property": "cancelButtonProps",
        "description": "The cancel button props",
        "type": "ButtonProps",
        "default": "-",
        "version": ""
      },
      {
        "property": "cancelText",
        "description": "Text of the Cancel button",
        "type": "ReactNode",
        "default": "Cancel",
        "version": ""
      },
      {
        "property": "centered",
        "description": "Centered Modal",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "closable",
        "description": "Whether a close (x) button is visible on top right of the modal dialog or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "<CloseOutlined />",
        "version": ""
      },
      {
        "property": "confirmLoading",
        "description": "Whether to apply loading visual effect for OK button or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "destroyOnClose",
        "description": "Whether to unmount child components on onClose",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "focusTriggerAfterClose",
        "description": "Whether need to focus trigger element after dialog is closed",
        "type": "boolean",
        "default": "true",
        "version": "4.9.0"
      },
      {
        "property": "footer",
        "description": "Footer content, set as footer={null} when you don't need default buttons",
        "type": "ReactNode",
        "default": "(OK and Cancel buttons)",
        "version": ""
      },
      {
        "property": "forceRender",
        "description": "Force render Modal",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "getContainer",
        "description": "Return the mount node for Modal",
        "type": "HTMLElement | () => HTMLElement | Selectors | false",
        "default": "document.body",
        "version": ""
      },
      {
        "property": "keyboard",
        "description": "Whether support press esc to close",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "mask",
        "description": "Whether show mask or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "maskClosable",
        "description": "Whether to close the modal dialog when the mask (area outside the modal) is clicked",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "maskStyle",
        "description": "Style for modal's mask element",
        "type": "CSSProperties",
        "default": "",
        "version": ""
      },
      {
        "property": "modalRender",
        "description": "Custom modal content render",
        "type": "(node: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.7.0"
      },
      {
        "property": "okButtonProps",
        "description": "The ok button props",
        "type": "ButtonProps",
        "default": "-",
        "version": ""
      },
      {
        "property": "okText",
        "description": "Text of the OK button",
        "type": "ReactNode",
        "default": "OK",
        "version": ""
      },
      {
        "property": "okType",
        "description": "Button type of the OK button",
        "type": "string",
        "default": "primary",
        "version": ""
      },
      {
        "property": "style",
        "description": "Style of floating layer, typically used at least for adjusting the position",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "The modal dialog's title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "visible",
        "description": "Whether the modal dialog is visible or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "width",
        "description": "Width of the modal dialog",
        "type": "string | number",
        "default": "520",
        "version": ""
      },
      {
        "property": "wrapClassName",
        "description": "The class name of the container of the modal dialog",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "zIndex",
        "description": "The z-index of the Modal",
        "type": "number",
        "default": "1000",
        "version": ""
      },
      {
        "property": "onCancel",
        "description": "Specify a function that will be called when a user clicks mask, close button on top right or Cancel button",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onOk",
        "description": "Specify a function that will be called when a user clicks the OK button",
        "type": "function(e)",
        "default": "-",
        "version": ""
      }
    ],
    "": [
      {
        "property": "afterClose",
        "description": "Specify a function that will be called when modal is closed completely",
        "type": "function",
        "default": "-",
        "version": "4.9.0"
      },
      {
        "property": "autoFocusButton",
        "description": "Specify which button to autofocus",
        "type": "null | ok | cancel",
        "default": "ok",
        "version": ""
      },
      {
        "property": "bodyStyle",
        "description": "Body style for modal body element. Such as height, padding etc",
        "type": "CSSProperties",
        "default": "",
        "version": "4.8.0"
      },
      {
        "property": "cancelButtonProps",
        "description": "The cancel button props",
        "type": "ButtonProps",
        "default": "-",
        "version": ""
      },
      {
        "property": "cancelText",
        "description": "Text of the Cancel button with Modal.confirm",
        "type": "string",
        "default": "Cancel",
        "version": ""
      },
      {
        "property": "centered",
        "description": "Centered Modal",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "className",
        "description": "The className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      {
        "property": "closable",
        "description": "Whether a close (x) button is visible on top right of the confirm dialog or not",
        "type": "boolean",
        "default": "false",
        "version": "4.9.0"
      },
      {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "undefined",
        "version": "4.9.0"
      },
      {
        "property": "content",
        "description": "Content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "getContainer",
        "description": "Return the mount node for Modal",
        "type": "HTMLElement | () => HTMLElement | Selectors | false",
        "default": "document.body",
        "version": ""
      },
      {
        "property": "icon",
        "description": "Custom icon",
        "type": "ReactNode",
        "default": "<QuestionCircle />",
        "version": "3.12.0"
      },
      {
        "property": "keyboard",
        "description": "Whether support press esc to close",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "mask",
        "description": "Whether show mask or not.",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "maskClosable",
        "description": "Whether to close the modal dialog when the mask (area outside the modal) is clicked",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "maskStyle",
        "description": "Style for modal's mask element",
        "type": "object",
        "default": "{}",
        "version": ""
      },
      {
        "property": "okButtonProps",
        "description": "The ok button props",
        "type": "ButtonProps",
        "default": "-",
        "version": ""
      },
      {
        "property": "okText",
        "description": "Text of the OK button",
        "type": "string",
        "default": "OK",
        "version": ""
      },
      {
        "property": "okType",
        "description": "Button type of the OK button",
        "type": "string",
        "default": "primary",
        "version": ""
      },
      {
        "property": "style",
        "description": "Style of floating layer, typically used at least for adjusting the position",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      {
        "property": "title",
        "description": "Title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      {
        "property": "width",
        "description": "Width of the modal dialog",
        "type": "string | number",
        "default": "416",
        "version": ""
      },
      {
        "property": "zIndex",
        "description": "The z-index of the Modal",
        "type": "number",
        "default": "1000",
        "version": ""
      },
      {
        "property": "onCancel",
        "description": "Specify a function that will be called when the user clicks the Cancel button. The parameter of this function is a function whose execution should include closing the dialog. If the function does not take any parameter (!onCancel.length) then modal dialog will be closed unless returned value is true (!!onCancel()). You can also just return a promise and when the promise is resolved, the modal dialog will also be closed",
        "type": "function(close)",
        "default": "-",
        "version": ""
      },
      {
        "property": "onOk",
        "description": "Specify a function that will be called when the user clicks the OK button. The parameter of this function is a function whose execution should include closing the dialog. If the function does not take any parameter (!onOk.length) then modal dialog will be closed unless returned value is true (!!onOk()). You can also just return a promise and when the promise is resolved, the modal dialog will also be closed",
        "type": "function(close)",
        "default": "-",
        "version": ""
      }
    ]
  },
  "Notification": {
    "": [
      {
        "property": "bottom",
        "description": "Distance from the bottom of the viewport, when placement is bottomRight or bottomLeft (unit: pixels)",
        "type": "number",
        "default": "24"
      },
      {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "-"
      },
      {
        "property": "duration",
        "description": "Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically",
        "type": "number",
        "default": "4.5"
      },
      {
        "property": "getContainer",
        "description": "Return the mount node for Notification",
        "type": "() => HTMLNode",
        "default": "() => document.body"
      },
      {
        "property": "placement",
        "description": "Position of Notification, can be one of topLeft topRight bottomLeft bottomRight",
        "type": "string",
        "default": "topRight"
      },
      {
        "property": "rtl",
        "description": "Whether to enable RTL mode",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "top",
        "description": "Distance from the top of the viewport, when placement is topRight or topLeft (unit: pixels)",
        "type": "number",
        "default": "24"
      }
    ]
  },
  "Popconfirm": [
    {
      "param": "cancelButtonProps",
      "description": "The cancel button props",
      "type": "ButtonProps",
      "default value": "-"
    },
    {
      "param": "cancelText",
      "description": "The text of the Cancel button",
      "type": "string",
      "default value": "Cancel"
    },
    {
      "param": "disabled",
      "description": "Whether show popconfirm when click its childrenNode",
      "type": "boolean",
      "default value": "false"
    },
    {
      "param": "icon",
      "description": "Customize icon of confirmation",
      "type": "ReactNode",
      "default value": "<ExclamationCircle />"
    },
    {
      "param": "okButtonProps",
      "description": "The ok button props",
      "type": "ButtonProps",
      "default value": "-"
    },
    {
      "param": "okText",
      "description": "The text of the Confirm button",
      "type": "string",
      "default value": "OK"
    },
    {
      "param": "okType",
      "description": "Button type of the Confirm button",
      "type": "string",
      "default value": "primary"
    },
    {
      "param": "title",
      "description": "The title of the confirmation box",
      "type": "ReactNode | () => ReactNode",
      "default value": "-"
    },
    {
      "param": "onCancel",
      "description": "A callback of cancel",
      "type": "function(e)",
      "default value": "-"
    },
    {
      "param": "onConfirm",
      "description": "A callback of confirmation",
      "type": "function(e)",
      "default value": "-"
    }
  ],
  "Progress": {
    "API": [
      {
        "property": "format",
        "description": "The template function of the content",
        "type": "function(percent, successPercent)",
        "default": "(percent) => percent + %"
      },
      {
        "property": "percent",
        "description": "To set the completion percentage",
        "type": "number",
        "default": "0"
      },
      {
        "property": "showInfo",
        "description": "Whether to display the progress value and the status icon",
        "type": "boolean",
        "default": "true"
      },
      {
        "property": "status",
        "description": "To set the status of the Progress, options: success exception normal active(line only)",
        "type": "string",
        "default": "-"
      },
      {
        "property": "strokeColor",
        "description": "The color of progress bar",
        "type": "string",
        "default": "-"
      },
      {
        "property": "strokeLinecap",
        "description": "To set the style of the progress linecap",
        "type": "round | square",
        "default": "round"
      },
      {
        "property": "success",
        "description": "Configs of successfully progress bar",
        "type": "{ percent: number, strokeColor: string }",
        "default": "-"
      },
      {
        "property": "trailColor",
        "description": "The color of unfilled part",
        "type": "string",
        "default": "-"
      },
      {
        "property": "type",
        "description": "To set the type, options: line circle dashboard",
        "type": "string",
        "default": "line"
      }
    ],
    "type=\"circle\"": [
      {
        "property": "strokeColor",
        "description": "The color of circular progress, render linear-gradient when passing an object",
        "type": "string | object",
        "default": "-"
      },
      {
        "property": "strokeWidth",
        "description": "To set the width of the circular progress, unit: percentage of the canvas width",
        "type": "number",
        "default": "6"
      },
      {
        "property": "width",
        "description": "To set the canvas width of the circular progress, unit: px",
        "type": "number",
        "default": "132"
      }
    ],
    "type=\"dashboard\"": [
      {
        "property": "gapDegree",
        "description": "The gap degree of half circle, 0 ~ 295",
        "type": "number",
        "default": "75"
      },
      {
        "property": "gapPosition",
        "description": "The gap position, options: top bottom left right",
        "type": "string",
        "default": "bottom"
      },
      {
        "property": "strokeWidth",
        "description": "To set the width of the dashboard progress, unit: percentage of the canvas width",
        "type": "number",
        "default": "6"
      },
      {
        "property": "width",
        "description": "To set the canvas width of the dashboard progress, unit: px",
        "type": "number",
        "default": "132"
      }
    ]
  },
  "Result": [
    {
      "property": "extra",
      "description": "Operating area",
      "type": "ReactNode",
      "default": "-"
    },
    {
      "property": "icon",
      "description": "Custom back icon",
      "type": "ReactNode",
      "default": "-"
    },
    {
      "property": "status",
      "description": "Result status, decide icons and colors",
      "type": "success | error | info | warning | 404 | 403 | 500",
      "default": "info"
    },
    {
      "property": "subTitle",
      "description": "The subTitle",
      "type": "ReactNode",
      "default": "-"
    },
    {
      "property": "title",
      "description": "The title",
      "type": "ReactNode",
      "default": "-"
    }
  ],
  "Skeleton": {
    "Skeleton": [
      {
        "property": "active",
        "description": "Show animation effect",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "avatar",
        "description": "Show avatar placeholder",
        "type": "boolean | SkeletonAvatarProps",
        "default": "false"
      },
      {
        "property": "loading",
        "description": "Display the skeleton when true",
        "type": "boolean",
        "default": "-"
      },
      {
        "property": "paragraph",
        "description": "Show paragraph placeholder",
        "type": "boolean | SkeletonParagraphProps",
        "default": "true"
      },
      {
        "property": "round",
        "description": "Show paragraph and title radius when true",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "title",
        "description": "Show title placeholder",
        "type": "boolean | SkeletonTitleProps",
        "default": "true"
      }
    ],
    "SkeletonAvatarProps": [
      {
        "property": "active",
        "description": "Show animation effect, only valid when used avatar independently",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "shape",
        "description": "Set the shape of avatar",
        "type": "circle | square",
        "default": "-"
      },
      {
        "property": "size",
        "description": "Set the size of avatar",
        "type": "number | large | small | default",
        "default": "-"
      }
    ],
    "SkeletonTitleProps": [
      {
        "property": "width",
        "description": "Set the width of title",
        "type": "number | string",
        "default": "-"
      }
    ],
    "SkeletonParagraphProps": [
      {
        "property": "rows",
        "description": "Set the row count of paragraph",
        "type": "number",
        "default": "-"
      },
      {
        "property": "width",
        "description": "Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width",
        "type": "number | string | Array<number | string>",
        "default": "-"
      }
    ],
    "SkeletonButtonProps": [
      {
        "property": "active",
        "description": "Show animation effect",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "shape",
        "description": "Set the shape of button",
        "type": "circle | round | default",
        "default": "-"
      },
      {
        "property": "size",
        "description": "Set the size of button",
        "type": "large | small | default",
        "default": "-"
      }
    ],
    "SkeletonInputProps": [
      {
        "property": "active",
        "description": "Show animation effect",
        "type": "boolean",
        "default": "false"
      },
      {
        "property": "size",
        "description": "Set the size of input",
        "type": "large | small | default",
        "default": "-"
      }
    ]
  },
  "Spin": [
    {
      "property": "delay",
      "description": "Specifies a delay in milliseconds for loading state (prevent flush)",
      "type": "number (milliseconds)",
      "default": "-"
    },
    {
      "property": "indicator",
      "description": "React node of the spinning indicator",
      "type": "ReactNode",
      "default": "-"
    },
    {
      "property": "size",
      "description": "The size of Spin, options: small, default and large",
      "type": "string",
      "default": "default"
    },
    {
      "property": "spinning",
      "description": "Whether Spin is spinning",
      "type": "boolean",
      "default": "true"
    },
    {
      "property": "tip",
      "description": "Customize description content when Spin has children",
      "type": "string",
      "default": "-"
    },
    {
      "property": "wrapperClassName",
      "description": "The className of wrapper when Spin has children",
      "type": "string",
      "default": "-"
    }
  ],
  "Anchor": {
    "Anchor-Props": [
      {
        "property": "affix",
        "description": "Fixed mode of Anchor",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      {
        "property": "bounds",
        "description": "Bounding distance of anchor area",
        "type": "number",
        "default": "5",
        "version": ""
      },
      {
        "property": "getContainer",
        "description": "Scrolling container",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      {
        "property": "getCurrentAnchor",
        "description": "Customize the anchor highlight",
        "type": "() => string",
        "default": "-",
        "version": ""
      },
      {
        "property": "offsetTop",
        "description": "Pixels to offset from top when calculating position of scroll",
        "type": "number",
        "default": "0",
        "version": ""
      },
      {
        "property": "showInkInFixed",
        "description": "Whether show ink-balls when affix={false}",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      {
        "property": "targetOffset",
        "description": "Anchor scroll offset, default as offsetTop, example",
        "type": "number",
        "default": "-",
        "version": ""
      },
      {
        "property": "onChange",
        "description": "Listening for anchor link change",
        "type": "(currentActiveLink: string) => void",
        "default": "",
        "version": ""
      },
      {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "function(e: Event, link: Object)",
        "default": "-",
        "version": ""
      }
    ],
    "Link-Props": [
      {
        "property": "href",
        "description": "The target of hyperlink",
        "type": "string",
        "default": "",
        "version": ""
      },
      {
        "property": "target",
        "description": "Specifies where to display the linked URL",
        "type": "string",
        "default": "",
        "version": ""
      },
      {
        "property": "title",
        "description": "The content of hyperlink",
        "type": "ReactNode",
        "default": "",
        "version": ""
      }
    ]
  },
  "BackTop": [
    {
      "property": "duration",
      "description": "Time to return to top（ms）",
      "type": "number",
      "default": "450",
      "version": "4.4.0"
    },
    {
      "property": "target",
      "description": "Specifies the scrollable area dom node",
      "type": "() => HTMLElement",
      "default": "() => window",
      "version": ""
    },
    {
      "property": "visibilityHeight",
      "description": "The BackTop button will not show until the scroll height reaches this value",
      "type": "number",
      "default": "400",
      "version": ""
    },
    {
      "property": "onClick",
      "description": "A callback function, which can be executed when you click the button",
      "type": "function",
      "default": "-",
      "version": ""
    }
  ],
  "ConfigProvider": [
    {
      "property": "autoInsertSpaceInButton",
      "description": "Set false to remove space between 2 chinese characters on Button",
      "type": "boolean",
      "default": "true",
      "version": ""
    },
    {
      "property": "componentSize",
      "description": "Config antd component size",
      "type": "small | middle | large",
      "default": "-",
      "version": ""
    },
    {
      "property": "csp",
      "description": "Set Content Security Policy config",
      "type": "{ nonce: string }",
      "default": "-",
      "version": ""
    },
    {
      "property": "direction",
      "description": "Set direction of layout. See demo",
      "type": "ltr | rtl",
      "default": "ltr",
      "version": ""
    },
    {
      "property": "dropdownMatchSelectWidth",
      "description": "Determine whether the dropdown menu and the select input are the same width. Default set min-width same as input. Will ignore when value less than select width. false will disable virtual scroll",
      "type": "boolean | number",
      "default": "-",
      "version": "4.3.0"
    },
    {
      "property": "form",
      "description": "Set Form common props",
      "type": "{ validateMessages?: ValidateMessages, requiredMark?: boolean | optional }",
      "default": "-",
      "version": "requiredMark: 4.8.0"
    },
    {
      "property": "getPopupContainer",
      "description": "To set the container of the popup element. The default is to create a div element in body",
      "type": "function(triggerNode)",
      "default": "() => document.body",
      "version": ""
    },
    {
      "property": "getTargetContainer",
      "description": "Config Affix, Anchor scroll target container",
      "type": "() => HTMLElement",
      "default": "() => window",
      "version": "4.2.0"
    },
    {
      "property": "iconPrefixCls",
      "description": "Set icon prefix className (cooperated with @iconfont-css-prefix)",
      "type": "string",
      "default": "anticon",
      "version": "4.11.0"
    },
    {
      "property": "input",
      "description": "Set Input common props",
      "type": "{ autoComplete?: string }",
      "default": "-",
      "version": "4.2.0"
    },
    {
      "property": "locale",
      "description": "Language package setting, you can find the packages in antd/lib/locale",
      "type": "object",
      "default": "-",
      "version": ""
    },
    {
      "property": "pageHeader",
      "description": "Unify the ghost of PageHeader, ref PageHeader",
      "type": "{ ghost: boolean }",
      "default": "true",
      "version": ""
    },
    {
      "property": "prefixCls",
      "description": "Set prefix className (cooperated with @ant-prefix)",
      "type": "string",
      "default": "ant",
      "version": ""
    },
    {
      "property": "renderEmpty",
      "description": "Set empty content of components. Ref Empty",
      "type": "function(componentName: string): ReactNode",
      "default": "-",
      "version": ""
    },
    {
      "property": "space",
      "description": "Set Space size, ref Space",
      "type": "{ size: small | middle | large | number }",
      "default": "-",
      "version": "4.1.0"
    },
    {
      "property": "virtual",
      "description": "Disable virtual scroll when set to false",
      "type": "boolean",
      "default": "-",
      "version": "4.3.0"
    }
  ]
}