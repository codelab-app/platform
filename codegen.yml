overwrite: true
hooks:
  afterAllFileWrite:
    - yarn prettier --write
    #  - yarn eslint --ext ts --fix

schema: schema.api.graphql
config:
  scalars:
    uuid: string
    json: Record<string, any>
    jsonb: Record<string, any>
    DateTime: string
    Int64: number
    _Any: any
    Void: void

generates:
  # Generate Typescript types to be imported by other generators
  libs/shared/abstract/codegen/src/types.api.graphql.gen.ts:
    documents:
      - '{apps,libs}/**/*.{web,api,fragment}.graphql'
    plugins:
      - typescript
    config:
      namingConvention:
        enumValues: keep

  ./:
    documents:
      - '{apps,libs}/**/*.{web,fragment}.graphql'
    preset: near-operation-file
    presetConfig:
      extension: .graphql.gen.ts
      baseTypesPath: ~@codelab/shared/abstract/codegen
    plugins:
      - typescript-operations
      - typescript-react-apollo
    config:
      inlineFragmentTypes: combine
      documentVariableSuffix: Gql
      gqlImport: '@apollo/client#gql'
      skipTypename: true
      strictScalars: true
      defaultScalarType: unknown
      withRefetchFn: true

  # We allow backend to import fragments from frontend
  ./libs/backend/:
    documents:
      - '**/*.{api,fragment}.graphql'
    preset: near-operation-file
    presetConfig:
      extension: .graphql.gen.ts
      baseTypesPath: ~@codelab/shared/abstract/codegen
    plugins:
      - typescript-operations
      - typescript-react-apollo
    #      - typescript-document-nodes
    # Switch off if have deeply nested issues
    config:
      # namingConvention:
      #   enumValues: keep
      inlineFragmentTypes: combine
      documentVariableSuffix: Gql
      gqlImport: '@apollo/client#gql'
      skipTypename: true
      strictScalars: true
      defaultScalarType: unknown
      withRefetchFn: true

  ./libs/frontend/:
    documents:
      - '**/*.{endpoints,fragment}.graphql'
    preset: near-operation-file
    presetConfig:
      extension: .graphql.gen.ts
      baseTypesPath: ~@codelab/shared/abstract/codegen
    plugins:
      - typescript-operations
      # rqk-query generates string gql only, which prevents fragments from getting resolved
      # this custom packages wraps the generated query with gql
      # gql`
      #  mutation query {
      #    ...App
      #   }
      #`
      - dist/libs/tools/rtk-query:
          importBaseApiFrom: '@codelab/frontend/model/infra/api'
          exportHooks: true
    config:
      inlineFragmentTypes: combine
      documentVariableSuffix: Gql
      gqlImport: '@apollo/client#gql'
      skipTypename: true
      strictScalars: true
      defaultScalarType: unknown
      withRefetchFn: true
