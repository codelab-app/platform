/**
 * Services Base Image for Codelab Platform
 *
 * This Packer template creates a DigitalOcean snapshot optimized for
 * stateless services (API, Web, Landing, Sites).
 *
 * Pre-installed components:
 * - Docker Engine & Docker Compose for container orchestration
 * - Consul & Consul-Template for configuration management
 * - DigitalOcean CLI for registry authentication
 * - Basic monitoring and debugging tools
 *
 * This image is optimized for:
 * - Fast boot times
 * - Minimal resource usage
 * - Stateless application workloads
 * - Horizontal scaling
 */

packer {
  required_plugins {
    digitalocean = {
      version = ">= 1.1.1"
      source  = "github.com/digitalocean/digitalocean"
    }
  }
}

variable "digitalocean_api_token" {
  type        = string
  description = "DigitalOcean API Token"
  sensitive   = true
}

variable "region" {
  type        = string
  description = "DigitalOcean region to build in"
  default     = "sgp1"
}

variable "docker_compose_version" {
  type        = string
  description = "Docker Compose version to install"
  default     = "2.24.0"
}

variable "doctl_version" {
  type        = string
  description = "DigitalOcean CLI version to install"
  default     = "1.104.0"
}

variable "consul_encrypt_key" {
  type        = string
  description = "Consul gossip encryption key (generate with: consul keygen) - Set via CONSUL_ENCRYPT_KEY env var"
  sensitive   = true
  # No default - will fail if not provided
}

source "digitalocean" "base" {
  api_token     = var.digitalocean_api_token
  droplet_name  = "packer-codelab-base-${formatdate("YYYY-MM-DD-hhmm", timestamp())}"
  image         = "ubuntu-22-04-x64"
  region        = var.region
  size          = "s-1vcpu-1gb"  # Match Terraform Consul deployment size
  ssh_username  = "root"
  snapshot_name = "codelab-base-${formatdate("YYYY-MM-DD-hhmm", timestamp())}"
  snapshot_regions = [var.region]
}

build {
  sources = ["source.digitalocean.base"]

  # System initialization and essential packages
  provisioner "shell" {
    inline = [
      "# Wait for cloud-init to complete",
      "cloud-init status --wait || true",
      "",
      "# Wait for any apt/dpkg processes to finish",
      "while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do",
      "  echo 'Waiting for apt/dpkg lock...'",
      "  sleep 2",
      "done",
      "",
      "# Ensure dpkg is in a clean state",
      "dpkg --configure -a || true",
      "",
      "# Update package list and install essentials in one step",
      "apt-get update",
      "DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --no-upgrade \\",
      "  curl wget gnupg lsb-release software-properties-common \\",
      "  ca-certificates apt-transport-https unzip"
    ]
  }

  # Install Docker and Docker Compose
  provisioner "shell" {
    environment_vars = [
      "DOCKER_COMPOSE_VERSION=${var.docker_compose_version}"
    ]
    script = "scripts/install-docker.sh"
  }

  # Install Consul and Consul-Template from HashiCorp APT repository
  provisioner "shell" {
    script = "scripts/install-consul.sh"
  }

  # Install DigitalOcean CLI for registry operations
  provisioner "shell" {
    environment_vars = [
      "DOCTL_VERSION=${var.doctl_version}"
    ]
    script = "scripts/install-doctl.sh"
  }

  # Setup directory structure FIRST before copying files
  provisioner "shell" {
    inline = [
      "# Create all required directories",
      "mkdir -p /etc/consul.d /opt/consul /var/log/consul",
      "mkdir -p /etc/consul-template",
      "mkdir -p /root/docker",
      "mkdir -p /root/.config/doctl",
      "mkdir -p /etc/systemd/system"
    ]
  }

  # Copy all configuration files at once (grouped for efficiency)
  # Note: daemon.json is NOT copied here - it will be generated by docker-daemon-config.service
  
  # Configure doctl with DigitalOcean token
  provisioner "file" {
    content     = templatefile("../../modules/doctl/config.yaml.tpl", {
      digitalocean_api_token = var.digitalocean_api_token
    })
    destination = "/root/.config/doctl/config.yaml"
  }

  provisioner "file" {
    source      = "../../modules/consul-base/consul-base.hcl"
    destination = "/etc/consul.d/consul-base.hcl"
  }

  provisioner "shell" {
    environment_vars = [
      "CONSUL_ENCRYPT_KEY=${var.consul_encrypt_key}"
    ]
    inline = [
      "echo \"encrypt = \\\"$CONSUL_ENCRYPT_KEY\\\"\" > /etc/consul.d/encryption.hcl"
    ]
  }

  # IMPORTANT: consul-client.hcl is NOT copied here to the base image
  # 
  # Why: Consul loads ALL .hcl files from /etc/consul.d/ directory and merges them.
  # If we included consul-client.hcl in the base image, it would be present on ALL
  # services including the consul-server. This created a critical issue:
  #
  # The Problem:
  # - consul-client.hcl sets: client_addr = "127.0.0.1" (localhost only for security)
  # - consul-server.hcl sets: client_addr = "0.0.0.0" (all interfaces for API access)
  # - When both files exist, Consul merges them and the client restriction wins
  # - Result: Consul server API becomes inaccessible from outside (including Terraform Cloud)
  #
  # The Solution:
  # - We moved consul-client.hcl provisioning to services.pkr.hcl
  # - There, we selectively add it only to client nodes (api, web, neo4j, etc.)
  # - The consul-server gets consul-server.hcl instead, avoiding the conflict
  #
  # This ensures:
  # - Client nodes are secure (API on localhost only)
  # - Server node is accessible (API on all interfaces for Terraform/UI access)

  provisioner "file" {
    source      = "../../modules/consul-base/docker.consul-template.hcl"
    destination = "/etc/consul-template/docker.consul-template.hcl"
  }

  provisioner "file" {
    source      = "../../modules/docker/daemon.json.ctmpl"
    destination = "/etc/consul-template/daemon.json.ctmpl"
  }

  provisioner "file" {
    source      = "../../modules/systemd/consul.service"
    destination = "/etc/systemd/system/consul.service"
  }

  provisioner "file" {
    source      = "../../modules/systemd/docker-watcher.service"
    destination = "/etc/systemd/system/docker-watcher.service"
  }

  provisioner "file" {
    source      = "../../modules/systemd/docker-loki-plugin.service"
    destination = "/etc/systemd/system/docker-loki-plugin.service"
  }

  provisioner "file" {
    source      = "../../modules/systemd/docker-login.service"
    destination = "/etc/systemd/system/docker-login.service"
  }

  # Note: docker-compose.ctmpl is NOT copied here - each service gets its own
  # specific template from the services module (services.pkr.hcl)

  # Setup permissions, enable services, and optimize
  provisioner "shell" {
    inline = [
      "# Set doctl config permissions",
      "chmod 600 /root/.config/doctl/config.yaml",
      "",
      "# Set Consul permissions",
      "chown -R consul:consul /etc/consul.d /opt/consul /var/log/consul",
      "chmod 640 /etc/consul.d/encryption.hcl",
      "",
      "# Enable services",
      "systemctl daemon-reload",
      "systemctl enable docker consul docker-loki-plugin docker-login docker-watcher",
      "",
      "# Kernel tuning for containers",
      "echo 'vm.max_map_count=262144' >> /etc/sysctl.conf",
      "echo 'net.core.somaxconn=1024' >> /etc/sysctl.conf",
      "",
      "# Permanently disable automatic apt updates",
      "systemctl mask apt-daily.service apt-daily-upgrade.service unattended-upgrades.service",
      "",
      "# Clean up to reduce image size",
      "apt-get clean",
      "rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*",
      "rm -rf /usr/share/doc/* /usr/share/man/* /usr/share/info/*",
      "find /var/cache -type f -delete",
      "find /var/log -type f -delete",
      "",
      "# Trim filesystem to minimize snapshot size (25GB -> 2-3GB)",
      "fstrim -av"
    ]
  }
}