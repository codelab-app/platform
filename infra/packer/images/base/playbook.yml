---
- name: Provision base image
  hosts: default
  become: yes
  vars:
    docker_compose_version: "{{ docker_compose_version | default('2.24.0') }}"
    doctl_version: "{{ doctl_version | default('1.104.0') }}"
    consul_encrypt_key: '{{ consul_encrypt_key }}'
    digitalocean_api_token: '{{ digitalocean_api_token }}'
    region: "{{ region | default('sgp1') }}"

  tasks:
    - name: Wait for cloud-init to complete
      command: cloud-init status --wait
      failed_when: false

    - name: Configure dpkg
      command: dpkg --configure -a
      failed_when: false

    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - gnupg
          - lsb-release
          - software-properties-common
          - ca-certificates
          - apt-transport-https
          - unzip
        state: present
        update_cache: yes

    # Docker installation
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: 'deb [arch={{ ansible_architecture }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'
        state: present
        filename: docker

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
        install_recommends: no

    - name: Create Docker Compose symlink for backward compatibility
      file:
        src: /usr/libexec/docker/cli-plugins/docker-compose
        dest: /usr/local/bin/docker-compose
        state: link

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    # HashiCorp Consul installation
    - name: Add HashiCorp GPG key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        keyring: /usr/share/keyrings/hashicorp-archive-keyring.gpg
        state: present

    - name: Add HashiCorp repository
      apt_repository:
        repo: 'deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main'
        state: present
        filename: hashicorp

    - name: Install Consul and Consul-Template
      apt:
        name:
          - consul
          - consul-template
        state: present
        update_cache: yes

    - name: Enable Consul bash completion
      command: consul -autocomplete-install
      failed_when: false

    # DigitalOcean CLI installation
    - name: Download doctl
      get_url:
        url: 'https://github.com/digitalocean/doctl/releases/download/v{{ doctl_version }}/doctl-{{ doctl_version }}-linux-amd64.tar.gz'
        dest: /tmp/doctl.tar.gz
        mode: '0644'

    - name: Extract doctl
      unarchive:
        src: /tmp/doctl.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        mode: '0755'

    - name: Clean up doctl archive
      file:
        path: /tmp/doctl.tar.gz
        state: absent

    # Create directory structure
    - name: Create required directories
      file:
        path: '{{ item }}'
        state: directory
        owner: "{{ item.split('/')[2] | default('root') }}"
        group: "{{ item.split('/')[2] | default('root') }}"
        mode: '0755'
      loop:
        - /etc/consul.d
        - /opt/consul
        - /var/log/consul
        - /etc/consul-template
        - /root/docker
        - /root/.config/doctl
        - /etc/systemd/system

    # Configure doctl
    - name: Configure doctl
      template:
        src: templates/doctl-config.yaml.j2
        dest: /root/.config/doctl/config.yaml
        mode: '0600'

    # Copy Consul configuration files
    - name: Copy Consul base configuration
      copy:
        src: '../../modules/consul-base/consul-base.hcl'
        dest: /etc/consul.d/consul-base.hcl
        owner: consul
        group: consul
        mode: '0640'

    - name: Create Consul encryption configuration
      copy:
        content: 'encrypt = "{{ consul_encrypt_key }}"'
        dest: /etc/consul.d/encryption.hcl
        owner: consul
        group: consul
        mode: '0640'

    - name: Copy Consul-Template configuration
      copy:
        src: '../../modules/consul-base/docker.consul-template.hcl'
        dest: /etc/consul-template/docker.consul-template.hcl

    - name: Copy Docker daemon template
      copy:
        src: '../../modules/docker/daemon.json.ctmpl'
        dest: /etc/consul-template/daemon.json.ctmpl

    # Copy systemd service files
    - name: Copy systemd service files
      copy:
        src: '../../modules/systemd/{{ item }}'
        dest: '/etc/systemd/system/{{ item }}'
      loop:
        - consul.service
        - docker-watcher.service
        - docker-loki-plugin.service
        - docker-login.service

    - name: Set Consul directory permissions
      file:
        path: '{{ item }}'
        owner: consul
        group: consul
        recurse: yes
      loop:
        - /etc/consul.d
        - /opt/consul
        - /var/log/consul

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable services
      systemd:
        name: '{{ item }}'
        enabled: yes
      loop:
        - docker
        - consul
        - docker-loki-plugin
        - docker-login
        - docker-watcher

    # Kernel tuning
    - name: Set kernel parameters for containers
      sysctl:
        name: '{{ item.key }}'
        value: '{{ item.value }}'
        state: present
        sysctl_file: /etc/sysctl.conf
      loop:
        - { key: 'vm.max_map_count', value: '262144' }
        - { key: 'net.core.somaxconn', value: '1024' }

    # Disable automatic updates
    - name: Mask automatic update services
      systemd:
        name: '{{ item }}'
        masked: yes
      loop:
        - apt-daily.service
        - apt-daily-upgrade.service
        - unattended-upgrades.service

    # Cleanup
    - name: Clean apt cache
      apt:
        autoclean: yes
        autoremove: yes

    - name: Remove unnecessary files
      file:
        path: '{{ item }}'
        state: absent
      loop:
        - /var/lib/apt/lists/*
        - /tmp/*
        - /var/tmp/*
      failed_when: false

    - name: Find and remove documentation files
      find:
        paths:
          - /usr/share/doc
          - /usr/share/man
          - /usr/share/info
        file_type: file
      register: doc_files

    - name: Remove documentation files
      file:
        path: '{{ item.path }}'
        state: absent
      loop: '{{ doc_files.files }}'
      failed_when: false

    - name: Find and remove cache files
      find:
        paths:
          - /var/cache
          - /var/log
        file_type: file
      register: cache_files

    - name: Remove cache files
      file:
        path: '{{ item.path }}'
        state: absent
      loop: '{{ cache_files.files }}'
      failed_when: false

    - name: Trim filesystem
      command: fstrim -av
