---
- name: Provision Consul server image
  hosts: default
  become: yes

  pre_tasks:
    # Wait for cloud-init to complete to avoid apt lock conflicts
    - name: Wait for cloud-init to complete
      command: cloud-init status --wait
      failed_when: false
      changed_when: false

    # Fix any interrupted package installs
    - name: Configure dpkg
      command: dpkg --configure -a
      failed_when: false
      changed_when: false

  tasks:
    # Add consul-server.hcl for server nodes
    - name: Copy Consul server configuration
      copy:
        src: '../../modules/consul-server/consul-server.hcl'
        dest: /etc/consul.d/consul-server.hcl
        owner: consul
        group: consul
        mode: '0640'

    # Install Caddy for reverse proxy functionality
    - name: Install Caddy
      block:
        - name: Add Caddy GPG key
          get_url:
            url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
            dest: /usr/share/keyrings/caddy-stable-archive-keyring.asc

        - name: Add Caddy repository
          apt_repository:
            repo: 'deb [signed-by=/usr/share/keyrings/caddy-stable-archive-keyring.asc] https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main'
            state: present

        - name: Install Caddy package
          apt:
            name: caddy
            state: present
            update_cache: yes

    # Create Caddy directories
    - name: Create Caddy directories
      file:
        path: '{{ item }}'
        state: directory
        owner: caddy
        group: caddy
        mode: '0755'
      loop:
        - /etc/caddy
        - /var/lib/caddy
        - /var/log/caddy

    # Create initial Caddyfile template for consul-template
    - name: Create Caddyfile template
      copy:
        content: |
          # Reverse Proxy Configuration - Generated by Consul Template
          # Routes traffic to services discovered via Consul

          {
              admin localhost:2019
              log {
                  output file /var/log/caddy/access.log
              }
          }

          # Health check endpoint
          :80 {
              respond /health "OK" 200
          }

          # Main domain - routes to landing service
          {{ "{{ $domain := key \"config/domain\" }}" }}
          {{ "{{ $domain }}" }}, www.{{ "{{ $domain }}" }} {
              {{ "{{ if service \"landing\" }}" }}
              reverse_proxy {{ "{{ range service \"landing\" }}{{ .Address }}:{{ .Port }}{{ end }}" }}
              {{ "{{ else }}" }}
              respond "Landing service unavailable" 503
              {{ "{{ end }}" }}
          }

          # API subdomain
          api.{{ "{{ $domain }}" }} {
              {{ "{{ if service \"api\" }}" }}
              reverse_proxy {{ "{{ range service \"api\" }}{{ .Address }}:{{ .Port }}{{ end }}" }}
              {{ "{{ else }}" }}
              respond "API service unavailable" 503
              {{ "{{ end }}" }}
          }

          # Web app subdomain
          app.{{ "{{ $domain }}" }}, web.{{ "{{ $domain }}" }} {
              {{ "{{ if service \"web\" }}" }}
              reverse_proxy {{ "{{ range service \"web\" }}{{ .Address }}:{{ .Port }}{{ end }}" }}
              {{ "{{ else }}" }}
              respond "Web service unavailable" 503
              {{ "{{ end }}" }}
          }

          # Sites subdomain
          sites.{{ "{{ $domain }}" }} {
              {{ "{{ if service \"sites\" }}" }}
              reverse_proxy {{ "{{ range service \"sites\" }}{{ .Address }}:{{ .Port }}{{ end }}" }}
              {{ "{{ else }}" }}
              respond "Sites service unavailable" 503
              {{ "{{ end }}" }}
          }

          # Neo4j subdomain
          neo4j.{{ "{{ $domain }}" }} {
              {{ "{{ if service \"neo4j\" }}" }}
              reverse_proxy {{ "{{ range service \"neo4j\" }}{{ .Address }}:{{ .Port }}{{ end }}" }}
              {{ "{{ else }}" }}
              respond "Neo4j service unavailable" 503
              {{ "{{ end }}" }}
          }

          # Grafana subdomain
          grafana.{{ "{{ $domain }}" }} {
              {{ "{{ if service \"grafana\" }}" }}
              reverse_proxy {{ "{{ range service \"grafana\" }}{{ .Address }}:{{ .Port }}{{ end }}" }}
              {{ "{{ else }}" }}
              respond "Grafana service unavailable" 503
              {{ "{{ end }}" }}
          }

          # Preview sites wildcard
          *.preview.{{ "{{ $domain }}" }} {
              {{ "{{ if service \"sites\" }}" }}
              reverse_proxy {{ "{{ range service \"sites\" }}{{ .Address }}:{{ .Port }}{{ end }}" }}
              {{ "{{ else }}" }}
              respond "Preview service unavailable" 503
              {{ "{{ end }}" }}
          }
        dest: /etc/consul-template/caddyfile.ctmpl
        mode: '0644'

    # Create consul-template configuration for Caddy
    - name: Create consul-template configuration for Caddy
      copy:
        content: |
          # Consul-Template configuration for Caddy
          consul {
            address = "127.0.0.1:8500"
            retry {
              enabled = true
              attempts = 12
              backoff = "250ms"
              max_backoff = "1m"
            }
          }

          template {
            source = "/etc/consul-template/caddyfile.ctmpl"
            destination = "/etc/caddy/Caddyfile"
            perms = 0644
            backup = true
            command = "systemctl reload caddy"
            command_timeout = "60s"
            wait {
              min = "2s"
              max = "10s"
            }
          }

          kill_signal = "SIGINT"
          reload_signal = "SIGHUP"
        dest: /etc/consul-template.d/caddy.hcl
        mode: '0644'

    # Disable Caddy service during build but enable for boot
    - name: Configure Caddy service
      systemd:
        name: caddy
        state: stopped
        enabled: yes

    # Re-enable Consul service for server nodes (was disabled in base image)
    # The base image disables Consul to prevent it from running during build
    # But consul-server needs it enabled so it starts automatically on boot
    # We keep it stopped during build but enable it for systemd to start on boot
    - name: Enable Consul service for server
      systemd:
        name: consul
        state: stopped # Don't run during Packer build
        enabled: yes # But enable for auto-start on boot

    # Fix permissions for Consul configuration files
    - name: Set Consul configuration permissions
      file:
        path: /etc/consul.d
        owner: consul
        group: consul

    # Ensure services are disabled before snapshot
    - name: Disable services for build
      include_tasks: ../base/tasks/services-disable.yml

    # Run complete cleanup including machine-id truncation
    - name: Complete service image cleanup
      include_tasks: ../base/tasks/cleanup.yml

    # Verify system is ready for snapshot
    - name: Verify system is ready for snapshot
      include_tasks: ../base/tasks/verify-snapshot.yml
