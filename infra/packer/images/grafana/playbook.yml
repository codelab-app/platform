---
- name: Provision Grafana monitoring image
  hosts: default
  become: yes
  vars:
    digitalocean_api_token: '{{ digitalocean_api_token }}'
    region: "{{ region | default('sgp1') }}"

  pre_tasks:
    # Wait for cloud-init to complete to avoid apt lock conflicts
    - name: Wait for cloud-init to complete
      command: cloud-init status --wait
      failed_when: false
      changed_when: false

    # Fix any interrupted package installs
    - name: Configure dpkg
      command: dpkg --configure -a
      failed_when: false
      changed_when: false

  tasks:
    # Create volume directories for Grafana/Loki first
    - name: Create monitoring volume directories
      file:
        path: '{{ item }}'
        state: directory
        mode: '0755'
      loop:
        - /mnt/loki_data
        - /mnt/grafana_data
        - /mnt/grafana_provisioning
        - /mnt/grafana_provisioning/datasources
        - /mnt/grafana_provisioning/dashboards

    # Grafana-specific Docker Compose template
    - name: Copy Grafana Docker Compose template
      copy:
        src: 'docker-compose.ctmpl'
        dest: /etc/consul-template/docker-compose.ctmpl

    # Create caddy directory
    - name: Create caddy directory
      file:
        path: /opt/caddy
        state: directory
        mode: '0755'

    # Copy static Caddyfile for HTTPS configuration
    - name: Copy static Caddyfile
      copy:
        src: 'Caddyfile'
        dest: /opt/caddy/Caddyfile
        mode: '0644'

    # Copy Grafana provisioning files
    - name: Copy datasource provisioning
      copy:
        src: 'datasources.yml'
        dest: /mnt/grafana_provisioning/datasources/datasources.yml
        mode: '0644'

    # Copy dashboard provisioning config
    - name: Copy dashboard provisioning config
      copy:
        src: 'dashboards.yml'
        dest: /mnt/grafana_provisioning/dashboards/dashboards.yml
        mode: '0644'

    # Dashboard compilation tools removed - dashboards are built and uploaded from local machine via Terraform
    # This saves ~50 seconds of build time and 641MB of disk space
    # - name: Install Jsonnet for dashboard compilation
    #   apt:
    #     name: jsonnet
    #     state: present
    #     update_cache: yes

    # - name: Install Go for jsonnet-bundler
    #   apt:
    #     name: golang-go
    #     state: present

    # - name: Install jsonnet-bundler globally
    #   shell: |
    #     go install -a github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest
    #     ln -sf /root/go/bin/jb /usr/local/bin/jb
    #   args:
    #     creates: /usr/local/bin/jb

    # - name: Pre-install Grafonnet library in shared location
    #   shell: |
    #     mkdir -p /opt/grafonnet
    #     cd /opt/grafonnet
    #     jb init
    #     jb install github.com/grafana/grafonnet/gen/grafonnet-v11.0.0@main
    #   args:
    #     creates: /opt/grafonnet/vendor

    # Add consul-client.hcl for Grafana service
    - name: Configure Consul client
      copy:
        content: |
          # Consul Client Configuration
          # This file configures Consul to run as a client (not a server)

          # Bind to localhost only for client nodes (security best practice)
          # This prevents external access to the Consul API on client nodes
          client_addr = "127.0.0.1"

          # Automatically join the Consul cluster using DigitalOcean tags
          retry_join = ["provider=digitalocean region={{ region }} tag_name=consul-server api_token={{ digitalocean_api_token }}"]

          # Retry joining forever (useful for auto-scaling scenarios)
          retry_interval = "30s"
          retry_max = 0
        dest: /etc/consul.d/consul-client.hcl
        owner: consul
        group: consul
        mode: '0640'

    # Fix permissions for Consul configuration
    - name: Set Consul directory permissions
      file:
        path: /etc/consul.d
        state: directory
        owner: consul
        group: consul
        mode: '0750'

    - name: Set Consul files permissions
      file:
        path: /etc/consul.d
        owner: consul
        group: consul
        recurse: yes
        mode: '0640'

    # Create docker directory for compose files
    - name: Create docker directory
      file:
        path: /root/docker
        state: directory
        mode: '0755'

    # Copy docker-compose systemd service
    - name: Copy docker-compose systemd service
      copy:
        src: 'docker-compose.service'
        dest: /etc/systemd/system/docker-compose.service
        mode: '0644'

    # Reload systemd daemon after adding new service file
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    # Stop and disable docker-compose service (will be enabled on boot)
    - name: Stop and disable docker-compose service
      systemd:
        name: docker-compose
        state: stopped
        enabled: no

    # Service completion message
    - name: Display completion message
      debug:
        msg: 'Grafana service image built successfully'

    # Run complete cleanup including machine-id truncation
    - name: Complete service image cleanup
      include_tasks: ../../modules/cleanup/service-cleanup.yml
