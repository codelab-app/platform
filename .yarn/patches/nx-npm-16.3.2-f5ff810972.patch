diff --git a/src/tasks-runner/forked-process-task-runner.js b/src/tasks-runner/forked-process-task-runner.js
index 4cce60710b4e6ecda538256b984e030a0cb034d4..778a0862dc372fced5ae63d624d73971e282e9e9 100644
--- a/src/tasks-runner/forked-process-task-runner.js
+++ b/src/tasks-runner/forked-process-task-runner.js
@@ -50,6 +50,7 @@ class ForkedProcessTaskRunner {
                         for (const rootTaskId of batchTaskGraph.roots) {
                             results[rootTaskId] = {
                                 success: false,
+                                terminalOutput: '',
                             };
                         }
                         rej(new Error(`"${executorName}" exited unexpectedly with code: ${code}`));
@@ -58,6 +59,9 @@ class ForkedProcessTaskRunner {
                 p.on('message', (message) => {
                     switch (message.type) {
                         case batch_messages_1.BatchMessageType.Complete: {
+                            Object.entries(message.results).forEach(([taskName, result]) => {
+                                this.options.lifeCycle.printTaskTerminalOutput(batchTaskGraph.tasks[taskName], result.success ? 'success' : 'failure', result.terminalOutput);
+                            });
                             res(message.results);
                             break;
                         }
@@ -278,7 +282,7 @@ class ForkedProcessTaskRunner {
     }
     getDotenvVariablesForTask(task) {
         if (process.env.NX_LOAD_DOT_ENV_FILES == 'true') {
-            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getDotenvVariablesForForkedProcess()), parseEnv(`.${task.target.target}.env`)), parseEnv(`.env.${task.target.target}`)), (task.target.configuration
+            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getDotenvVariablesForForkedProcess()), parseEnv(`.${task.target.configuration}.env`)), parseEnv(`.env.${task.target.configuration}`)), parseEnv(`.${task.target.target}.env`)), parseEnv(`.env.${task.target.target}`)), (task.target.configuration
                 ? parseEnv(`.${task.target.target}.${task.target.configuration}.env`)
                 : {})), (task.target.configuration
                 ? parseEnv(`.env.${task.target.target}.${task.target.configuration}`)
