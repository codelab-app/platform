# Dgraph DB schema

type App {
  id: ID!
  ownerId: String! @search(by: [hash])
  pages: [Page] @hasInverse(field: app)
  name: String!
}

type Lambda {
  id: ID!
  ownerId: String! @search(by: [hash])
  name: String!
  body: String!
}

type Page {
  id: ID!
  name: String! @search(by: [term, fulltext])
  app: App!
  rootElement: Element!
}

union ElementOwner = Page

#Note that this Element is not the same as the one served in Nest's API, because we transform it to avoid recursion
type Element {
  id: ID!
  name: String! @search(by: [term, fulltext])
  # An Element must have 1 of 3 ways to be rendered:
  #   1. Atom, with or without children, without component -> render Atom container with children
  #   2. Children, no atom, no component -> render children without container
  #   3. Component, no children, no atom -> render the component itself in place of the element - not functional at the moment
  # We can add component + children later
  children: [Element] @hasInverse(field: parent)
  parent: Element
  atom: Atom
  # The entity that owns this Element. Right now only Page can own it, but that's expandable in the future
  ownedBy: ElementOwner
  # Not functional at the moment
  component: Component
  props: [Prop!]! @hasInverse(field: element)
  # The css string that gets passed down to emotion
  css: String
}

type Library {
  id: ID!
  ownerId: String!
  name: String!
  atoms: [Atom] @hasInverse(field: "library")
  components: [Component] @hasInverse(field: library)
}

# Not functional at the moment
type Component {
  id: ID!
  library: Library!
  atom: Atom!
  label: String!
  children: [Component]
  tags: [Tag]
}

type Atom {
  id: ID!
  type: AtomType!
  label: String!
  library: Library
  propTypes: Interface! @hasInverse(field: atom)
}

type Tag {
  label: String!
}

#
# Typing system:
#
enum PrimitiveKind {
  String
  Integer
  Float
  Boolean
}

type PrimitiveType implements Type {
  id: ID!
  name: String!
  primitiveKind: PrimitiveKind!
}

type ArrayType implements Type {
  id: ID!
  name: String!
  # that's the type of the array item, e.g. type: (PrimitiveType) String, would be string[]
  type: Type!
}

type EnumTypeValue {
  id: ID!
  name: String
  value: String!
}

type EnumType implements Type {
  id: ID!
  name: String!
  allowedValues: [EnumTypeValue!]!
}

type Interface implements Type {
  id: ID!
  name: String!
  # The inverse of Atom.propTypes. Needed to check if an Interface is used as the propTypes of an atom
  atom: Atom
  fields: [Field] @hasInverse(field: interface)
}

# This can be expanded to add UnionType and IntersectionType
interface Type {
  id: ID!
  name: String!
}

# Creating an Union too, because that will make Dgraph generate some nice mutations, like addType
union TypeUnion = Interface | EnumType | ArrayType | PrimitiveType

type Field {
  id: ID!
  type: Type!
  key: String! @search(by: [hash, fulltext])
  name: String!
  description: String
  interface: Interface!
}

#
# Props
#
type StringValue {
  id: ID!
  stringValue: String!
}

type IntValue {
  id: ID!
  intValue: Int!
}

type FloatValue {
  id: ID!
  floatValue: Float!
}

type BooleanValue {
  id: ID!
  booleanValue: Boolean!
}

type ArrayValue {
  id: ID!
  values: [PropValue!]!
}

type InterfaceValue {
  id: ID!
  props: [Prop!]!
}

union PropValue =
    StringValue
  | IntValue
  | FloatValue
  | BooleanValue
  | ArrayValue
  | InterfaceValue
  | EnumTypeValue

type Prop {
  id: ID!
  field: Field!
  value: PropValue
  element: Element
}
