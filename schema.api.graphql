# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Type {
  id: ID!
  name: String!
}

type CreateResponse {
  id: String!
}

type App {
  id: ID!
  ownerId: String!
  name: String!
  pages: App!
}

type Field {
  id: ID!
  key: String!
  name: String
  description: String
}

"""
A edge between types. Depending on the kind can mean a couple of things:
  TypeEdgeKind.Field - it represents a Field object, the field property will contain the metadata;
  TypeEdgeKind.ArrayItem - it represents the generic array item type of an array type. The field property will be empty
"""
type TypeEdge {
  source: String!
  target: String!
  kind: TypeEdgeKind!

  """Empty if kind is not TypeEdgeKind.Field"""
  field: Field
}

enum TypeEdgeKind {
  Field
  ArrayItem
}

type ArrayType implements Type {
  id: ID!
  name: String!
}

type EnumTypeValue {
  id: ID!
  name: String
  value: String!
}

type EnumType implements Type {
  id: ID!
  name: String!
  allowedValues: [EnumTypeValue!]!
}

type InterfaceType implements Type {
  id: ID!
  name: String!
}

"""
The LambdaType allows selecting a Lambda in the props form. The value is stored as the lambdaId 
"""
type LambdaType implements Type {
  id: ID!
  name: String!
}

type PrimitiveType implements Type {
  id: ID!
  name: String!
  primitiveKind: PrimitiveKind!
}

enum PrimitiveKind {
  String
  Integer
  Float
  Boolean
}

type TypeGraph {
  vertices: [Type!]!
  edges: [TypeEdge!]!
}

type Atom {
  id: ID!
  type: AtomType!
  name: String!
  api: InterfaceType!
}

enum AtomType {
  AntDesignAffix
  AntDesignAlert
  AntDesignAnchor
  AntDesignAnchorLink
  AntDesignAutoComplete
  AntDesignAvatar
  AntDesignBackTop
  AntDesignBadge
  AntDesignBreadcrumb
  AntDesignBreadcrumbItem
  AntDesignButton
  AntDesignCalendar
  AntDesignCard
  AntDesignCardGrid
  AntDesignCardMeta
  AntDesignCarousel
  AntDesignCascader
  AntDesignCheckbox
  AntDesignCollapse
  AntDesignCollapsePanel
  AntDesignComment
  AntDesignConfigProvider
  AntDesignDatePicker
  AntDesignDescriptions
  AntDesignDescriptionsItem
  AntDesignDivider
  AntDesignDrawer
  AntDesignDropdown
  AntDesignEmpty
  AntDesignForm
  AntDesignFormItem
  AntDesignFormItemHook
  AntDesignFormList
  AntDesignGridCol
  AntDesignGridRow
  AntDesignIcon
  AntDesignInput
  AntDesignInputNumber
  AntDesignLayout
  AntDesignLayoutContent
  AntDesignLayoutFooter
  AntDesignLayoutHeader
  AntDesignLayoutSider
  AntDesignList
  AntDesignListItem
  AntDesignListItemMeta
  AntDesignMapper
  AntDesignMentions
  AntDesignMentionsOption
  AntDesignMenu
  AntDesignMenuItem
  AntDesignMenuItemGroup
  AntDesignMenuSubMenu
  AntDesignModal
  AntDesignPageHeader
  AntDesignPageContainer
  AntDesignPagination
  AntDesignPopconfirm
  AntDesignPopover
  AntDesignProgress
  AntDesignProvider
  AntDesignRglContainer
  AntDesignRglItem
  AntDesignRglResponsiveContainer
  AntDesignRadio
  AntDesignRadioGroup
  AntDesignRate
  AntDesignRenderComponent
  AntDesignRenderContainer
  AntDesignResult
  AntDesignSelect
  AntDesignSelectOption
  AntDesignSkeleton
  AntDesignSlider
  AntDesignSpace
  AntDesignSpin
  AntDesignStatistic
  AntDesignSteps
  AntDesignStepsStep
  AntDesignSwitch
  AntDesignTable
  AntDesignTabs
  AntDesignTabsTabPane
  AntDesignTag
  AntDesignTimePicker
  AntDesignTimeline
  AntDesignTimelineItem
  AntDesignTooltip
  AntDesignTransfer
  AntDesignTree
  AntDesignTreeNode
  AntDesignTreeSelect
  AntDesignTypography
  AntDesignTypographyParagraph
  AntDesignTypographyText
  AntDesignTypographyTitle
  AntDesignUpload
  Query
  TextList
  ReactFragment
  HtmlA
  HtmlP
  HtmlVideo
  HtmlUList
  HtmlTrack
  HtmlTitle
  HtmlTime
  HtmlTextarea
  HtmlTemplate
  HtmlTableRow
  HtmlTable
  HtmlTableCol
  HtmlTableCell
  HtmlTableCaption
  HtmlStyle
  HtmlSpan
  HtmlSource
  HtmlSelect
  HtmlQuote
  HtmlProgress
  HtmlPre
  HtmlPicture
  HtmlParam
  HtmlOutput
  HtmlOption
  HtmlOptgroup
  HtmlObject
  HtmlOList
  HtmlMeter
  HtmlMeta
  HtmlMap
  HtmlLink
  HtmlLegend
  HtmlLabel
  HtmlLi
  HtmlInput
  HtmlImage
  HtmlIframe
  HtmlH1
  HtmlH2
  HtmlH3
  HtmlH4
  HtmlH5
  HtmlH6
  HtmlHead
  HtmlHr
  HtmlFrameset
  HtmlFrame
  HtmlForm
  HtmlFont
  HtmlFieldset
  HtmlEmbed
  HtmlDiv
  HtmlDialog
  HtmlDetails
  HtmlDatalist
  HtmlData
  HtmlDList
  HtmlCanvas
  HtmlButton
  HtmlBase
  HtmlBr
  HtmlAudio
  HtmlArea
  HtmlFooter
  HtmlAside
  HtmlHeader
  HtmlMain
  HtmlNav
  HtmlSection
  HtmlCode
  HtmlEm
  HtmlI
  HtmlS
  HtmlSmall
  HtmlStrong
  HtmlSub
  HtmlSup
}

type Element {
  id: ID!
  name: String!
  css: String
  atom: Atom

  """Props in a json format"""
  props: String!
}

type Component {
  id: ID!
  name: String!
}

"""An edge between two element nodes"""
type ElementEdge {
  """The id of the source Element/Component"""
  source: String!

  """The id of the target Element/Component"""
  target: String!
  order: Int
}

type ElementGraph {
  """All descendant Elements or Components, at any level"""
  vertices: [ElementGraphVertex!]!

  """All the links connecting the descendant elements/components"""
  edges: [ElementEdge!]!
}

union ElementGraphVertex = Element | Component

type Lambda {
  id: ID!
  ownerId: String!
  name: String!
  body: String!
}

type LambdaPayload {
  payload: String!
}

type Page {
  id: ID!
  name: String!
  elements: ElementGraph!
}

type User {
  blocked: Boolean
  created_at: String
  email: String
  email_verified: Boolean
  family_name: String
  given_name: String
  last_ip: String
  last_login: String
  last_password_reset: String
  logins_count: Float
  multifactor: [String!]
  name: String
  nickname: String
  phone_number: String
  phone_verified: Boolean
  picture: String
  updated_at: String
  user_id: String
  username: String
}

type Query {
  getApp(input: GetAppInput!): App!
  getApps: [App!]!
  getMe: User!
  getUsers(input: GetUsersInput): [User!]!
  getPages(input: GetPagesInput!): [Page!]!
  getPage(input: GetPageInput!): Page!
  getElement(input: GetElementInput!): Element

  """
  Aggregates the requested element and all of its descendant elements (infinitely deep) in the form of a flat array of Element and array of ElementEdge
  """
  getElementGraph(input: GetElementInput!): ElementGraph
  getComponent(input: GetComponentInput!): Component!
  getComponentElements(input: GetComponentInput!): ElementGraph!
  getComponents: [Component!]!
  getAtoms: [Atom!]!
  getAtom(input: GetAtomInput!): Atom
  getField(input: GetFieldInput!): Field
  getType(input: GetTypeInput!): Type
  getTypeGraph(input: GetTypeInput!): TypeGraph!
  getTypes(input: GetTypesInput): [Type!]!
  getLambda(input: GetLambdaInput!): Lambda
  getLambdas: [Lambda!]!
}

input GetAppInput {
  byId: AppByIdFilter
  byPage: AppByPageFilter
}

input AppByIdFilter {
  appId: String!
}

input AppByPageFilter {
  pageId: String!
}

input GetUsersInput {
  page: Int!
  perPage: Int!
  query: String!
  sort: String!
}

input GetPagesInput {
  byApp: PageByAppFilter!
}

input PageByAppFilter {
  appId: String!
}

input GetPageInput {
  pageId: String!
}

input GetElementInput {
  elementId: String!
}

input GetComponentInput {
  componentId: String!
}

input GetAtomInput {
  byElement: AtomByElement
  byId: AtomById
}

input AtomByElement {
  elementId: String!
}

input AtomById {
  atomId: String!
}

input GetFieldInput {
  byInterface: FieldByInterfaceFilter
  byId: FieldByIdFilter
}

input FieldByInterfaceFilter {
  interfaceId: String!
  fieldKey: String!
}

input FieldByIdFilter {
  fieldId: String!
}

input GetTypeInput {
  typeId: String!
}

"""Filters are optional and you can provide both of them together"""
input GetTypesInput {
  byIds: TypesByIdsFilter
  byKind: TypesByKindFilter
}

input TypesByIdsFilter {
  typeIds: [String!]!
}

input TypesByKindFilter {
  kind: TypeKindFilter!
}

enum TypeKindFilter {
  PrimitiveType
  ArrayType
  InterfaceType
  EnumType
  LambdaType
}

input GetLambdaInput {
  lambdaId: String!
}

type Mutation {
  createApp(input: CreateAppInput!): CreateResponse!
  updateApp(input: UpdateAppInput!): Void
  deleteApp(input: DeleteAppInput!): Void
  updateUser(input: UpdateUserInput!): User!
  deleteUser(input: DeleteUserInput!): Boolean!
  createPage(input: CreatePageInput!): CreateResponse!
  deletePage(input: DeletePageInput!): Void
  updatePage(input: UpdatePageInput!): Void
  createElement(input: CreateElementInput!): CreateResponse!
  updateElement(input: UpdateElementInput!): Void
  moveElement(input: MoveElementInput!): Void
  updateElementProps(input: UpdateElementPropsInput!): Void

  """Deletes an element and all the descending elements"""
  deleteElement(input: DeleteElementInput!): Void
  createComponent(input: CreateComponentInput!): CreateResponse!
  updateComponent(input: UpdateComponentInput!): Void
  deleteComponent(input: DeleteComponentInput!): Void
  createAtom(input: CreateAtomInput!): CreateResponse!
  deleteAtom(input: DeleteAtomInput!): Void
  updateAtom(input: UpdateAtomInput!): Void
  createField(input: CreateFieldInput!): CreateResponse!
  updateField(input: UpdateFieldInput!): Void
  deleteField(input: DeleteFieldInput!): Void
  createType(input: CreateTypeInput!): CreateResponse!
  updateEnumType(input: UpdateEnumTypeInput!): Void
  updatePrimitiveType(input: UpdatePrimitiveTypeInput!): Void
  updateType(input: UpdateTypeInput!): Void
  deleteType(input: DeleteTypeInput!): Void
  createLambda(input: CreateLambdaInput!): Lambda!
  deleteLambda(input: DeleteLambdaInput!): Void
  updateLambda(input: UpdateLambdaInput!): Lambda
  executeLambda(input: ExecuteLambdaInput!): LambdaPayload
}

input CreateAppInput {
  name: String!
}

"""Date custom scalar type"""
scalar Void

input UpdateAppInput {
  id: String!
  data: UpdateAppData!
}

input UpdateAppData {
  name: String!
}

input DeleteAppInput {
  appId: String!
}

input UpdateUserInput {
  userId: String!
  updateData: UpdateUserData!
}

input UpdateUserData {
  family_name: String
  given_name: String
  name: String
  nickname: String
  phone_number: String
  picture: String
  username: String
}

input DeleteUserInput {
  userId: String!
}

input CreatePageInput {
  name: String!
  appId: String!
}

input DeletePageInput {
  pageId: String!
}

input UpdatePageInput {
  pageId: String!
  updateData: UpdatePageData!
}

input UpdatePageData {
  name: String!
  appId: String!
}

input CreateElementInput {
  name: String!
  atomId: String
  componentId: String
  parentElementId: String

  """
  Leave it out to automatically set it as the last order of all the children
  """
  order: Int
}

input UpdateElementInput {
  updateData: UpdateElementData!
  elementId: String!
}

input UpdateElementData {
  name: String!
  css: String
  atomId: String
  componentId: String
}

input MoveElementInput {
  elementId: String!
  moveData: MoveData!
}

input MoveData {
  order: Int!
  parentElementId: String!
}

input UpdateElementPropsInput {
  props: String!
  elementId: String!
}

input DeleteElementInput {
  elementId: String!
}

input CreateComponentInput {
  name: String!
}

input UpdateComponentInput {
  componentId: String!
  updateData: UpdateComponentData!
}

input UpdateComponentData {
  name: String!
}

input DeleteComponentInput {
  componentId: String!
}

input CreateAtomInput {
  name: String!
  type: AtomType!
}

input DeleteAtomInput {
  atomId: String!
}

input UpdateAtomInput {
  id: String!
  data: CreateAtomInput!
}

input CreateFieldInput {
  key: String!
  name: String!
  description: String
  interfaceId: String!
  type: TypeRef!
}

input TypeRef {
  existingTypeId: String
  newType: CreateTypeInput
}

"""Provide one of the properties"""
input CreateTypeInput {
  name: String!
  primitiveType: CreatePrimitiveTypeInput
  arrayType: CreateArrayTypeInput
  enumType: CreateEnumTypeInput
  interfaceType: Boolean
  lambdaType: Boolean
}

input CreatePrimitiveTypeInput {
  primitiveKind: PrimitiveKind!
}

input CreateArrayTypeInput {
  itemTypeId: String!
}

input CreateEnumTypeInput {
  allowedValues: [CreateEnumTypeValueInput!]!
}

input CreateEnumTypeValueInput {
  name: String
  value: String!
}

input UpdateFieldInput {
  fieldId: String!
  updateData: UpdateFieldData!
}

input UpdateFieldData {
  key: String!
  name: String!
  description: String
  type: TypeRef!
}

input DeleteFieldInput {
  fieldId: String!
}

input UpdateEnumTypeInput {
  typeId: String!
  updateData: UpdateEnumTypeData!
}

input UpdateEnumTypeData {
  allowedValues: [UpdateEnumTypeValueData!]!
  name: String!
}

input UpdateEnumTypeValueData {
  id: String
  name: String
  value: String!
}

input UpdatePrimitiveTypeInput {
  typeId: String!
  updateData: UpdatePrimitiveKindData!
}

input UpdatePrimitiveKindData {
  primitiveKind: PrimitiveKind!
  name: String!
}

input UpdateTypeInput {
  updateData: UpdateTypeData!
  typeId: String!
}

input UpdateTypeData {
  name: String!
}

input DeleteTypeInput {
  typeId: String!
}

input CreateLambdaInput {
  """Name of the Lambda function to be executed"""
  name: String!

  """Content of the Lambda function"""
  body: String!
}

input DeleteLambdaInput {
  lambdaId: String!
}

input UpdateLambdaInput {
  """Name of the Lambda function to be executed"""
  name: String!

  """Content of the Lambda function"""
  body: String!
  id: String!
}

input ExecuteLambdaInput {
  lambdaId: String!
  payload: String
}
