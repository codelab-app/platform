interface ActionBase {
  id: ID!
  name: String!
  runOnInit: Boolean!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ActionBaseStoreConnectionSort!]
    where: ActionBaseStoreConnectionWhere
  ): ActionBaseStoreConnection!
  type: ActionKind!
}

input ActionBaseConnectInput {
  _on: ActionBaseImplementationsConnectInput
  store: ActionBaseStoreConnectFieldInput
}

input ActionBaseConnectWhere {
  node: ActionBaseWhere!
}

input ActionBaseCreateInput {
  CustomAction: CustomActionCreateInput
  PipelineAction: PipelineActionCreateInput
  ResourceAction: ResourceActionCreateInput
}

input ActionBaseDeleteInput {
  _on: ActionBaseImplementationsDeleteInput
  store: ActionBaseStoreDeleteFieldInput
}

input ActionBaseDisconnectInput {
  _on: ActionBaseImplementationsDisconnectInput
  store: ActionBaseStoreDisconnectFieldInput
}

input ActionBaseImplementationsConnectInput {
  CustomAction: [CustomActionConnectInput!]
  PipelineAction: [PipelineActionConnectInput!]
  ResourceAction: [ResourceActionConnectInput!]
}

input ActionBaseImplementationsDeleteInput {
  CustomAction: [CustomActionDeleteInput!]
  PipelineAction: [PipelineActionDeleteInput!]
  ResourceAction: [ResourceActionDeleteInput!]
}

input ActionBaseImplementationsDisconnectInput {
  CustomAction: [CustomActionDisconnectInput!]
  PipelineAction: [PipelineActionDisconnectInput!]
  ResourceAction: [ResourceActionDisconnectInput!]
}

input ActionBaseImplementationsUpdateInput {
  CustomAction: CustomActionUpdateInput
  PipelineAction: PipelineActionUpdateInput
  ResourceAction: ResourceActionUpdateInput
}

input ActionBaseImplementationsWhere {
  CustomAction: CustomActionWhere
  PipelineAction: PipelineActionWhere
  ResourceAction: ResourceActionWhere
}

input ActionBaseOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ActionBaseSort objects to sort ActionBases by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ActionBaseSort]
}

"""
Fields to sort ActionBases by. The order in which sorts are applied is not guaranteed when specifying many fields in one ActionBaseSort object.
"""
input ActionBaseSort {
  id: SortDirection
  name: SortDirection
  runOnInit: SortDirection
  type: SortDirection
}

input ActionBaseStoreAggregateInput {
  AND: [ActionBaseStoreAggregateInput!]
  OR: [ActionBaseStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ActionBaseStoreNodeAggregationWhereInput
}

input ActionBaseStoreConnectFieldInput {
  connect: StoreConnectInput
  where: StoreConnectWhere
}

input ActionBaseStoreConnectOrCreateFieldInput {
  onCreate: ActionBaseStoreConnectOrCreateFieldInputOnCreate!
  where: StoreConnectOrCreateWhere!
}

input ActionBaseStoreConnectOrCreateFieldInputOnCreate {
  node: StoreOnCreateInput!
}

type ActionBaseStoreConnection {
  edges: [ActionBaseStoreRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ActionBaseStoreConnectionSort {
  node: StoreSort
}

input ActionBaseStoreConnectionWhere {
  AND: [ActionBaseStoreConnectionWhere!]
  OR: [ActionBaseStoreConnectionWhere!]
  node: StoreWhere
  node_NOT: StoreWhere
}

input ActionBaseStoreCreateFieldInput {
  node: StoreCreateInput!
}

input ActionBaseStoreDeleteFieldInput {
  delete: StoreDeleteInput
  where: ActionBaseStoreConnectionWhere
}

input ActionBaseStoreDisconnectFieldInput {
  disconnect: StoreDisconnectInput
  where: ActionBaseStoreConnectionWhere
}

input ActionBaseStoreFieldInput {
  connect: ActionBaseStoreConnectFieldInput
  connectOrCreate: ActionBaseStoreConnectOrCreateFieldInput
  create: ActionBaseStoreCreateFieldInput
}

input ActionBaseStoreNodeAggregationWhereInput {
  AND: [ActionBaseStoreNodeAggregationWhereInput!]
  OR: [ActionBaseStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ActionBaseStoreRelationship {
  cursor: String!
  node: Store!
}

input ActionBaseStoreUpdateConnectionInput {
  node: StoreUpdateInput
}

input ActionBaseStoreUpdateFieldInput {
  connect: ActionBaseStoreConnectFieldInput
  connectOrCreate: ActionBaseStoreConnectOrCreateFieldInput
  create: ActionBaseStoreCreateFieldInput
  delete: ActionBaseStoreDeleteFieldInput
  disconnect: ActionBaseStoreDisconnectFieldInput
  update: ActionBaseStoreUpdateConnectionInput
  where: ActionBaseStoreConnectionWhere
}

input ActionBaseUpdateInput {
  _on: ActionBaseImplementationsUpdateInput
  id: ID
  name: String
  runOnInit: Boolean
  store: ActionBaseStoreUpdateFieldInput
}

input ActionBaseWhere {
  _on: ActionBaseImplementationsWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  runOnInit: Boolean
  runOnInit_NOT: Boolean
  store: StoreWhere
  storeAggregate: ActionBaseStoreAggregateInput
  storeConnection: ActionBaseStoreConnectionWhere
  storeConnection_NOT: ActionBaseStoreConnectionWhere
  store_NOT: StoreWhere
  type: ActionKind
  type_IN: [ActionKind!]
  type_NOT: ActionKind
  type_NOT_IN: [ActionKind!]
}

enum ActionKind {
  """
  Action with custom code
  """
  CustomAction

  """
  Represents a list of actions that runs in a certain order
  """
  PipelineAction

  """
  Action responsible for fetching data from a resource
  """
  ResourceAction
}

"""
Allows picking a action from the list of actions
"""
type ActionType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ActionTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ActionTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ActionTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input ActionTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ActionTypeCreateInput {
  id: ID!
  kind: TypeKind! = ActionType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ActionTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input ActionTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ActionTypeEdge {
  cursor: String!
  node: ActionType!
}

input ActionTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ActionTypeSort objects to sort ActionTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ActionTypeSort!]
}

input ActionTypeOwnerAggregateInput {
  AND: [ActionTypeOwnerAggregateInput!]
  OR: [ActionTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ActionTypeOwnerNodeAggregationWhereInput
}

input ActionTypeOwnerNodeAggregationWhereInput {
  AND: [ActionTypeOwnerNodeAggregationWhereInput!]
  OR: [ActionTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input ActionTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ActionTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ActionTypeSort object.
"""
input ActionTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ActionTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ActionTypeUserOwnerAggregationSelection {
  count: Int!
  node: ActionTypeUserOwnerNodeAggregateSelection
}

type ActionTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ActionTypeWhere {
  AND: [ActionTypeWhere!]
  OR: [ActionTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ActionTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ActionTypesConnection {
  edges: [ActionTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface ActionsPipeLine {
  orders: [String!]
}

input ActionsPipeLineCreateInput {
  orders: [String!]
}

input ActionsPipeLineSort {
  orders: SortDirection
}

input ActionsPipeLineUpdateInput {
  orders: [String!]
}

input ActionsPipeLineWhere {
  AND: [ActionsPipeLineWhere!]
  OR: [ActionsPipeLineWhere!]
  orders: [String!]
  orders_INCLUDES: String
  orders_NOT: [String!]
  orders_NOT_INCLUDES: String
}

union AnyAction = CustomAction | PipelineAction | ResourceAction

input AnyActionWhere {
  CustomAction: CustomActionWhere
  PipelineAction: PipelineActionWhere
  ResourceAction: ResourceActionWhere
}

type App implements WithOwner {
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): AppUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  pages(
    directed: Boolean = true
    options: PageOptions
    where: PageWhere
  ): [Page!]!
  pagesAggregate(
    directed: Boolean = true
    where: PageWhere
  ): AppPagePagesAggregationSelection
  pagesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppPagesConnectionSort!]
    where: AppPagesConnectionWhere
  ): AppPagesConnection!
  rootElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  rootElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): AppElementRootElementAggregationSelection
  rootElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppRootElementConnectionSort!]
    where: AppRootElementConnectionWhere
  ): AppRootElementConnection!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): AppStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppStoreConnectionSort!]
    where: AppStoreConnectionWhere
  ): AppStoreConnection!
}

type AppAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppConnectInput {
  owner: WithOwnerOwnerConnectFieldInput
  pages: [AppPagesConnectFieldInput!]
  rootElement: AppRootElementConnectFieldInput
  store: AppStoreConnectFieldInput
}

input AppConnectOrCreateInput {
  owner: WithOwnerOwnerConnectOrCreateFieldInput
  pages: [AppPagesConnectOrCreateFieldInput!]
  rootElement: AppRootElementConnectOrCreateFieldInput
  store: AppStoreConnectOrCreateFieldInput
}

input AppConnectOrCreateWhere {
  node: AppUniqueWhere!
}

input AppConnectWhere {
  node: AppWhere!
}

input AppCreateInput {
  id: ID!
  name: String!
  owner: WithOwnerOwnerFieldInput
  pages: AppPagesFieldInput
  rootElement: AppRootElementFieldInput
  store: AppStoreFieldInput
}

input AppDeleteInput {
  owner: WithOwnerOwnerDeleteFieldInput
  pages: [AppPagesDeleteFieldInput!]
  rootElement: AppRootElementDeleteFieldInput
  store: AppStoreDeleteFieldInput
}

input AppDisconnectInput {
  owner: WithOwnerOwnerDisconnectFieldInput
  pages: [AppPagesDisconnectFieldInput!]
  rootElement: AppRootElementDisconnectFieldInput
  store: AppStoreDisconnectFieldInput
}

type AppEdge {
  cursor: String!
  node: App!
}

type AppElementRootElementAggregationSelection {
  count: Int!
  node: AppElementRootElementNodeAggregateSelection
}

type AppElementRootElementNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input AppOnCreateInput {
  id: ID!
  name: String!
}

input AppOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AppSort objects to sort Apps by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AppSort!]
}

input AppOwnerAggregateInput {
  AND: [AppOwnerAggregateInput!]
  OR: [AppOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppOwnerNodeAggregationWhereInput
}

input AppOwnerNodeAggregationWhereInput {
  AND: [AppOwnerNodeAggregationWhereInput!]
  OR: [AppOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type AppPagePagesAggregationSelection {
  count: Int!
  node: AppPagePagesNodeAggregateSelection
}

type AppPagePagesNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppPagesAggregateInput {
  AND: [AppPagesAggregateInput!]
  OR: [AppPagesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppPagesNodeAggregationWhereInput
}

input AppPagesConnectFieldInput {
  connect: [PageConnectInput!]
  where: PageConnectWhere
}

input AppPagesConnectOrCreateFieldInput {
  onCreate: AppPagesConnectOrCreateFieldInputOnCreate!
  where: PageConnectOrCreateWhere!
}

input AppPagesConnectOrCreateFieldInputOnCreate {
  node: PageOnCreateInput!
}

type AppPagesConnection {
  edges: [AppPagesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppPagesConnectionSort {
  node: PageSort
}

input AppPagesConnectionWhere {
  AND: [AppPagesConnectionWhere!]
  OR: [AppPagesConnectionWhere!]
  node: PageWhere
  node_NOT: PageWhere
}

input AppPagesCreateFieldInput {
  node: PageCreateInput!
}

input AppPagesDeleteFieldInput {
  delete: PageDeleteInput
  where: AppPagesConnectionWhere
}

input AppPagesDisconnectFieldInput {
  disconnect: PageDisconnectInput
  where: AppPagesConnectionWhere
}

input AppPagesFieldInput {
  connect: [AppPagesConnectFieldInput!]
  connectOrCreate: [AppPagesConnectOrCreateFieldInput!]
  create: [AppPagesCreateFieldInput!]
}

input AppPagesNodeAggregationWhereInput {
  AND: [AppPagesNodeAggregationWhereInput!]
  OR: [AppPagesNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AppPagesRelationship {
  cursor: String!
  node: Page!
}

input AppPagesUpdateConnectionInput {
  node: PageUpdateInput
}

input AppPagesUpdateFieldInput {
  connect: [AppPagesConnectFieldInput!]
  connectOrCreate: [AppPagesConnectOrCreateFieldInput!]
  create: [AppPagesCreateFieldInput!]
  delete: [AppPagesDeleteFieldInput!]
  disconnect: [AppPagesDisconnectFieldInput!]
  update: AppPagesUpdateConnectionInput
  where: AppPagesConnectionWhere
}

input AppRelationInput {
  owner: WithOwnerOwnerCreateFieldInput
  pages: [AppPagesCreateFieldInput!]
  rootElement: AppRootElementCreateFieldInput
  store: AppStoreCreateFieldInput
}

input AppRootElementAggregateInput {
  AND: [AppRootElementAggregateInput!]
  OR: [AppRootElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppRootElementNodeAggregationWhereInput
}

input AppRootElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input AppRootElementConnectOrCreateFieldInput {
  onCreate: AppRootElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input AppRootElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type AppRootElementConnection {
  edges: [AppRootElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppRootElementConnectionSort {
  node: ElementSort
}

input AppRootElementConnectionWhere {
  AND: [AppRootElementConnectionWhere!]
  OR: [AppRootElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input AppRootElementCreateFieldInput {
  node: ElementCreateInput!
}

input AppRootElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: AppRootElementConnectionWhere
}

input AppRootElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: AppRootElementConnectionWhere
}

input AppRootElementFieldInput {
  connect: AppRootElementConnectFieldInput
  connectOrCreate: AppRootElementConnectOrCreateFieldInput
  create: AppRootElementCreateFieldInput
}

input AppRootElementNodeAggregationWhereInput {
  AND: [AppRootElementNodeAggregationWhereInput!]
  OR: [AppRootElementNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type AppRootElementRelationship {
  cursor: String!
  node: Element!
}

input AppRootElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input AppRootElementUpdateFieldInput {
  connect: AppRootElementConnectFieldInput
  connectOrCreate: AppRootElementConnectOrCreateFieldInput
  create: AppRootElementCreateFieldInput
  delete: AppRootElementDeleteFieldInput
  disconnect: AppRootElementDisconnectFieldInput
  update: AppRootElementUpdateConnectionInput
  where: AppRootElementConnectionWhere
}

"""
Fields to sort Apps by. The order in which sorts are applied is not guaranteed when specifying many fields in one AppSort object.
"""
input AppSort {
  id: SortDirection
  name: SortDirection
}

input AppStoreAggregateInput {
  AND: [AppStoreAggregateInput!]
  OR: [AppStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppStoreNodeAggregationWhereInput
}

input AppStoreConnectFieldInput {
  connect: StoreConnectInput
  where: StoreConnectWhere
}

input AppStoreConnectOrCreateFieldInput {
  onCreate: AppStoreConnectOrCreateFieldInputOnCreate!
  where: StoreConnectOrCreateWhere!
}

input AppStoreConnectOrCreateFieldInputOnCreate {
  node: StoreOnCreateInput!
}

type AppStoreConnection {
  edges: [AppStoreRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppStoreConnectionSort {
  node: StoreSort
}

input AppStoreConnectionWhere {
  AND: [AppStoreConnectionWhere!]
  OR: [AppStoreConnectionWhere!]
  node: StoreWhere
  node_NOT: StoreWhere
}

input AppStoreCreateFieldInput {
  node: StoreCreateInput!
}

input AppStoreDeleteFieldInput {
  delete: StoreDeleteInput
  where: AppStoreConnectionWhere
}

input AppStoreDisconnectFieldInput {
  disconnect: StoreDisconnectInput
  where: AppStoreConnectionWhere
}

input AppStoreFieldInput {
  connect: AppStoreConnectFieldInput
  connectOrCreate: AppStoreConnectOrCreateFieldInput
  create: AppStoreCreateFieldInput
}

input AppStoreNodeAggregationWhereInput {
  AND: [AppStoreNodeAggregationWhereInput!]
  OR: [AppStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AppStoreRelationship {
  cursor: String!
  node: Store!
}

type AppStoreStoreAggregationSelection {
  count: Int!
  node: AppStoreStoreNodeAggregateSelection
}

type AppStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppStoreUpdateConnectionInput {
  node: StoreUpdateInput
}

input AppStoreUpdateFieldInput {
  connect: AppStoreConnectFieldInput
  connectOrCreate: AppStoreConnectOrCreateFieldInput
  create: AppStoreCreateFieldInput
  delete: AppStoreDeleteFieldInput
  disconnect: AppStoreDisconnectFieldInput
  update: AppStoreUpdateConnectionInput
  where: AppStoreConnectionWhere
}

"""
Allows picking a app from the list of apps
"""
type AppType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): AppTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type AppTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input AppTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input AppTypeCreateInput {
  id: ID!
  kind: TypeKind! = AppType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input AppTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input AppTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type AppTypeEdge {
  cursor: String!
  node: AppType!
}

input AppTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AppTypeSort objects to sort AppTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AppTypeSort!]
}

input AppTypeOwnerAggregateInput {
  AND: [AppTypeOwnerAggregateInput!]
  OR: [AppTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppTypeOwnerNodeAggregationWhereInput
}

input AppTypeOwnerNodeAggregationWhereInput {
  AND: [AppTypeOwnerNodeAggregationWhereInput!]
  OR: [AppTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input AppTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort AppTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one AppTypeSort object.
"""
input AppTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input AppTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type AppTypeUserOwnerAggregationSelection {
  count: Int!
  node: AppTypeUserOwnerNodeAggregateSelection
}

type AppTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input AppTypeWhere {
  AND: [AppTypeWhere!]
  OR: [AppTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: AppTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type AppTypesConnection {
  edges: [AppTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppUniqueWhere {
  id: ID
}

input AppUpdateInput {
  id: ID
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  pages: [AppPagesUpdateFieldInput!]
  rootElement: AppRootElementUpdateFieldInput
  store: AppStoreUpdateFieldInput
}

type AppUserOwnerAggregationSelection {
  count: Int!
  node: AppUserOwnerNodeAggregateSelection
}

type AppUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input AppWhere {
  AND: [AppWhere!]
  OR: [AppWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: AppOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  pagesAggregate: AppPagesAggregateInput
  pagesConnection_ALL: AppPagesConnectionWhere
  pagesConnection_NONE: AppPagesConnectionWhere
  pagesConnection_SINGLE: AppPagesConnectionWhere
  pagesConnection_SOME: AppPagesConnectionWhere

  """
  Return Apps where all of the related Pages match this filter
  """
  pages_ALL: PageWhere

  """
  Return Apps where none of the related Pages match this filter
  """
  pages_NONE: PageWhere

  """
  Return Apps where one of the related Pages match this filter
  """
  pages_SINGLE: PageWhere

  """
  Return Apps where some of the related Pages match this filter
  """
  pages_SOME: PageWhere
  rootElement: ElementWhere
  rootElementAggregate: AppRootElementAggregateInput
  rootElementConnection: AppRootElementConnectionWhere
  rootElementConnection_NOT: AppRootElementConnectionWhere
  rootElement_NOT: ElementWhere
  store: StoreWhere
  storeAggregate: AppStoreAggregateInput
  storeConnection: AppStoreConnectionWhere
  storeConnection_NOT: AppStoreConnectionWhere
  store_NOT: StoreWhere
}

type AppsConnection {
  edges: [AppEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
ArrayType Allows defining a variable number of items of a given type.
Contains a reference to another type which is the array item type.
"""
type ArrayType implements TypeBase & WithDescendants {
  descendantTypesIds: [ID!]!
  id: ID!
  itemType(
    directed: Boolean = true
    options: TypeBaseOptions
    where: TypeBaseWhere
  ): TypeBase!
  itemTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ArrayTypeItemTypeConnectionSort!]
    where: ArrayTypeItemTypeConnectionWhere
  ): ArrayTypeItemTypeConnection!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ArrayTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ArrayTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ArrayTypeConnectInput {
  itemType: ArrayTypeItemTypeConnectFieldInput
  owner: TypeBaseOwnerConnectFieldInput
}

input ArrayTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ArrayTypeCreateInput {
  id: ID!
  itemType: ArrayTypeItemTypeFieldInput
  kind: TypeKind! = ArrayType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ArrayTypeDeleteInput {
  itemType: ArrayTypeItemTypeDeleteFieldInput
  owner: TypeBaseOwnerDeleteFieldInput
}

input ArrayTypeDisconnectInput {
  itemType: ArrayTypeItemTypeDisconnectFieldInput
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ArrayTypeEdge {
  cursor: String!
  node: ArrayType!
}

input ArrayTypeItemTypeConnectFieldInput {
  connect: TypeBaseConnectInput
  where: TypeBaseConnectWhere
}

type ArrayTypeItemTypeConnection {
  edges: [ArrayTypeItemTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ArrayTypeItemTypeConnectionSort {
  node: TypeBaseSort
}

input ArrayTypeItemTypeConnectionWhere {
  AND: [ArrayTypeItemTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeConnectionWhere!]
  node: TypeBaseWhere
  node_NOT: TypeBaseWhere
}

input ArrayTypeItemTypeCreateFieldInput {
  node: TypeBaseCreateInput!
}

input ArrayTypeItemTypeDeleteFieldInput {
  delete: TypeBaseDeleteInput
  where: ArrayTypeItemTypeConnectionWhere
}

input ArrayTypeItemTypeDisconnectFieldInput {
  disconnect: TypeBaseDisconnectInput
  where: ArrayTypeItemTypeConnectionWhere
}

input ArrayTypeItemTypeFieldInput {
  connect: ArrayTypeItemTypeConnectFieldInput
  create: ArrayTypeItemTypeCreateFieldInput
}

type ArrayTypeItemTypeRelationship {
  cursor: String!
  node: TypeBase!
}

input ArrayTypeItemTypeUpdateConnectionInput {
  node: TypeBaseUpdateInput
}

input ArrayTypeItemTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeConnectFieldInput
  create: ArrayTypeItemTypeCreateFieldInput
  delete: ArrayTypeItemTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeDisconnectFieldInput
  update: ArrayTypeItemTypeUpdateConnectionInput
  where: ArrayTypeItemTypeConnectionWhere
}

input ArrayTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ArrayTypeSort objects to sort ArrayTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ArrayTypeSort!]
}

input ArrayTypeOwnerAggregateInput {
  AND: [ArrayTypeOwnerAggregateInput!]
  OR: [ArrayTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ArrayTypeOwnerNodeAggregationWhereInput
}

input ArrayTypeOwnerNodeAggregationWhereInput {
  AND: [ArrayTypeOwnerNodeAggregationWhereInput!]
  OR: [ArrayTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input ArrayTypeRelationInput {
  itemType: ArrayTypeItemTypeCreateFieldInput
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ArrayTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ArrayTypeSort object.
"""
input ArrayTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ArrayTypeUpdateInput {
  id: ID
  itemType: ArrayTypeItemTypeUpdateFieldInput
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ArrayTypeUserOwnerAggregationSelection {
  count: Int!
  node: ArrayTypeUserOwnerNodeAggregateSelection
}

type ArrayTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ArrayTypeWhere {
  AND: [ArrayTypeWhere!]
  OR: [ArrayTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  itemTypeConnection: ArrayTypeItemTypeConnectionWhere
  itemTypeConnection_NOT: ArrayTypeItemTypeConnectionWhere
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ArrayTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ArrayTypesConnection {
  edges: [ArrayTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Atom {
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): AtomInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomApiConnectionSort!]
    where: AtomApiConnectionWhere
  ): AtomApiConnection!
  id: ID!
  name: String!
  tags(directed: Boolean = true, options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(
    directed: Boolean = true
    where: TagWhere
  ): AtomTagTagsAggregationSelection
  tagsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomTagsConnectionSort!]
    where: AtomTagsConnectionWhere
  ): AtomTagsConnection!
  type: AtomType!
}

type AtomAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomApiAggregateInput {
  AND: [AtomApiAggregateInput!]
  OR: [AtomApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomApiNodeAggregationWhereInput
}

input AtomApiConnectFieldInput {
  connect: InterfaceTypeConnectInput
  where: InterfaceTypeConnectWhere
}

input AtomApiConnectOrCreateFieldInput {
  onCreate: AtomApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input AtomApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type AtomApiConnection {
  edges: [AtomApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomApiConnectionSort {
  node: InterfaceTypeSort
}

input AtomApiConnectionWhere {
  AND: [AtomApiConnectionWhere!]
  OR: [AtomApiConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input AtomApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input AtomApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: AtomApiConnectionWhere
}

input AtomApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: AtomApiConnectionWhere
}

input AtomApiFieldInput {
  connect: AtomApiConnectFieldInput
  connectOrCreate: AtomApiConnectOrCreateFieldInput
  create: AtomApiCreateFieldInput
}

input AtomApiNodeAggregationWhereInput {
  AND: [AtomApiNodeAggregationWhereInput!]
  OR: [AtomApiNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AtomApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input AtomApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input AtomApiUpdateFieldInput {
  connect: AtomApiConnectFieldInput
  connectOrCreate: AtomApiConnectOrCreateFieldInput
  create: AtomApiCreateFieldInput
  delete: AtomApiDeleteFieldInput
  disconnect: AtomApiDisconnectFieldInput
  update: AtomApiUpdateConnectionInput
  where: AtomApiConnectionWhere
}

input AtomConnectInput {
  api: AtomApiConnectFieldInput
  tags: [AtomTagsConnectFieldInput!]
}

input AtomConnectOrCreateInput {
  api: AtomApiConnectOrCreateFieldInput
  tags: [AtomTagsConnectOrCreateFieldInput!]
}

input AtomConnectOrCreateWhere {
  node: AtomUniqueWhere!
}

input AtomConnectWhere {
  node: AtomWhere!
}

input AtomCreateInput {
  api: AtomApiFieldInput
  id: ID!
  name: String!
  tags: AtomTagsFieldInput
  type: AtomType!
}

input AtomDeleteInput {
  api: AtomApiDeleteFieldInput
  tags: [AtomTagsDeleteFieldInput!]
}

input AtomDisconnectInput {
  api: AtomApiDisconnectFieldInput
  tags: [AtomTagsDisconnectFieldInput!]
}

type AtomEdge {
  cursor: String!
  node: Atom!
}

type AtomInterfaceTypeApiAggregationSelection {
  count: Int!
  node: AtomInterfaceTypeApiNodeAggregateSelection
}

type AtomInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomOnCreateInput {
  id: ID!
  name: String!
}

input AtomOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AtomSort objects to sort Atoms by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AtomSort!]
}

input AtomRelationInput {
  api: AtomApiCreateFieldInput
  tags: [AtomTagsCreateFieldInput!]
}

"""
Fields to sort Atoms by. The order in which sorts are applied is not guaranteed when specifying many fields in one AtomSort object.
"""
input AtomSort {
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

type AtomTagTagsAggregationSelection {
  count: Int!
  node: AtomTagTagsNodeAggregateSelection
}

type AtomTagTagsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomTagsAggregateInput {
  AND: [AtomTagsAggregateInput!]
  OR: [AtomTagsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomTagsNodeAggregationWhereInput
}

input AtomTagsConnectFieldInput {
  connect: [TagConnectInput!]
  where: TagConnectWhere
}

input AtomTagsConnectOrCreateFieldInput {
  onCreate: AtomTagsConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input AtomTagsConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type AtomTagsConnection {
  edges: [AtomTagsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomTagsConnectionSort {
  node: TagSort
}

input AtomTagsConnectionWhere {
  AND: [AtomTagsConnectionWhere!]
  OR: [AtomTagsConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input AtomTagsCreateFieldInput {
  node: TagCreateInput!
}

input AtomTagsDeleteFieldInput {
  delete: TagDeleteInput
  where: AtomTagsConnectionWhere
}

input AtomTagsDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: AtomTagsConnectionWhere
}

input AtomTagsFieldInput {
  connect: [AtomTagsConnectFieldInput!]
  connectOrCreate: [AtomTagsConnectOrCreateFieldInput!]
  create: [AtomTagsCreateFieldInput!]
}

input AtomTagsNodeAggregationWhereInput {
  AND: [AtomTagsNodeAggregationWhereInput!]
  OR: [AtomTagsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AtomTagsRelationship {
  cursor: String!
  node: Tag!
}

input AtomTagsUpdateConnectionInput {
  node: TagUpdateInput
}

input AtomTagsUpdateFieldInput {
  connect: [AtomTagsConnectFieldInput!]
  connectOrCreate: [AtomTagsConnectOrCreateFieldInput!]
  create: [AtomTagsCreateFieldInput!]
  delete: [AtomTagsDeleteFieldInput!]
  disconnect: [AtomTagsDisconnectFieldInput!]
  update: AtomTagsUpdateConnectionInput
  where: AtomTagsConnectionWhere
}

enum AtomType {
  AntDesignAffix
  AntDesignAlert
  AntDesignAnchor
  AntDesignAnchorLink
  AntDesignAutoComplete
  AntDesignAvatar
  AntDesignBackTop
  AntDesignBadge
  AntDesignBreadcrumb
  AntDesignBreadcrumbItem
  AntDesignButton
  AntDesignCalendar
  AntDesignCard
  AntDesignCardGrid
  AntDesignCardMeta
  AntDesignCarousel
  AntDesignCascader
  AntDesignCheckbox
  AntDesignCollapse
  AntDesignCollapsePanel
  AntDesignComment
  AntDesignConfigProvider
  AntDesignDatePicker
  AntDesignDescriptions
  AntDesignDescriptionsItem
  AntDesignDivider
  AntDesignDrawer
  AntDesignDropdown
  AntDesignEmpty
  AntDesignForm
  AntDesignFormItem
  AntDesignFormItemHook
  AntDesignFormList
  AntDesignGridCol
  AntDesignGridRow
  AntDesignIcon
  AntDesignImage
  AntDesignInput
  AntDesignInputNumber
  AntDesignLayout
  AntDesignLayoutContent
  AntDesignLayoutFooter
  AntDesignLayoutHeader
  AntDesignLayoutSider
  AntDesignList
  AntDesignListItem
  AntDesignListItemMeta
  AntDesignMapper
  AntDesignMentions
  AntDesignMentionsOption
  AntDesignMenu
  AntDesignMenuItem
  AntDesignMenuItemGroup
  AntDesignMenuSubMenu
  AntDesignModal
  AntDesignPageContainer
  AntDesignPageHeader
  AntDesignPagination
  AntDesignPopconfirm
  AntDesignPopover
  AntDesignProgress
  AntDesignProvider
  AntDesignRadio
  AntDesignRadioGroup
  AntDesignRate
  AntDesignRenderComponent
  AntDesignRenderContainer
  AntDesignResult
  AntDesignRglContainer
  AntDesignRglItem
  AntDesignRglResponsiveContainer
  AntDesignSelect
  AntDesignSelectOption
  AntDesignSkeleton
  AntDesignSlider
  AntDesignSpace
  AntDesignSpin
  AntDesignStatistic
  AntDesignSteps
  AntDesignStepsStep
  AntDesignSwitch
  AntDesignTable
  AntDesignTabs
  AntDesignTabsTabPane
  AntDesignTag
  AntDesignTimePicker
  AntDesignTimeline
  AntDesignTimelineItem
  AntDesignTooltip
  AntDesignTransfer
  AntDesignTree
  AntDesignTreeNode
  AntDesignTreeSelect
  AntDesignTypography
  AntDesignTypographyParagraph
  AntDesignTypographyText
  AntDesignTypographyTitle
  AntDesignUpload
  HookGraphqlMutation
  HookGraphqlQuery
  HookQueryConfig
  HookQueryLambda
  HookQueryPage
  HookQueryPages
  HookRecoilState
  HookRouter
  HtmlA
  HtmlArea
  HtmlAside
  HtmlAudio
  HtmlBase
  HtmlBr
  HtmlButton
  HtmlCanvas
  HtmlCode
  HtmlDList
  HtmlData
  HtmlDatalist
  HtmlDetails
  HtmlDialog
  HtmlDiv
  HtmlEm
  HtmlEmbed
  HtmlFieldset
  HtmlFont
  HtmlFooter
  HtmlForm
  HtmlFrame
  HtmlFrameset
  HtmlH1
  HtmlH2
  HtmlH3
  HtmlH4
  HtmlH5
  HtmlH6
  HtmlHead
  HtmlHeader
  HtmlHr
  HtmlI
  HtmlIframe
  HtmlImage
  HtmlInput
  HtmlLabel
  HtmlLegend
  HtmlLi
  HtmlLink
  HtmlMain
  HtmlMap
  HtmlMeta
  HtmlMeter
  HtmlNav
  HtmlOList
  HtmlObject
  HtmlOptgroup
  HtmlOption
  HtmlOutput
  HtmlP
  HtmlParam
  HtmlPicture
  HtmlPre
  HtmlProgress
  HtmlQuote
  HtmlS
  HtmlSection
  HtmlSelect
  HtmlSmall
  HtmlSource
  HtmlSpan
  HtmlStrong
  HtmlStyle
  HtmlSub
  HtmlSup
  HtmlTable
  HtmlTableCaption
  HtmlTableCell
  HtmlTableCol
  HtmlTableRow
  HtmlTemplate
  HtmlTextarea
  HtmlTime
  HtmlTitle
  HtmlTrack
  HtmlUList
  HtmlVideo
  MuiAccordion
  MuiAccordionActions
  MuiAccordionDetails
  MuiAccordionSummary
  MuiAlert
  MuiAlertTitle
  MuiAppBar
  MuiAutocomplete
  MuiAvatar
  MuiAvatarGroup
  MuiBackdrop
  MuiBadge
  MuiBadgeUnstyled
  MuiBottomNavigation
  MuiBottomNavigationAction
  MuiBox
  MuiBreadcrumbs
  MuiButton
  MuiButtonBase
  MuiButtonGroup
  MuiButtonUnstyled
  MuiCalendarPicker
  MuiCalendarPickerSkeleton
  MuiCard
  MuiCardActionArea
  MuiCardActions
  MuiCardContent
  MuiCardHeader
  MuiCardMedia
  MuiCheckbox
  MuiChip
  MuiCircularProgress
  MuiClickAwayListener
  MuiClockPicker
  MuiCollapse
  MuiContainer
  MuiCssBaseline
  MuiDataGrid
  MuiDatePicker
  MuiDateRangePicker
  MuiDateRangePickerDay
  MuiDateTimePicker
  MuiDesktopDatePicker
  MuiDesktopDateRangePicker
  MuiDesktopDateTimePicker
  MuiDesktopTimePicker
  MuiDialog
  MuiDialogActions
  MuiDialogContent
  MuiDialogContentText
  MuiDialogTitle
  MuiDivider
  MuiDrawer
  MuiFab
  MuiFade
  MuiFilledInput
  MuiFormControl
  MuiFormControlLabel
  MuiFormControlUnstyled
  MuiFormGroup
  MuiFormHelperText
  MuiFormLabel
  MuiGlobalStyles
  MuiGrid
  MuiGridColDef
  MuiGrow
  MuiHidden
  MuiIcon
  MuiIconButton
  MuiImageList
  MuiImageListItem
  MuiImageListItemBar
  MuiInput
  MuiInputAdornment
  MuiInputBase
  MuiInputLabel
  MuiLinearProgress
  MuiLink
  MuiList
  MuiListItem
  MuiListItemAvatar
  MuiListItemButton
  MuiListItemIcon
  MuiListItemSecondaryAction
  MuiListItemText
  MuiListSubheader
  MuiLoadingButton
  MuiMasonry
  MuiMasonryItem
  MuiMenu
  MuiMenuItem
  MuiMenuList
  MuiMobileDatePicker
  MuiMobileDateRangePicker
  MuiMobileDateTimePicker
  MuiMobileStepper
  MuiMobileTimePicker
  MuiModal
  MuiModalUnstyled
  MuiMonthPicker
  MuiNativeSelect
  MuiNoSsr
  MuiOutlinedInput
  MuiPagination
  MuiPaginationItem
  MuiPaper
  MuiPickersDay
  MuiPopover
  MuiPopper
  MuiPortal
  MuiRadio
  MuiRadioGroup
  MuiRating
  MuiScopedCssBaseline
  MuiSelect
  MuiSkeleton
  MuiSlide
  MuiSlider
  MuiSliderUnstyled
  MuiSnackbar
  MuiSnackbarContent
  MuiSpeedDial
  MuiSpeedDialAction
  MuiSpeedDialIcon
  MuiStack
  MuiStaticDatePicker
  MuiStaticDateRangePicker
  MuiStaticDateTimePicker
  MuiStaticTimePicker
  MuiStep
  MuiStepButton
  MuiStepConnector
  MuiStepContent
  MuiStepIcon
  MuiStepLabel
  MuiStepper
  MuiSvgIcon
  MuiSwipeableDrawer
  MuiSwitch
  MuiSwitchUnstyled
  MuiTab
  MuiTabContext
  MuiTabList
  MuiTabPanel
  MuiTabScrollButton
  MuiTable
  MuiTableBody
  MuiTableCell
  MuiTableContainer
  MuiTableFooter
  MuiTableHead
  MuiTablePagination
  MuiTableRow
  MuiTableSortLabel
  MuiTabs
  MuiTextField
  MuiTextareaAutosize
  MuiTimePicker
  MuiTimeline
  MuiTimelineConnector
  MuiTimelineContent
  MuiTimelineDot
  MuiTimelineItem
  MuiTimelineOppositeContent
  MuiTimelineSeparator
  MuiToggleButton
  MuiToggleButtonGroup
  MuiToolbar
  MuiTooltip
  MuiTreeItem
  MuiTreeView
  MuiTypography
  MuiUnstableTrapFocus
  MuiYearPicker
  MuiZoom
  Query
  ReactFragment
  State
  Text
  TextList
}

input AtomUniqueWhere {
  id: ID
  name: String
  type: AtomType
}

input AtomUpdateInput {
  api: AtomApiUpdateFieldInput
  id: ID
  name: String
  tags: [AtomTagsUpdateFieldInput!]
  type: AtomType
}

input AtomWhere {
  AND: [AtomWhere!]
  OR: [AtomWhere!]
  api: InterfaceTypeWhere
  apiAggregate: AtomApiAggregateInput
  apiConnection: AtomApiConnectionWhere
  apiConnection_NOT: AtomApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  tagsAggregate: AtomTagsAggregateInput
  tagsConnection_ALL: AtomTagsConnectionWhere
  tagsConnection_NONE: AtomTagsConnectionWhere
  tagsConnection_SINGLE: AtomTagsConnectionWhere
  tagsConnection_SOME: AtomTagsConnectionWhere

  """
  Return Atoms where all of the related Tags match this filter
  """
  tags_ALL: TagWhere

  """
  Return Atoms where none of the related Tags match this filter
  """
  tags_NONE: TagWhere

  """
  Return Atoms where one of the related Tags match this filter
  """
  tags_SINGLE: TagWhere

  """
  Return Atoms where some of the related Tags match this filter
  """
  tags_SOME: TagWhere
  type: AtomType
  type_IN: [AtomType!]
  type_NOT: AtomType
  type_NOT_IN: [AtomType!]
}

type AtomsConnection {
  edges: [AtomEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Component implements WithOwner {
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): ComponentInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentApiConnectionSort!]
    where: ComponentApiConnectionWhere
  ): ComponentApiConnection!
  descendantComponentIds: [ID!]!
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ComponentUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  rootElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  rootElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ComponentElementRootElementAggregationSelection
  rootElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentRootElementConnectionSort!]
    where: ComponentRootElementConnectionWhere
  ): ComponentRootElementConnection!
}

type ComponentAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ComponentApiAggregateInput {
  AND: [ComponentApiAggregateInput!]
  OR: [ComponentApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentApiNodeAggregationWhereInput
}

input ComponentApiConnectFieldInput {
  connect: InterfaceTypeConnectInput
  where: InterfaceTypeConnectWhere
}

input ComponentApiConnectOrCreateFieldInput {
  onCreate: ComponentApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input ComponentApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type ComponentApiConnection {
  edges: [ComponentApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentApiConnectionSort {
  node: InterfaceTypeSort
}

input ComponentApiConnectionWhere {
  AND: [ComponentApiConnectionWhere!]
  OR: [ComponentApiConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input ComponentApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input ComponentApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: ComponentApiConnectionWhere
}

input ComponentApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: ComponentApiConnectionWhere
}

input ComponentApiFieldInput {
  connect: ComponentApiConnectFieldInput
  connectOrCreate: ComponentApiConnectOrCreateFieldInput
  create: ComponentApiCreateFieldInput
}

input ComponentApiNodeAggregationWhereInput {
  AND: [ComponentApiNodeAggregationWhereInput!]
  OR: [ComponentApiNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ComponentApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input ComponentApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input ComponentApiUpdateFieldInput {
  connect: ComponentApiConnectFieldInput
  connectOrCreate: ComponentApiConnectOrCreateFieldInput
  create: ComponentApiCreateFieldInput
  delete: ComponentApiDeleteFieldInput
  disconnect: ComponentApiDisconnectFieldInput
  update: ComponentApiUpdateConnectionInput
  where: ComponentApiConnectionWhere
}

input ComponentConnectInput {
  api: ComponentApiConnectFieldInput
  owner: WithOwnerOwnerConnectFieldInput
  rootElement: ComponentRootElementConnectFieldInput
}

input ComponentConnectOrCreateInput {
  api: ComponentApiConnectOrCreateFieldInput
  owner: WithOwnerOwnerConnectOrCreateFieldInput
  rootElement: ComponentRootElementConnectOrCreateFieldInput
}

input ComponentConnectOrCreateWhere {
  node: ComponentUniqueWhere!
}

input ComponentConnectWhere {
  node: ComponentWhere!
}

input ComponentCreateInput {
  api: ComponentApiFieldInput
  id: ID!
  name: String!
  owner: WithOwnerOwnerFieldInput
  rootElement: ComponentRootElementFieldInput
}

input ComponentDeleteInput {
  api: ComponentApiDeleteFieldInput
  owner: WithOwnerOwnerDeleteFieldInput
  rootElement: ComponentRootElementDeleteFieldInput
}

input ComponentDisconnectInput {
  api: ComponentApiDisconnectFieldInput
  owner: WithOwnerOwnerDisconnectFieldInput
  rootElement: ComponentRootElementDisconnectFieldInput
}

type ComponentEdge {
  cursor: String!
  node: Component!
}

type ComponentElementRootElementAggregationSelection {
  count: Int!
  node: ComponentElementRootElementNodeAggregateSelection
}

type ComponentElementRootElementNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ComponentInterfaceTypeApiAggregationSelection {
  count: Int!
  node: ComponentInterfaceTypeApiNodeAggregateSelection
}

type ComponentInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ComponentOnCreateInput {
  id: ID!
  name: String!
}

input ComponentOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ComponentSort objects to sort Components by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ComponentSort!]
}

input ComponentOwnerAggregateInput {
  AND: [ComponentOwnerAggregateInput!]
  OR: [ComponentOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentOwnerNodeAggregationWhereInput
}

input ComponentOwnerNodeAggregationWhereInput {
  AND: [ComponentOwnerNodeAggregationWhereInput!]
  OR: [ComponentOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input ComponentRelationInput {
  api: ComponentApiCreateFieldInput
  owner: WithOwnerOwnerCreateFieldInput
  rootElement: ComponentRootElementCreateFieldInput
}

input ComponentRootElementAggregateInput {
  AND: [ComponentRootElementAggregateInput!]
  OR: [ComponentRootElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentRootElementNodeAggregationWhereInput
}

input ComponentRootElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input ComponentRootElementConnectOrCreateFieldInput {
  onCreate: ComponentRootElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ComponentRootElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ComponentRootElementConnection {
  edges: [ComponentRootElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentRootElementConnectionSort {
  node: ElementSort
}

input ComponentRootElementConnectionWhere {
  AND: [ComponentRootElementConnectionWhere!]
  OR: [ComponentRootElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input ComponentRootElementCreateFieldInput {
  node: ElementCreateInput!
}

input ComponentRootElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: ComponentRootElementConnectionWhere
}

input ComponentRootElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ComponentRootElementConnectionWhere
}

input ComponentRootElementFieldInput {
  connect: ComponentRootElementConnectFieldInput
  connectOrCreate: ComponentRootElementConnectOrCreateFieldInput
  create: ComponentRootElementCreateFieldInput
}

input ComponentRootElementNodeAggregationWhereInput {
  AND: [ComponentRootElementNodeAggregationWhereInput!]
  OR: [ComponentRootElementNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ComponentRootElementRelationship {
  cursor: String!
  node: Element!
}

input ComponentRootElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input ComponentRootElementUpdateFieldInput {
  connect: ComponentRootElementConnectFieldInput
  connectOrCreate: ComponentRootElementConnectOrCreateFieldInput
  create: ComponentRootElementCreateFieldInput
  delete: ComponentRootElementDeleteFieldInput
  disconnect: ComponentRootElementDisconnectFieldInput
  update: ComponentRootElementUpdateConnectionInput
  where: ComponentRootElementConnectionWhere
}

"""
Fields to sort Components by. The order in which sorts are applied is not guaranteed when specifying many fields in one ComponentSort object.
"""
input ComponentSort {
  id: SortDirection
  name: SortDirection
}

input ComponentUniqueWhere {
  id: ID
}

input ComponentUpdateInput {
  api: ComponentApiUpdateFieldInput
  id: ID
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  rootElement: ComponentRootElementUpdateFieldInput
}

type ComponentUserOwnerAggregationSelection {
  count: Int!
  node: ComponentUserOwnerNodeAggregateSelection
}

type ComponentUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ComponentWhere {
  AND: [ComponentWhere!]
  OR: [ComponentWhere!]
  api: InterfaceTypeWhere
  apiAggregate: ComponentApiAggregateInput
  apiConnection: ComponentApiConnectionWhere
  apiConnection_NOT: ComponentApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ComponentOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  rootElement: ElementWhere
  rootElementAggregate: ComponentRootElementAggregateInput
  rootElementConnection: ComponentRootElementConnectionWhere
  rootElementConnection_NOT: ComponentRootElementConnectionWhere
  rootElement_NOT: ElementWhere
}

type ComponentsConnection {
  edges: [ComponentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CreateActionTypesMutationResponse {
  actionTypes: [ActionType!]!
  info: CreateInfo!
}

type CreateAppTypesMutationResponse {
  appTypes: [AppType!]!
  info: CreateInfo!
}

type CreateAppsMutationResponse {
  apps: [App!]!
  info: CreateInfo!
}

type CreateArrayTypesMutationResponse {
  arrayTypes: [ArrayType!]!
  info: CreateInfo!
}

type CreateAtomsMutationResponse {
  atoms: [Atom!]!
  info: CreateInfo!
}

type CreateComponentsMutationResponse {
  components: [Component!]!
  info: CreateInfo!
}

type CreateCreateInfosMutationResponse {
  createInfos: [CreateInfo!]!
  info: CreateInfo!
}

type CreateCustomActionsMutationResponse {
  customActions: [CustomAction!]!
  info: CreateInfo!
}

type CreateElementTypesMutationResponse {
  elementTypes: [ElementType!]!
  info: CreateInfo!
}

type CreateElementsMutationResponse {
  elements: [Element!]!
  info: CreateInfo!
}

type CreateEnumTypeValuesMutationResponse {
  enumTypeValues: [EnumTypeValue!]!
  info: CreateInfo!
}

type CreateEnumTypesMutationResponse {
  enumTypes: [EnumType!]!
  info: CreateInfo!
}

type CreateHooksMutationResponse {
  hooks: [Hook!]!
  info: CreateInfo!
}

type CreateInfo {
  bookmark: String
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateInfoAggregateSelection {
  bookmark: StringAggregateSelectionNullable!
  count: Int!
  nodesCreated: IntAggregateSelectionNonNullable!
  relationshipsCreated: IntAggregateSelectionNonNullable!
}

input CreateInfoCreateInput {
  bookmark: String
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateInfoEdge {
  cursor: String!
  node: CreateInfo!
}

input CreateInfoOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CreateInfoSort objects to sort CreateInfos by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CreateInfoSort!]
}

"""
Fields to sort CreateInfos by. The order in which sorts are applied is not guaranteed when specifying many fields in one CreateInfoSort object.
"""
input CreateInfoSort {
  bookmark: SortDirection
  nodesCreated: SortDirection
  relationshipsCreated: SortDirection
}

input CreateInfoUpdateInput {
  bookmark: String
  nodesCreated: Int
  relationshipsCreated: Int
}

input CreateInfoWhere {
  AND: [CreateInfoWhere!]
  OR: [CreateInfoWhere!]
  bookmark: String
  bookmark_CONTAINS: String
  bookmark_ENDS_WITH: String
  bookmark_IN: [String]
  bookmark_NOT: String
  bookmark_NOT_CONTAINS: String
  bookmark_NOT_ENDS_WITH: String
  bookmark_NOT_IN: [String]
  bookmark_NOT_STARTS_WITH: String
  bookmark_STARTS_WITH: String
  nodesCreated: Int
  nodesCreated_GT: Int
  nodesCreated_GTE: Int
  nodesCreated_IN: [Int!]
  nodesCreated_LT: Int
  nodesCreated_LTE: Int
  nodesCreated_NOT: Int
  nodesCreated_NOT_IN: [Int!]
  relationshipsCreated: Int
  relationshipsCreated_GT: Int
  relationshipsCreated_GTE: Int
  relationshipsCreated_IN: [Int!]
  relationshipsCreated_LT: Int
  relationshipsCreated_LTE: Int
  relationshipsCreated_NOT: Int
  relationshipsCreated_NOT_IN: [Int!]
}

type CreateInfosConnection {
  edges: [CreateInfoEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CreateInterfaceTypesMutationResponse {
  info: CreateInfo!
  interfaceTypes: [InterfaceType!]!
}

type CreateLambdaTypesMutationResponse {
  info: CreateInfo!
  lambdaTypes: [LambdaType!]!
}

type CreateMonacoTypesMutationResponse {
  info: CreateInfo!
  monacoTypes: [MonacoType!]!
}

type CreatePageTypesMutationResponse {
  info: CreateInfo!
  pageTypes: [PageType!]!
}

type CreatePagesMutationResponse {
  info: CreateInfo!
  pages: [Page!]!
}

type CreatePipelineActionsMutationResponse {
  info: CreateInfo!
  pipelineActions: [PipelineAction!]!
}

type CreatePrimitiveTypesMutationResponse {
  info: CreateInfo!
  primitiveTypes: [PrimitiveType!]!
}

type CreatePropMapBindingsMutationResponse {
  info: CreateInfo!
  propMapBindings: [PropMapBinding!]!
}

type CreatePropsMutationResponse {
  info: CreateInfo!
  props: [Prop!]!
}

type CreateReactNodeTypesMutationResponse {
  info: CreateInfo!
  reactNodeTypes: [ReactNodeType!]!
}

type CreateRenderPropsTypesMutationResponse {
  info: CreateInfo!
  renderPropsTypes: [RenderPropsType!]!
}

type CreateResetDatabaseMutationResponsesMutationResponse {
  info: CreateInfo!
  resetDatabaseMutationResponses: [ResetDatabaseMutationResponse!]!
}

type CreateResourceActionsMutationResponse {
  info: CreateInfo!
  resourceActions: [ResourceAction!]!
}

type CreateResourcesMutationResponse {
  info: CreateInfo!
  resources: [Resource!]!
}

type CreateStoresMutationResponse {
  info: CreateInfo!
  stores: [Store!]!
}

type CreateTagGraphOptionsMutationResponse {
  info: CreateInfo!
  tagGraphOptions: [TagGraphOptions!]!
}

type CreateTagsMutationResponse {
  info: CreateInfo!
  tags: [Tag!]!
}

type CreateTypeReferencesMutationResponse {
  info: CreateInfo!
  typeReferences: [TypeReference!]!
}

type CreateUnionTypesMutationResponse {
  info: CreateInfo!
  unionTypes: [UnionType!]!
}

type CreateUsersMutationResponse {
  info: CreateInfo!
  users: [User!]!
}

type CustomAction implements ActionBase {
  """
  Code to run when action is triggered
  """
  code: String!
  id: ID!
  name: String!
  runOnInit: Boolean!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): CustomActionStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ActionBaseStoreConnectionSort!]
    where: ActionBaseStoreConnectionWhere
  ): ActionBaseStoreConnection!
  type: ActionKind!
}

type CustomActionAggregateSelection {
  code: StringAggregateSelectionNonNullable!
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CustomActionConnectInput {
  store: ActionBaseStoreConnectFieldInput
}

input CustomActionConnectOrCreateInput {
  store: ActionBaseStoreConnectOrCreateFieldInput
}

input CustomActionConnectOrCreateWhere {
  node: CustomActionUniqueWhere!
}

input CustomActionConnectWhere {
  node: CustomActionWhere!
}

input CustomActionCreateInput {
  code: String!
  id: ID!
  name: String!
  runOnInit: Boolean! = false
  store: ActionBaseStoreFieldInput
  type: ActionKind! = CustomAction
}

input CustomActionDeleteInput {
  store: ActionBaseStoreDeleteFieldInput
}

input CustomActionDisconnectInput {
  store: ActionBaseStoreDisconnectFieldInput
}

type CustomActionEdge {
  cursor: String!
  node: CustomAction!
}

input CustomActionOnCreateInput {
  code: String!
  id: ID!
  name: String!
  runOnInit: Boolean! = false
}

input CustomActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CustomActionSort objects to sort CustomActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CustomActionSort!]
}

input CustomActionRelationInput {
  store: ActionBaseStoreCreateFieldInput
}

"""
Fields to sort CustomActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one CustomActionSort object.
"""
input CustomActionSort {
  code: SortDirection
  id: SortDirection
  name: SortDirection
  runOnInit: SortDirection
  type: SortDirection
}

input CustomActionStoreAggregateInput {
  AND: [CustomActionStoreAggregateInput!]
  OR: [CustomActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CustomActionStoreNodeAggregationWhereInput
}

input CustomActionStoreNodeAggregationWhereInput {
  AND: [CustomActionStoreNodeAggregationWhereInput!]
  OR: [CustomActionStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type CustomActionStoreStoreAggregationSelection {
  count: Int!
  node: CustomActionStoreStoreNodeAggregateSelection
}

type CustomActionStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CustomActionUniqueWhere {
  id: ID
  name: String
}

input CustomActionUpdateInput {
  code: String
  id: ID
  name: String
  runOnInit: Boolean
  store: ActionBaseStoreUpdateFieldInput
}

input CustomActionWhere {
  AND: [CustomActionWhere!]
  OR: [CustomActionWhere!]
  code: String
  code_CONTAINS: String
  code_ENDS_WITH: String
  code_IN: [String!]
  code_NOT: String
  code_NOT_CONTAINS: String
  code_NOT_ENDS_WITH: String
  code_NOT_IN: [String!]
  code_NOT_STARTS_WITH: String
  code_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  runOnInit: Boolean
  runOnInit_NOT: Boolean
  store: StoreWhere
  storeAggregate: CustomActionStoreAggregateInput
  storeConnection: ActionBaseStoreConnectionWhere
  storeConnection_NOT: ActionBaseStoreConnectionWhere
  store_NOT: StoreWhere
  type: ActionKind
  type_IN: [ActionKind!]
  type_NOT: ActionKind
  type_NOT_IN: [ActionKind!]
}

type CustomActionsConnection {
  edges: [CustomActionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DeleteInfo {
  bookmark: String
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

type Element {
  app(directed: Boolean = true, options: AppOptions, where: AppWhere): App
  appAggregate(
    directed: Boolean = true
    where: AppWhere
  ): ElementAppAppAggregationSelection
  appConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementAppConnectionSort!]
    where: ElementAppConnectionWhere
  ): ElementAppConnection!
  atom(directed: Boolean = true, options: AtomOptions, where: AtomWhere): Atom
  atomAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): ElementAtomAtomAggregationSelection
  atomConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementAtomConnectionSort!]
    where: ElementAtomConnectionWhere
  ): ElementAtomConnection!
  children(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): [Element!]!
  childrenAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementChildrenAggregationSelection
  childrenConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementChildrenConnectionSort!]
    where: ElementChildrenConnectionWhere
  ): ElementChildrenConnection!
  component(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  componentAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): ElementComponentComponentAggregationSelection
  componentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementComponentConnectionSort!]
    where: ElementComponentConnectionWhere
  ): ElementComponentConnection!
  css: String
  hooks(
    directed: Boolean = true
    options: HookOptions
    where: HookWhere
  ): [Hook!]!
  hooksAggregate(
    directed: Boolean = true
    where: HookWhere
  ): ElementHookHooksAggregationSelection
  hooksConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementHooksConnectionSort!]
    where: ElementHooksConnectionWhere
  ): ElementHooksConnection!
  id: ID!
  instanceOfComponent(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  instanceOfComponentAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): ElementComponentInstanceOfComponentAggregationSelection
  instanceOfComponentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementInstanceOfComponentConnectionSort!]
    where: ElementInstanceOfComponentConnectionWhere
  ): ElementInstanceOfComponentConnection!
  name: String
  page(directed: Boolean = true, options: PageOptions, where: PageWhere): Page
  pageAggregate(
    directed: Boolean = true
    where: PageWhere
  ): ElementPagePageAggregationSelection
  pageConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPageConnectionSort!]
    where: ElementPageConnectionWhere
  ): ElementPageConnection!
  parentElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  parentElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementParentElementAggregationSelection
  parentElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementParentElementConnectionSort!]
    where: ElementParentElementConnectionWhere
  ): ElementParentElementConnection!
  propMapBindings(
    directed: Boolean = true
    options: PropMapBindingOptions
    where: PropMapBindingWhere
  ): [PropMapBinding!]!
  propMapBindingsAggregate(
    directed: Boolean = true
    where: PropMapBindingWhere
  ): ElementPropMapBindingPropMapBindingsAggregationSelection
  propMapBindingsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPropMapBindingsConnectionSort!]
    where: ElementPropMapBindingsConnectionWhere
  ): ElementPropMapBindingsConnection!
  propTransformationJs: String
  props(directed: Boolean = true, options: PropOptions, where: PropWhere): Prop
  propsAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ElementPropPropsAggregationSelection
  propsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPropsConnectionSort!]
    where: ElementPropsConnectionWhere
  ): ElementPropsConnection!
  renderForEachPropKey: String
  renderIfPropKey: String
}

type ElementAggregateSelection {
  count: Int!
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input ElementAppAggregateInput {
  AND: [ElementAppAggregateInput!]
  OR: [ElementAppAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementAppNodeAggregationWhereInput
}

type ElementAppAppAggregationSelection {
  count: Int!
  node: ElementAppAppNodeAggregateSelection
}

type ElementAppAppNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementAppConnectFieldInput {
  connect: AppConnectInput
  where: AppConnectWhere
}

input ElementAppConnectOrCreateFieldInput {
  onCreate: ElementAppConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input ElementAppConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type ElementAppConnection {
  edges: [ElementAppRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementAppConnectionSort {
  node: AppSort
}

input ElementAppConnectionWhere {
  AND: [ElementAppConnectionWhere!]
  OR: [ElementAppConnectionWhere!]
  node: AppWhere
  node_NOT: AppWhere
}

input ElementAppCreateFieldInput {
  node: AppCreateInput!
}

input ElementAppDeleteFieldInput {
  delete: AppDeleteInput
  where: ElementAppConnectionWhere
}

input ElementAppDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: ElementAppConnectionWhere
}

input ElementAppFieldInput {
  connect: ElementAppConnectFieldInput
  connectOrCreate: ElementAppConnectOrCreateFieldInput
  create: ElementAppCreateFieldInput
}

input ElementAppNodeAggregationWhereInput {
  AND: [ElementAppNodeAggregationWhereInput!]
  OR: [ElementAppNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementAppRelationship {
  cursor: String!
  node: App!
}

input ElementAppUpdateConnectionInput {
  node: AppUpdateInput
}

input ElementAppUpdateFieldInput {
  connect: ElementAppConnectFieldInput
  connectOrCreate: ElementAppConnectOrCreateFieldInput
  create: ElementAppCreateFieldInput
  delete: ElementAppDeleteFieldInput
  disconnect: ElementAppDisconnectFieldInput
  update: ElementAppUpdateConnectionInput
  where: ElementAppConnectionWhere
}

input ElementAtomAggregateInput {
  AND: [ElementAtomAggregateInput!]
  OR: [ElementAtomAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementAtomNodeAggregationWhereInput
}

type ElementAtomAtomAggregationSelection {
  count: Int!
  node: ElementAtomAtomNodeAggregateSelection
}

type ElementAtomAtomNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementAtomConnectFieldInput {
  connect: AtomConnectInput
  where: AtomConnectWhere
}

input ElementAtomConnectOrCreateFieldInput {
  onCreate: ElementAtomConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input ElementAtomConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type ElementAtomConnection {
  edges: [ElementAtomRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementAtomConnectionSort {
  node: AtomSort
}

input ElementAtomConnectionWhere {
  AND: [ElementAtomConnectionWhere!]
  OR: [ElementAtomConnectionWhere!]
  node: AtomWhere
  node_NOT: AtomWhere
}

input ElementAtomCreateFieldInput {
  node: AtomCreateInput!
}

input ElementAtomDeleteFieldInput {
  delete: AtomDeleteInput
  where: ElementAtomConnectionWhere
}

input ElementAtomDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: ElementAtomConnectionWhere
}

input ElementAtomFieldInput {
  connect: ElementAtomConnectFieldInput
  connectOrCreate: ElementAtomConnectOrCreateFieldInput
  create: ElementAtomCreateFieldInput
}

input ElementAtomNodeAggregationWhereInput {
  AND: [ElementAtomNodeAggregationWhereInput!]
  OR: [ElementAtomNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementAtomRelationship {
  cursor: String!
  node: Atom!
}

input ElementAtomUpdateConnectionInput {
  node: AtomUpdateInput
}

input ElementAtomUpdateFieldInput {
  connect: ElementAtomConnectFieldInput
  connectOrCreate: ElementAtomConnectOrCreateFieldInput
  create: ElementAtomCreateFieldInput
  delete: ElementAtomDeleteFieldInput
  disconnect: ElementAtomDisconnectFieldInput
  update: ElementAtomUpdateConnectionInput
  where: ElementAtomConnectionWhere
}

input ElementChildrenAggregateInput {
  AND: [ElementChildrenAggregateInput!]
  OR: [ElementChildrenAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ElementChildrenEdgeAggregationWhereInput
  node: ElementChildrenNodeAggregationWhereInput
}

input ElementChildrenConnectFieldInput {
  connect: [ElementConnectInput!]
  edge: ParentOfElementCreateInput
  where: ElementConnectWhere
}

input ElementChildrenConnectOrCreateFieldInput {
  onCreate: ElementChildrenConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementChildrenConnectOrCreateFieldInputOnCreate {
  edge: ParentOfElementCreateInput
  node: ElementOnCreateInput!
}

type ElementChildrenConnection {
  edges: [ElementChildrenRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementChildrenConnectionSort {
  edge: ParentOfElementSort
  node: ElementSort
}

input ElementChildrenConnectionWhere {
  AND: [ElementChildrenConnectionWhere!]
  OR: [ElementChildrenConnectionWhere!]
  edge: ParentOfElementWhere
  edge_NOT: ParentOfElementWhere
  node: ElementWhere
  node_NOT: ElementWhere
}

input ElementChildrenCreateFieldInput {
  edge: ParentOfElementCreateInput
  node: ElementCreateInput!
}

input ElementChildrenDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementChildrenConnectionWhere
}

input ElementChildrenDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementChildrenConnectionWhere
}

input ElementChildrenEdgeAggregationWhereInput {
  AND: [ElementChildrenEdgeAggregationWhereInput!]
  OR: [ElementChildrenEdgeAggregationWhereInput!]
  order_AVERAGE_EQUAL: Float
  order_AVERAGE_GT: Float
  order_AVERAGE_GTE: Float
  order_AVERAGE_LT: Float
  order_AVERAGE_LTE: Float
  order_EQUAL: Int
  order_GT: Int
  order_GTE: Int
  order_LT: Int
  order_LTE: Int
  order_MAX_EQUAL: Int
  order_MAX_GT: Int
  order_MAX_GTE: Int
  order_MAX_LT: Int
  order_MAX_LTE: Int
  order_MIN_EQUAL: Int
  order_MIN_GT: Int
  order_MIN_GTE: Int
  order_MIN_LT: Int
  order_MIN_LTE: Int
  order_SUM_EQUAL: Int
  order_SUM_GT: Int
  order_SUM_GTE: Int
  order_SUM_LT: Int
  order_SUM_LTE: Int
}

input ElementChildrenFieldInput {
  connect: [ElementChildrenConnectFieldInput!]
  connectOrCreate: [ElementChildrenConnectOrCreateFieldInput!]
  create: [ElementChildrenCreateFieldInput!]
}

input ElementChildrenNodeAggregationWhereInput {
  AND: [ElementChildrenNodeAggregationWhereInput!]
  OR: [ElementChildrenNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ElementChildrenRelationship implements ParentOfElement {
  cursor: String!
  node: Element!
  order: Int
}

input ElementChildrenUpdateConnectionInput {
  edge: ParentOfElementUpdateInput
  node: ElementUpdateInput
}

input ElementChildrenUpdateFieldInput {
  connect: [ElementChildrenConnectFieldInput!]
  connectOrCreate: [ElementChildrenConnectOrCreateFieldInput!]
  create: [ElementChildrenCreateFieldInput!]
  delete: [ElementChildrenDeleteFieldInput!]
  disconnect: [ElementChildrenDisconnectFieldInput!]
  update: ElementChildrenUpdateConnectionInput
  where: ElementChildrenConnectionWhere
}

input ElementComponentAggregateInput {
  AND: [ElementComponentAggregateInput!]
  OR: [ElementComponentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementComponentNodeAggregationWhereInput
}

type ElementComponentComponentAggregationSelection {
  count: Int!
  node: ElementComponentComponentNodeAggregateSelection
}

type ElementComponentComponentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementComponentConnectFieldInput {
  connect: ComponentConnectInput
  where: ComponentConnectWhere
}

input ElementComponentConnectOrCreateFieldInput {
  onCreate: ElementComponentConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input ElementComponentConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type ElementComponentConnection {
  edges: [ElementComponentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementComponentConnectionSort {
  node: ComponentSort
}

input ElementComponentConnectionWhere {
  AND: [ElementComponentConnectionWhere!]
  OR: [ElementComponentConnectionWhere!]
  node: ComponentWhere
  node_NOT: ComponentWhere
}

input ElementComponentCreateFieldInput {
  node: ComponentCreateInput!
}

input ElementComponentDeleteFieldInput {
  delete: ComponentDeleteInput
  where: ElementComponentConnectionWhere
}

input ElementComponentDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: ElementComponentConnectionWhere
}

input ElementComponentFieldInput {
  connect: ElementComponentConnectFieldInput
  connectOrCreate: ElementComponentConnectOrCreateFieldInput
  create: ElementComponentCreateFieldInput
}

type ElementComponentInstanceOfComponentAggregationSelection {
  count: Int!
  node: ElementComponentInstanceOfComponentNodeAggregateSelection
}

type ElementComponentInstanceOfComponentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementComponentNodeAggregationWhereInput {
  AND: [ElementComponentNodeAggregationWhereInput!]
  OR: [ElementComponentNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementComponentRelationship {
  cursor: String!
  node: Component!
}

input ElementComponentUpdateConnectionInput {
  node: ComponentUpdateInput
}

input ElementComponentUpdateFieldInput {
  connect: ElementComponentConnectFieldInput
  connectOrCreate: ElementComponentConnectOrCreateFieldInput
  create: ElementComponentCreateFieldInput
  delete: ElementComponentDeleteFieldInput
  disconnect: ElementComponentDisconnectFieldInput
  update: ElementComponentUpdateConnectionInput
  where: ElementComponentConnectionWhere
}

input ElementConnectInput {
  app: ElementAppConnectFieldInput
  atom: ElementAtomConnectFieldInput
  children: [ElementChildrenConnectFieldInput!]
  component: ElementComponentConnectFieldInput
  hooks: [ElementHooksConnectFieldInput!]
  instanceOfComponent: ElementInstanceOfComponentConnectFieldInput
  page: ElementPageConnectFieldInput
  parentElement: ElementParentElementConnectFieldInput
  propMapBindings: [ElementPropMapBindingsConnectFieldInput!]
  props: ElementPropsConnectFieldInput
}

input ElementConnectOrCreateInput {
  app: ElementAppConnectOrCreateFieldInput
  atom: ElementAtomConnectOrCreateFieldInput
  children: [ElementChildrenConnectOrCreateFieldInput!]
  component: ElementComponentConnectOrCreateFieldInput
  hooks: [ElementHooksConnectOrCreateFieldInput!]
  instanceOfComponent: ElementInstanceOfComponentConnectOrCreateFieldInput
  page: ElementPageConnectOrCreateFieldInput
  parentElement: ElementParentElementConnectOrCreateFieldInput
  propMapBindings: [ElementPropMapBindingsConnectOrCreateFieldInput!]
  props: ElementPropsConnectOrCreateFieldInput
}

input ElementConnectOrCreateWhere {
  node: ElementUniqueWhere!
}

input ElementConnectWhere {
  node: ElementWhere!
}

input ElementCreateInput {
  app: ElementAppFieldInput
  atom: ElementAtomFieldInput
  children: ElementChildrenFieldInput
  component: ElementComponentFieldInput
  css: String
  hooks: ElementHooksFieldInput
  id: ID!
  instanceOfComponent: ElementInstanceOfComponentFieldInput
  name: String
  page: ElementPageFieldInput
  parentElement: ElementParentElementFieldInput
  propMapBindings: ElementPropMapBindingsFieldInput
  propTransformationJs: String
  props: ElementPropsFieldInput
  renderForEachPropKey: String
  renderIfPropKey: String
}

input ElementDeleteInput {
  app: ElementAppDeleteFieldInput
  atom: ElementAtomDeleteFieldInput
  children: [ElementChildrenDeleteFieldInput!]
  component: ElementComponentDeleteFieldInput
  hooks: [ElementHooksDeleteFieldInput!]
  instanceOfComponent: ElementInstanceOfComponentDeleteFieldInput
  page: ElementPageDeleteFieldInput
  parentElement: ElementParentElementDeleteFieldInput
  propMapBindings: [ElementPropMapBindingsDeleteFieldInput!]
  props: ElementPropsDeleteFieldInput
}

input ElementDisconnectInput {
  app: ElementAppDisconnectFieldInput
  atom: ElementAtomDisconnectFieldInput
  children: [ElementChildrenDisconnectFieldInput!]
  component: ElementComponentDisconnectFieldInput
  hooks: [ElementHooksDisconnectFieldInput!]
  instanceOfComponent: ElementInstanceOfComponentDisconnectFieldInput
  page: ElementPageDisconnectFieldInput
  parentElement: ElementParentElementDisconnectFieldInput
  propMapBindings: [ElementPropMapBindingsDisconnectFieldInput!]
  props: ElementPropsDisconnectFieldInput
}

type ElementEdge {
  cursor: String!
  node: Element!
}

type ElementElementChildrenAggregationSelection {
  count: Int!
  edge: ElementElementChildrenEdgeAggregateSelection
  node: ElementElementChildrenNodeAggregateSelection
}

type ElementElementChildrenEdgeAggregateSelection {
  order: IntAggregateSelectionNullable!
}

type ElementElementChildrenNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ElementElementParentElementAggregationSelection {
  count: Int!
  edge: ElementElementParentElementEdgeAggregateSelection
  node: ElementElementParentElementNodeAggregateSelection
}

type ElementElementParentElementEdgeAggregateSelection {
  order: IntAggregateSelectionNullable!
}

type ElementElementParentElementNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ElementGraph {
  descendants: [ID!]!
  id: ID!
}

input ElementGraphInput {
  rootId: String!
}

type ElementHookHooksAggregationSelection {
  count: Int!
  node: ElementHookHooksNodeAggregateSelection
}

type ElementHookHooksNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
}

input ElementHooksAggregateInput {
  AND: [ElementHooksAggregateInput!]
  OR: [ElementHooksAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementHooksNodeAggregationWhereInput
}

input ElementHooksConnectFieldInput {
  connect: [HookConnectInput!]
  where: HookConnectWhere
}

input ElementHooksConnectOrCreateFieldInput {
  onCreate: ElementHooksConnectOrCreateFieldInputOnCreate!
  where: HookConnectOrCreateWhere!
}

input ElementHooksConnectOrCreateFieldInputOnCreate {
  node: HookOnCreateInput!
}

type ElementHooksConnection {
  edges: [ElementHooksRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementHooksConnectionSort {
  node: HookSort
}

input ElementHooksConnectionWhere {
  AND: [ElementHooksConnectionWhere!]
  OR: [ElementHooksConnectionWhere!]
  node: HookWhere
  node_NOT: HookWhere
}

input ElementHooksCreateFieldInput {
  node: HookCreateInput!
}

input ElementHooksDeleteFieldInput {
  delete: HookDeleteInput
  where: ElementHooksConnectionWhere
}

input ElementHooksDisconnectFieldInput {
  disconnect: HookDisconnectInput
  where: ElementHooksConnectionWhere
}

input ElementHooksFieldInput {
  connect: [ElementHooksConnectFieldInput!]
  connectOrCreate: [ElementHooksConnectOrCreateFieldInput!]
  create: [ElementHooksCreateFieldInput!]
}

input ElementHooksNodeAggregationWhereInput {
  AND: [ElementHooksNodeAggregationWhereInput!]
  OR: [ElementHooksNodeAggregationWhereInput!]
  id_EQUAL: ID
}

type ElementHooksRelationship {
  cursor: String!
  node: Hook!
}

input ElementHooksUpdateConnectionInput {
  node: HookUpdateInput
}

input ElementHooksUpdateFieldInput {
  connect: [ElementHooksConnectFieldInput!]
  connectOrCreate: [ElementHooksConnectOrCreateFieldInput!]
  create: [ElementHooksCreateFieldInput!]
  delete: [ElementHooksDeleteFieldInput!]
  disconnect: [ElementHooksDisconnectFieldInput!]
  update: ElementHooksUpdateConnectionInput
  where: ElementHooksConnectionWhere
}

input ElementInstanceOfComponentAggregateInput {
  AND: [ElementInstanceOfComponentAggregateInput!]
  OR: [ElementInstanceOfComponentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementInstanceOfComponentNodeAggregationWhereInput
}

input ElementInstanceOfComponentConnectFieldInput {
  connect: ComponentConnectInput
  where: ComponentConnectWhere
}

input ElementInstanceOfComponentConnectOrCreateFieldInput {
  onCreate: ElementInstanceOfComponentConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input ElementInstanceOfComponentConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type ElementInstanceOfComponentConnection {
  edges: [ElementInstanceOfComponentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementInstanceOfComponentConnectionSort {
  node: ComponentSort
}

input ElementInstanceOfComponentConnectionWhere {
  AND: [ElementInstanceOfComponentConnectionWhere!]
  OR: [ElementInstanceOfComponentConnectionWhere!]
  node: ComponentWhere
  node_NOT: ComponentWhere
}

input ElementInstanceOfComponentCreateFieldInput {
  node: ComponentCreateInput!
}

input ElementInstanceOfComponentDeleteFieldInput {
  delete: ComponentDeleteInput
  where: ElementInstanceOfComponentConnectionWhere
}

input ElementInstanceOfComponentDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: ElementInstanceOfComponentConnectionWhere
}

input ElementInstanceOfComponentFieldInput {
  connect: ElementInstanceOfComponentConnectFieldInput
  connectOrCreate: ElementInstanceOfComponentConnectOrCreateFieldInput
  create: ElementInstanceOfComponentCreateFieldInput
}

input ElementInstanceOfComponentNodeAggregationWhereInput {
  AND: [ElementInstanceOfComponentNodeAggregationWhereInput!]
  OR: [ElementInstanceOfComponentNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementInstanceOfComponentRelationship {
  cursor: String!
  node: Component!
}

input ElementInstanceOfComponentUpdateConnectionInput {
  node: ComponentUpdateInput
}

input ElementInstanceOfComponentUpdateFieldInput {
  connect: ElementInstanceOfComponentConnectFieldInput
  connectOrCreate: ElementInstanceOfComponentConnectOrCreateFieldInput
  create: ElementInstanceOfComponentCreateFieldInput
  delete: ElementInstanceOfComponentDeleteFieldInput
  disconnect: ElementInstanceOfComponentDisconnectFieldInput
  update: ElementInstanceOfComponentUpdateConnectionInput
  where: ElementInstanceOfComponentConnectionWhere
}

input ElementOnCreateInput {
  css: String
  id: ID!
  name: String
  propTransformationJs: String
  renderForEachPropKey: String
  renderIfPropKey: String
}

input ElementOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ElementSort objects to sort Elements by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ElementSort!]
}

input ElementPageAggregateInput {
  AND: [ElementPageAggregateInput!]
  OR: [ElementPageAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPageNodeAggregationWhereInput
}

input ElementPageConnectFieldInput {
  connect: PageConnectInput
  where: PageConnectWhere
}

input ElementPageConnectOrCreateFieldInput {
  onCreate: ElementPageConnectOrCreateFieldInputOnCreate!
  where: PageConnectOrCreateWhere!
}

input ElementPageConnectOrCreateFieldInputOnCreate {
  node: PageOnCreateInput!
}

type ElementPageConnection {
  edges: [ElementPageRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPageConnectionSort {
  node: PageSort
}

input ElementPageConnectionWhere {
  AND: [ElementPageConnectionWhere!]
  OR: [ElementPageConnectionWhere!]
  node: PageWhere
  node_NOT: PageWhere
}

input ElementPageCreateFieldInput {
  node: PageCreateInput!
}

input ElementPageDeleteFieldInput {
  delete: PageDeleteInput
  where: ElementPageConnectionWhere
}

input ElementPageDisconnectFieldInput {
  disconnect: PageDisconnectInput
  where: ElementPageConnectionWhere
}

input ElementPageFieldInput {
  connect: ElementPageConnectFieldInput
  connectOrCreate: ElementPageConnectOrCreateFieldInput
  create: ElementPageCreateFieldInput
}

input ElementPageNodeAggregationWhereInput {
  AND: [ElementPageNodeAggregationWhereInput!]
  OR: [ElementPageNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementPagePageAggregationSelection {
  count: Int!
  node: ElementPagePageNodeAggregateSelection
}

type ElementPagePageNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type ElementPageRelationship {
  cursor: String!
  node: Page!
}

input ElementPageUpdateConnectionInput {
  node: PageUpdateInput
}

input ElementPageUpdateFieldInput {
  connect: ElementPageConnectFieldInput
  connectOrCreate: ElementPageConnectOrCreateFieldInput
  create: ElementPageCreateFieldInput
  delete: ElementPageDeleteFieldInput
  disconnect: ElementPageDisconnectFieldInput
  update: ElementPageUpdateConnectionInput
  where: ElementPageConnectionWhere
}

input ElementParentElementAggregateInput {
  AND: [ElementParentElementAggregateInput!]
  OR: [ElementParentElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ElementParentElementEdgeAggregationWhereInput
  node: ElementParentElementNodeAggregationWhereInput
}

input ElementParentElementConnectFieldInput {
  connect: ElementConnectInput
  edge: ParentOfElementCreateInput
  where: ElementConnectWhere
}

input ElementParentElementConnectOrCreateFieldInput {
  onCreate: ElementParentElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementParentElementConnectOrCreateFieldInputOnCreate {
  edge: ParentOfElementCreateInput
  node: ElementOnCreateInput!
}

type ElementParentElementConnection {
  edges: [ElementParentElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementParentElementConnectionSort {
  edge: ParentOfElementSort
  node: ElementSort
}

input ElementParentElementConnectionWhere {
  AND: [ElementParentElementConnectionWhere!]
  OR: [ElementParentElementConnectionWhere!]
  edge: ParentOfElementWhere
  edge_NOT: ParentOfElementWhere
  node: ElementWhere
  node_NOT: ElementWhere
}

input ElementParentElementCreateFieldInput {
  edge: ParentOfElementCreateInput
  node: ElementCreateInput!
}

input ElementParentElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementParentElementConnectionWhere
}

input ElementParentElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementParentElementConnectionWhere
}

input ElementParentElementEdgeAggregationWhereInput {
  AND: [ElementParentElementEdgeAggregationWhereInput!]
  OR: [ElementParentElementEdgeAggregationWhereInput!]
  order_AVERAGE_EQUAL: Float
  order_AVERAGE_GT: Float
  order_AVERAGE_GTE: Float
  order_AVERAGE_LT: Float
  order_AVERAGE_LTE: Float
  order_EQUAL: Int
  order_GT: Int
  order_GTE: Int
  order_LT: Int
  order_LTE: Int
  order_MAX_EQUAL: Int
  order_MAX_GT: Int
  order_MAX_GTE: Int
  order_MAX_LT: Int
  order_MAX_LTE: Int
  order_MIN_EQUAL: Int
  order_MIN_GT: Int
  order_MIN_GTE: Int
  order_MIN_LT: Int
  order_MIN_LTE: Int
  order_SUM_EQUAL: Int
  order_SUM_GT: Int
  order_SUM_GTE: Int
  order_SUM_LT: Int
  order_SUM_LTE: Int
}

input ElementParentElementFieldInput {
  connect: ElementParentElementConnectFieldInput
  connectOrCreate: ElementParentElementConnectOrCreateFieldInput
  create: ElementParentElementCreateFieldInput
}

input ElementParentElementNodeAggregationWhereInput {
  AND: [ElementParentElementNodeAggregationWhereInput!]
  OR: [ElementParentElementNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ElementParentElementRelationship implements ParentOfElement {
  cursor: String!
  node: Element!
  order: Int
}

input ElementParentElementUpdateConnectionInput {
  edge: ParentOfElementUpdateInput
  node: ElementUpdateInput
}

input ElementParentElementUpdateFieldInput {
  connect: ElementParentElementConnectFieldInput
  connectOrCreate: ElementParentElementConnectOrCreateFieldInput
  create: ElementParentElementCreateFieldInput
  delete: ElementParentElementDeleteFieldInput
  disconnect: ElementParentElementDisconnectFieldInput
  update: ElementParentElementUpdateConnectionInput
  where: ElementParentElementConnectionWhere
}

type ElementPropMapBindingPropMapBindingsAggregationSelection {
  count: Int!
  node: ElementPropMapBindingPropMapBindingsNodeAggregateSelection
}

type ElementPropMapBindingPropMapBindingsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  sourceKey: StringAggregateSelectionNonNullable!
  targetKey: StringAggregateSelectionNonNullable!
}

input ElementPropMapBindingsAggregateInput {
  AND: [ElementPropMapBindingsAggregateInput!]
  OR: [ElementPropMapBindingsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPropMapBindingsNodeAggregationWhereInput
}

input ElementPropMapBindingsConnectFieldInput {
  connect: [PropMapBindingConnectInput!]
  where: PropMapBindingConnectWhere
}

input ElementPropMapBindingsConnectOrCreateFieldInput {
  onCreate: ElementPropMapBindingsConnectOrCreateFieldInputOnCreate!
  where: PropMapBindingConnectOrCreateWhere!
}

input ElementPropMapBindingsConnectOrCreateFieldInputOnCreate {
  node: PropMapBindingOnCreateInput!
}

type ElementPropMapBindingsConnection {
  edges: [ElementPropMapBindingsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPropMapBindingsConnectionSort {
  node: PropMapBindingSort
}

input ElementPropMapBindingsConnectionWhere {
  AND: [ElementPropMapBindingsConnectionWhere!]
  OR: [ElementPropMapBindingsConnectionWhere!]
  node: PropMapBindingWhere
  node_NOT: PropMapBindingWhere
}

input ElementPropMapBindingsCreateFieldInput {
  node: PropMapBindingCreateInput!
}

input ElementPropMapBindingsDeleteFieldInput {
  delete: PropMapBindingDeleteInput
  where: ElementPropMapBindingsConnectionWhere
}

input ElementPropMapBindingsDisconnectFieldInput {
  disconnect: PropMapBindingDisconnectInput
  where: ElementPropMapBindingsConnectionWhere
}

input ElementPropMapBindingsFieldInput {
  connect: [ElementPropMapBindingsConnectFieldInput!]
  connectOrCreate: [ElementPropMapBindingsConnectOrCreateFieldInput!]
  create: [ElementPropMapBindingsCreateFieldInput!]
}

input ElementPropMapBindingsNodeAggregationWhereInput {
  AND: [ElementPropMapBindingsNodeAggregationWhereInput!]
  OR: [ElementPropMapBindingsNodeAggregationWhereInput!]
  id_EQUAL: ID
  sourceKey_AVERAGE_EQUAL: Float
  sourceKey_AVERAGE_GT: Float
  sourceKey_AVERAGE_GTE: Float
  sourceKey_AVERAGE_LT: Float
  sourceKey_AVERAGE_LTE: Float
  sourceKey_EQUAL: String
  sourceKey_GT: Int
  sourceKey_GTE: Int
  sourceKey_LONGEST_EQUAL: Int
  sourceKey_LONGEST_GT: Int
  sourceKey_LONGEST_GTE: Int
  sourceKey_LONGEST_LT: Int
  sourceKey_LONGEST_LTE: Int
  sourceKey_LT: Int
  sourceKey_LTE: Int
  sourceKey_SHORTEST_EQUAL: Int
  sourceKey_SHORTEST_GT: Int
  sourceKey_SHORTEST_GTE: Int
  sourceKey_SHORTEST_LT: Int
  sourceKey_SHORTEST_LTE: Int
  targetKey_AVERAGE_EQUAL: Float
  targetKey_AVERAGE_GT: Float
  targetKey_AVERAGE_GTE: Float
  targetKey_AVERAGE_LT: Float
  targetKey_AVERAGE_LTE: Float
  targetKey_EQUAL: String
  targetKey_GT: Int
  targetKey_GTE: Int
  targetKey_LONGEST_EQUAL: Int
  targetKey_LONGEST_GT: Int
  targetKey_LONGEST_GTE: Int
  targetKey_LONGEST_LT: Int
  targetKey_LONGEST_LTE: Int
  targetKey_LT: Int
  targetKey_LTE: Int
  targetKey_SHORTEST_EQUAL: Int
  targetKey_SHORTEST_GT: Int
  targetKey_SHORTEST_GTE: Int
  targetKey_SHORTEST_LT: Int
  targetKey_SHORTEST_LTE: Int
}

type ElementPropMapBindingsRelationship {
  cursor: String!
  node: PropMapBinding!
}

input ElementPropMapBindingsUpdateConnectionInput {
  node: PropMapBindingUpdateInput
}

input ElementPropMapBindingsUpdateFieldInput {
  connect: [ElementPropMapBindingsConnectFieldInput!]
  connectOrCreate: [ElementPropMapBindingsConnectOrCreateFieldInput!]
  create: [ElementPropMapBindingsCreateFieldInput!]
  delete: [ElementPropMapBindingsDeleteFieldInput!]
  disconnect: [ElementPropMapBindingsDisconnectFieldInput!]
  update: ElementPropMapBindingsUpdateConnectionInput
  where: ElementPropMapBindingsConnectionWhere
}

type ElementPropPropsAggregationSelection {
  count: Int!
  node: ElementPropPropsNodeAggregateSelection
}

type ElementPropPropsNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ElementPropsAggregateInput {
  AND: [ElementPropsAggregateInput!]
  OR: [ElementPropsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPropsNodeAggregationWhereInput
}

input ElementPropsConnectFieldInput {
  where: PropConnectWhere
}

input ElementPropsConnectOrCreateFieldInput {
  onCreate: ElementPropsConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ElementPropsConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ElementPropsConnection {
  edges: [ElementPropsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPropsConnectionSort {
  node: PropSort
}

input ElementPropsConnectionWhere {
  AND: [ElementPropsConnectionWhere!]
  OR: [ElementPropsConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input ElementPropsCreateFieldInput {
  node: PropCreateInput!
}

input ElementPropsDeleteFieldInput {
  where: ElementPropsConnectionWhere
}

input ElementPropsDisconnectFieldInput {
  where: ElementPropsConnectionWhere
}

input ElementPropsFieldInput {
  connect: ElementPropsConnectFieldInput
  connectOrCreate: ElementPropsConnectOrCreateFieldInput
  create: ElementPropsCreateFieldInput
}

input ElementPropsNodeAggregationWhereInput {
  AND: [ElementPropsNodeAggregationWhereInput!]
  OR: [ElementPropsNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type ElementPropsRelationship {
  cursor: String!
  node: Prop!
}

input ElementPropsUpdateConnectionInput {
  node: PropUpdateInput
}

input ElementPropsUpdateFieldInput {
  connect: ElementPropsConnectFieldInput
  connectOrCreate: ElementPropsConnectOrCreateFieldInput
  create: ElementPropsCreateFieldInput
  delete: ElementPropsDeleteFieldInput
  disconnect: ElementPropsDisconnectFieldInput
  update: ElementPropsUpdateConnectionInput
  where: ElementPropsConnectionWhere
}

input ElementRelationInput {
  app: ElementAppCreateFieldInput
  atom: ElementAtomCreateFieldInput
  children: [ElementChildrenCreateFieldInput!]
  component: ElementComponentCreateFieldInput
  hooks: [ElementHooksCreateFieldInput!]
  instanceOfComponent: ElementInstanceOfComponentCreateFieldInput
  page: ElementPageCreateFieldInput
  parentElement: ElementParentElementCreateFieldInput
  propMapBindings: [ElementPropMapBindingsCreateFieldInput!]
  props: ElementPropsCreateFieldInput
}

"""
Fields to sort Elements by. The order in which sorts are applied is not guaranteed when specifying many fields in one ElementSort object.
"""
input ElementSort {
  css: SortDirection
  id: SortDirection
  name: SortDirection
  propTransformationJs: SortDirection
  renderForEachPropKey: SortDirection
  renderIfPropKey: SortDirection
}

"""
Allows picking an element from the current tree
Is passed to the rendered element as a React node
Prop values for this type have the shape of TypedValue in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropsType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNod' value
"""
type ElementType implements TypeBase {
  """
  Allows scoping the type of element to only descendants, children or all elements
  """
  elementKind: ElementTypeKind!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ElementTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ElementTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input ElementTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ElementTypeCreateInput {
  elementKind: ElementTypeKind!
  id: ID!
  kind: TypeKind! = ElementType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ElementTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input ElementTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ElementTypeEdge {
  cursor: String!
  node: ElementType!
}

enum ElementTypeKind {
  """
  Pick any element in the current tree
  """
  AllElements

  """
  Pick any element from the children of the current element
  """
  ChildrenOnly

  """
  Pick any element from the descendants of the current element
  """
  DescendantsOnly

  """
  Pick parents and siblings of parents of elements (used to move element)
  """
  ExcludeDescendantsElements
}

input ElementTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ElementTypeSort objects to sort ElementTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ElementTypeSort!]
}

input ElementTypeOwnerAggregateInput {
  AND: [ElementTypeOwnerAggregateInput!]
  OR: [ElementTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementTypeOwnerNodeAggregationWhereInput
}

input ElementTypeOwnerNodeAggregationWhereInput {
  AND: [ElementTypeOwnerNodeAggregationWhereInput!]
  OR: [ElementTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input ElementTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ElementTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ElementTypeSort object.
"""
input ElementTypeSort {
  elementKind: SortDirection
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ElementTypeUpdateInput {
  elementKind: ElementTypeKind
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ElementTypeUserOwnerAggregationSelection {
  count: Int!
  node: ElementTypeUserOwnerNodeAggregateSelection
}

type ElementTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ElementTypeWhere {
  AND: [ElementTypeWhere!]
  OR: [ElementTypeWhere!]
  elementKind: ElementTypeKind
  elementKind_IN: [ElementTypeKind!]
  elementKind_NOT: ElementTypeKind
  elementKind_NOT_IN: [ElementTypeKind!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ElementTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ElementTypesConnection {
  edges: [ElementTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementUniqueWhere {
  id: ID
}

input ElementUpdateInput {
  app: ElementAppUpdateFieldInput
  atom: ElementAtomUpdateFieldInput
  children: [ElementChildrenUpdateFieldInput!]
  component: ElementComponentUpdateFieldInput
  css: String
  hooks: [ElementHooksUpdateFieldInput!]
  id: ID
  instanceOfComponent: ElementInstanceOfComponentUpdateFieldInput
  name: String
  page: ElementPageUpdateFieldInput
  parentElement: ElementParentElementUpdateFieldInput
  propMapBindings: [ElementPropMapBindingsUpdateFieldInput!]
  propTransformationJs: String
  props: ElementPropsUpdateFieldInput
  renderForEachPropKey: String
  renderIfPropKey: String
}

input ElementWhere {
  AND: [ElementWhere!]
  OR: [ElementWhere!]
  app: AppWhere
  appAggregate: ElementAppAggregateInput
  appConnection: ElementAppConnectionWhere
  appConnection_NOT: ElementAppConnectionWhere
  app_NOT: AppWhere
  atom: AtomWhere
  atomAggregate: ElementAtomAggregateInput
  atomConnection: ElementAtomConnectionWhere
  atomConnection_NOT: ElementAtomConnectionWhere
  atom_NOT: AtomWhere
  childrenAggregate: ElementChildrenAggregateInput
  childrenConnection_ALL: ElementChildrenConnectionWhere
  childrenConnection_NONE: ElementChildrenConnectionWhere
  childrenConnection_SINGLE: ElementChildrenConnectionWhere
  childrenConnection_SOME: ElementChildrenConnectionWhere

  """
  Return Elements where all of the related Elements match this filter
  """
  children_ALL: ElementWhere

  """
  Return Elements where none of the related Elements match this filter
  """
  children_NONE: ElementWhere

  """
  Return Elements where one of the related Elements match this filter
  """
  children_SINGLE: ElementWhere

  """
  Return Elements where some of the related Elements match this filter
  """
  children_SOME: ElementWhere
  component: ComponentWhere
  componentAggregate: ElementComponentAggregateInput
  componentConnection: ElementComponentConnectionWhere
  componentConnection_NOT: ElementComponentConnectionWhere
  component_NOT: ComponentWhere
  css: String
  css_CONTAINS: String
  css_ENDS_WITH: String
  css_IN: [String]
  css_NOT: String
  css_NOT_CONTAINS: String
  css_NOT_ENDS_WITH: String
  css_NOT_IN: [String]
  css_NOT_STARTS_WITH: String
  css_STARTS_WITH: String
  hooksAggregate: ElementHooksAggregateInput
  hooksConnection_ALL: ElementHooksConnectionWhere
  hooksConnection_NONE: ElementHooksConnectionWhere
  hooksConnection_SINGLE: ElementHooksConnectionWhere
  hooksConnection_SOME: ElementHooksConnectionWhere

  """
  Return Elements where all of the related Hooks match this filter
  """
  hooks_ALL: HookWhere

  """
  Return Elements where none of the related Hooks match this filter
  """
  hooks_NONE: HookWhere

  """
  Return Elements where one of the related Hooks match this filter
  """
  hooks_SINGLE: HookWhere

  """
  Return Elements where some of the related Hooks match this filter
  """
  hooks_SOME: HookWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  instanceOfComponent: ComponentWhere
  instanceOfComponentAggregate: ElementInstanceOfComponentAggregateInput
  instanceOfComponentConnection: ElementInstanceOfComponentConnectionWhere
  instanceOfComponentConnection_NOT: ElementInstanceOfComponentConnectionWhere
  instanceOfComponent_NOT: ComponentWhere
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  page: PageWhere
  pageAggregate: ElementPageAggregateInput
  pageConnection: ElementPageConnectionWhere
  pageConnection_NOT: ElementPageConnectionWhere
  page_NOT: PageWhere
  parentElement: ElementWhere
  parentElementAggregate: ElementParentElementAggregateInput
  parentElementConnection: ElementParentElementConnectionWhere
  parentElementConnection_NOT: ElementParentElementConnectionWhere
  parentElement_NOT: ElementWhere
  propMapBindingsAggregate: ElementPropMapBindingsAggregateInput
  propMapBindingsConnection_ALL: ElementPropMapBindingsConnectionWhere
  propMapBindingsConnection_NONE: ElementPropMapBindingsConnectionWhere
  propMapBindingsConnection_SINGLE: ElementPropMapBindingsConnectionWhere
  propMapBindingsConnection_SOME: ElementPropMapBindingsConnectionWhere

  """
  Return Elements where all of the related PropMapBindings match this filter
  """
  propMapBindings_ALL: PropMapBindingWhere

  """
  Return Elements where none of the related PropMapBindings match this filter
  """
  propMapBindings_NONE: PropMapBindingWhere

  """
  Return Elements where one of the related PropMapBindings match this filter
  """
  propMapBindings_SINGLE: PropMapBindingWhere

  """
  Return Elements where some of the related PropMapBindings match this filter
  """
  propMapBindings_SOME: PropMapBindingWhere
  propTransformationJs: String
  propTransformationJs_CONTAINS: String
  propTransformationJs_ENDS_WITH: String
  propTransformationJs_IN: [String]
  propTransformationJs_NOT: String
  propTransformationJs_NOT_CONTAINS: String
  propTransformationJs_NOT_ENDS_WITH: String
  propTransformationJs_NOT_IN: [String]
  propTransformationJs_NOT_STARTS_WITH: String
  propTransformationJs_STARTS_WITH: String
  props: PropWhere
  propsAggregate: ElementPropsAggregateInput
  propsConnection: ElementPropsConnectionWhere
  propsConnection_NOT: ElementPropsConnectionWhere
  props_NOT: PropWhere
  renderForEachPropKey: String
  renderForEachPropKey_CONTAINS: String
  renderForEachPropKey_ENDS_WITH: String
  renderForEachPropKey_IN: [String]
  renderForEachPropKey_NOT: String
  renderForEachPropKey_NOT_CONTAINS: String
  renderForEachPropKey_NOT_ENDS_WITH: String
  renderForEachPropKey_NOT_IN: [String]
  renderForEachPropKey_NOT_STARTS_WITH: String
  renderForEachPropKey_STARTS_WITH: String
  renderIfPropKey: String
  renderIfPropKey_CONTAINS: String
  renderIfPropKey_ENDS_WITH: String
  renderIfPropKey_IN: [String]
  renderIfPropKey_NOT: String
  renderIfPropKey_NOT_CONTAINS: String
  renderIfPropKey_NOT_ENDS_WITH: String
  renderIfPropKey_NOT_IN: [String]
  renderIfPropKey_NOT_STARTS_WITH: String
  renderIfPropKey_STARTS_WITH: String
}

type ElementsConnection {
  edges: [ElementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows choosing one of a set of allowed values.
The value gets passed to the render pipe as a Enum Type Value id.
The actual value must be de-referenced by the id.
"""
type EnumType implements TypeBase {
  allowedValues(
    directed: Boolean = true
    options: EnumTypeValueOptions
    where: EnumTypeValueWhere
  ): [EnumTypeValue!]!
  allowedValuesAggregate(
    directed: Boolean = true
    where: EnumTypeValueWhere
  ): EnumTypeEnumTypeValueAllowedValuesAggregationSelection
  allowedValuesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [EnumTypeAllowedValuesConnectionSort!]
    where: EnumTypeAllowedValuesConnectionWhere
  ): EnumTypeAllowedValuesConnection!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): EnumTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type EnumTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input EnumTypeAllowedValuesAggregateInput {
  AND: [EnumTypeAllowedValuesAggregateInput!]
  OR: [EnumTypeAllowedValuesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeAllowedValuesNodeAggregationWhereInput
}

input EnumTypeAllowedValuesConnectFieldInput {
  connect: [EnumTypeValueConnectInput!]
  where: EnumTypeValueConnectWhere
}

type EnumTypeAllowedValuesConnection {
  edges: [EnumTypeAllowedValuesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeAllowedValuesConnectionSort {
  node: EnumTypeValueSort
}

input EnumTypeAllowedValuesConnectionWhere {
  AND: [EnumTypeAllowedValuesConnectionWhere!]
  OR: [EnumTypeAllowedValuesConnectionWhere!]
  node: EnumTypeValueWhere
  node_NOT: EnumTypeValueWhere
}

input EnumTypeAllowedValuesCreateFieldInput {
  node: EnumTypeValueCreateInput!
}

input EnumTypeAllowedValuesDeleteFieldInput {
  delete: EnumTypeValueDeleteInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeAllowedValuesDisconnectFieldInput {
  disconnect: EnumTypeValueDisconnectInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeAllowedValuesFieldInput {
  connect: [EnumTypeAllowedValuesConnectFieldInput!]
  create: [EnumTypeAllowedValuesCreateFieldInput!]
}

input EnumTypeAllowedValuesNodeAggregationWhereInput {
  AND: [EnumTypeAllowedValuesNodeAggregationWhereInput!]
  OR: [EnumTypeAllowedValuesNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

type EnumTypeAllowedValuesRelationship {
  cursor: String!
  node: EnumTypeValue!
}

input EnumTypeAllowedValuesUpdateConnectionInput {
  node: EnumTypeValueUpdateInput
}

input EnumTypeAllowedValuesUpdateFieldInput {
  connect: [EnumTypeAllowedValuesConnectFieldInput!]
  create: [EnumTypeAllowedValuesCreateFieldInput!]
  delete: [EnumTypeAllowedValuesDeleteFieldInput!]
  disconnect: [EnumTypeAllowedValuesDisconnectFieldInput!]
  update: EnumTypeAllowedValuesUpdateConnectionInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeConnectInput {
  allowedValues: [EnumTypeAllowedValuesConnectFieldInput!]
  owner: TypeBaseOwnerConnectFieldInput
}

input EnumTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input EnumTypeConnectOrCreateWhere {
  node: EnumTypeUniqueWhere!
}

input EnumTypeConnectWhere {
  node: EnumTypeWhere!
}

input EnumTypeCreateInput {
  allowedValues: EnumTypeAllowedValuesFieldInput
  id: ID!
  kind: TypeKind! = EnumType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input EnumTypeDeleteInput {
  allowedValues: [EnumTypeAllowedValuesDeleteFieldInput!]
  owner: TypeBaseOwnerDeleteFieldInput
}

input EnumTypeDisconnectInput {
  allowedValues: [EnumTypeAllowedValuesDisconnectFieldInput!]
  owner: TypeBaseOwnerDisconnectFieldInput
}

type EnumTypeEdge {
  cursor: String!
  node: EnumType!
}

type EnumTypeEnumTypeValueAllowedValuesAggregationSelection {
  count: Int!
  node: EnumTypeEnumTypeValueAllowedValuesNodeAggregateSelection
}

type EnumTypeEnumTypeValueAllowedValuesNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  value: StringAggregateSelectionNonNullable!
}

input EnumTypeOnCreateInput {
  id: ID!
  name: String!
}

input EnumTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more EnumTypeSort objects to sort EnumTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [EnumTypeSort!]
}

input EnumTypeOwnerAggregateInput {
  AND: [EnumTypeOwnerAggregateInput!]
  OR: [EnumTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeOwnerNodeAggregationWhereInput
}

input EnumTypeOwnerNodeAggregationWhereInput {
  AND: [EnumTypeOwnerNodeAggregationWhereInput!]
  OR: [EnumTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input EnumTypeRelationInput {
  allowedValues: [EnumTypeAllowedValuesCreateFieldInput!]
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort EnumTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one EnumTypeSort object.
"""
input EnumTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input EnumTypeUniqueWhere {
  id: ID
}

input EnumTypeUpdateInput {
  allowedValues: [EnumTypeAllowedValuesUpdateFieldInput!]
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type EnumTypeUserOwnerAggregationSelection {
  count: Int!
  node: EnumTypeUserOwnerNodeAggregateSelection
}

type EnumTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

type EnumTypeValue {
  enumType(
    directed: Boolean = true
    options: EnumTypeOptions
    where: EnumTypeWhere
  ): EnumType
  enumTypeAggregate(
    directed: Boolean = true
    where: EnumTypeWhere
  ): EnumTypeValueEnumTypeEnumTypeAggregationSelection
  enumTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [EnumTypeValueEnumTypeConnectionSort!]
    where: EnumTypeValueEnumTypeConnectionWhere
  ): EnumTypeValueEnumTypeConnection!
  id: ID!
  name: String
  value: String!
}

type EnumTypeValueAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  value: StringAggregateSelectionNonNullable!
}

input EnumTypeValueConnectInput {
  enumType: EnumTypeValueEnumTypeConnectFieldInput
}

input EnumTypeValueConnectOrCreateInput {
  enumType: EnumTypeValueEnumTypeConnectOrCreateFieldInput
}

input EnumTypeValueConnectWhere {
  node: EnumTypeValueWhere!
}

input EnumTypeValueCreateInput {
  enumType: EnumTypeValueEnumTypeFieldInput
  id: ID!
  name: String
  value: String!
}

input EnumTypeValueDeleteInput {
  enumType: EnumTypeValueEnumTypeDeleteFieldInput
}

input EnumTypeValueDisconnectInput {
  enumType: EnumTypeValueEnumTypeDisconnectFieldInput
}

type EnumTypeValueEdge {
  cursor: String!
  node: EnumTypeValue!
}

input EnumTypeValueEnumTypeAggregateInput {
  AND: [EnumTypeValueEnumTypeAggregateInput!]
  OR: [EnumTypeValueEnumTypeAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeValueEnumTypeNodeAggregationWhereInput
}

input EnumTypeValueEnumTypeConnectFieldInput {
  connect: EnumTypeConnectInput
  where: EnumTypeConnectWhere
}

input EnumTypeValueEnumTypeConnectOrCreateFieldInput {
  onCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInputOnCreate!
  where: EnumTypeConnectOrCreateWhere!
}

input EnumTypeValueEnumTypeConnectOrCreateFieldInputOnCreate {
  node: EnumTypeOnCreateInput!
}

type EnumTypeValueEnumTypeConnection {
  edges: [EnumTypeValueEnumTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeValueEnumTypeConnectionSort {
  node: EnumTypeSort
}

input EnumTypeValueEnumTypeConnectionWhere {
  AND: [EnumTypeValueEnumTypeConnectionWhere!]
  OR: [EnumTypeValueEnumTypeConnectionWhere!]
  node: EnumTypeWhere
  node_NOT: EnumTypeWhere
}

input EnumTypeValueEnumTypeCreateFieldInput {
  node: EnumTypeCreateInput!
}

input EnumTypeValueEnumTypeDeleteFieldInput {
  delete: EnumTypeDeleteInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

input EnumTypeValueEnumTypeDisconnectFieldInput {
  disconnect: EnumTypeDisconnectInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

type EnumTypeValueEnumTypeEnumTypeAggregationSelection {
  count: Int!
  node: EnumTypeValueEnumTypeEnumTypeNodeAggregateSelection
}

type EnumTypeValueEnumTypeEnumTypeNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input EnumTypeValueEnumTypeFieldInput {
  connect: EnumTypeValueEnumTypeConnectFieldInput
  connectOrCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInput
  create: EnumTypeValueEnumTypeCreateFieldInput
}

input EnumTypeValueEnumTypeNodeAggregationWhereInput {
  AND: [EnumTypeValueEnumTypeNodeAggregationWhereInput!]
  OR: [EnumTypeValueEnumTypeNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type EnumTypeValueEnumTypeRelationship {
  cursor: String!
  node: EnumType!
}

input EnumTypeValueEnumTypeUpdateConnectionInput {
  node: EnumTypeUpdateInput
}

input EnumTypeValueEnumTypeUpdateFieldInput {
  connect: EnumTypeValueEnumTypeConnectFieldInput
  connectOrCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInput
  create: EnumTypeValueEnumTypeCreateFieldInput
  delete: EnumTypeValueEnumTypeDeleteFieldInput
  disconnect: EnumTypeValueEnumTypeDisconnectFieldInput
  update: EnumTypeValueEnumTypeUpdateConnectionInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

input EnumTypeValueOptions {
  limit: Int
  offset: Int

  """
  Specify one or more EnumTypeValueSort objects to sort EnumTypeValues by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [EnumTypeValueSort!]
}

input EnumTypeValueRelationInput {
  enumType: EnumTypeValueEnumTypeCreateFieldInput
}

"""
Fields to sort EnumTypeValues by. The order in which sorts are applied is not guaranteed when specifying many fields in one EnumTypeValueSort object.
"""
input EnumTypeValueSort {
  id: SortDirection
  name: SortDirection
  value: SortDirection
}

input EnumTypeValueUpdateInput {
  enumType: EnumTypeValueEnumTypeUpdateFieldInput
  id: ID
  name: String
  value: String
}

input EnumTypeValueWhere {
  AND: [EnumTypeValueWhere!]
  OR: [EnumTypeValueWhere!]
  enumType: EnumTypeWhere
  enumTypeAggregate: EnumTypeValueEnumTypeAggregateInput
  enumTypeConnection: EnumTypeValueEnumTypeConnectionWhere
  enumTypeConnection_NOT: EnumTypeValueEnumTypeConnectionWhere
  enumType_NOT: EnumTypeWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  value: String
  value_CONTAINS: String
  value_ENDS_WITH: String
  value_IN: [String!]
  value_NOT: String
  value_NOT_CONTAINS: String
  value_NOT_ENDS_WITH: String
  value_NOT_IN: [String!]
  value_NOT_STARTS_WITH: String
  value_STARTS_WITH: String
}

type EnumTypeValuesConnection {
  edges: [EnumTypeValueEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeWhere {
  AND: [EnumTypeWhere!]
  OR: [EnumTypeWhere!]
  allowedValuesAggregate: EnumTypeAllowedValuesAggregateInput
  allowedValuesConnection_ALL: EnumTypeAllowedValuesConnectionWhere
  allowedValuesConnection_NONE: EnumTypeAllowedValuesConnectionWhere
  allowedValuesConnection_SINGLE: EnumTypeAllowedValuesConnectionWhere
  allowedValuesConnection_SOME: EnumTypeAllowedValuesConnectionWhere

  """
  Return EnumTypes where all of the related EnumTypeValues match this filter
  """
  allowedValues_ALL: EnumTypeValueWhere

  """
  Return EnumTypes where none of the related EnumTypeValues match this filter
  """
  allowedValues_NONE: EnumTypeValueWhere

  """
  Return EnumTypes where one of the related EnumTypeValues match this filter
  """
  allowedValues_SINGLE: EnumTypeValueWhere

  """
  Return EnumTypes where some of the related EnumTypeValues match this filter
  """
  allowedValues_SOME: EnumTypeValueWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: EnumTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type EnumTypesConnection {
  edges: [EnumTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface Field {
  description: String
  id: ID!
  key: String!
  name: String
}

input FieldCreateInput {
  description: String
  id: ID!
  key: String!
  name: String
}

input FieldSort {
  description: SortDirection
  id: SortDirection
  key: SortDirection
  name: SortDirection
}

input FieldUpdateInput {
  description: String
  id: ID
  key: String
  name: String
}

input FieldWhere {
  AND: [FieldWhere!]
  OR: [FieldWhere!]
  description: String
  description_CONTAINS: String
  description_ENDS_WITH: String
  description_IN: [String]
  description_NOT: String
  description_NOT_CONTAINS: String
  description_NOT_ENDS_WITH: String
  description_NOT_IN: [String]
  description_NOT_STARTS_WITH: String
  description_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  key: String
  key_CONTAINS: String
  key_ENDS_WITH: String
  key_IN: [String!]
  key_NOT: String
  key_NOT_CONTAINS: String
  key_NOT_ENDS_WITH: String
  key_NOT_IN: [String!]
  key_NOT_STARTS_WITH: String
  key_STARTS_WITH: String
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
}

type Hook {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): HookPropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [HookConfigConnectionSort!]
    where: HookConfigConnectionWhere
  ): HookConfigConnection!
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  elementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): HookElementElementAggregationSelection
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [HookElementConnectionSort!]
    where: HookElementConnectionWhere
  ): HookElementConnection!
  id: ID!
  type: AtomType!
}

type HookAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
}

input HookConfigAggregateInput {
  AND: [HookConfigAggregateInput!]
  OR: [HookConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: HookConfigNodeAggregationWhereInput
}

input HookConfigConnectFieldInput {
  where: PropConnectWhere
}

input HookConfigConnectOrCreateFieldInput {
  onCreate: HookConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input HookConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type HookConfigConnection {
  edges: [HookConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input HookConfigConnectionSort {
  node: PropSort
}

input HookConfigConnectionWhere {
  AND: [HookConfigConnectionWhere!]
  OR: [HookConfigConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input HookConfigCreateFieldInput {
  node: PropCreateInput!
}

input HookConfigDeleteFieldInput {
  where: HookConfigConnectionWhere
}

input HookConfigDisconnectFieldInput {
  where: HookConfigConnectionWhere
}

input HookConfigFieldInput {
  connect: HookConfigConnectFieldInput
  connectOrCreate: HookConfigConnectOrCreateFieldInput
  create: HookConfigCreateFieldInput
}

input HookConfigNodeAggregationWhereInput {
  AND: [HookConfigNodeAggregationWhereInput!]
  OR: [HookConfigNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type HookConfigRelationship {
  cursor: String!
  node: Prop!
}

input HookConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input HookConfigUpdateFieldInput {
  connect: HookConfigConnectFieldInput
  connectOrCreate: HookConfigConnectOrCreateFieldInput
  create: HookConfigCreateFieldInput
  delete: HookConfigDeleteFieldInput
  disconnect: HookConfigDisconnectFieldInput
  update: HookConfigUpdateConnectionInput
  where: HookConfigConnectionWhere
}

input HookConnectInput {
  config: HookConfigConnectFieldInput
  element: HookElementConnectFieldInput
}

input HookConnectOrCreateInput {
  config: HookConfigConnectOrCreateFieldInput
  element: HookElementConnectOrCreateFieldInput
}

input HookConnectOrCreateWhere {
  node: HookUniqueWhere!
}

input HookConnectWhere {
  node: HookWhere!
}

input HookCreateInput {
  config: HookConfigFieldInput
  element: HookElementFieldInput
  type: AtomType!
}

input HookDeleteInput {
  config: HookConfigDeleteFieldInput
  element: HookElementDeleteFieldInput
}

input HookDisconnectInput {
  config: HookConfigDisconnectFieldInput
  element: HookElementDisconnectFieldInput
}

type HookEdge {
  cursor: String!
  node: Hook!
}

input HookElementAggregateInput {
  AND: [HookElementAggregateInput!]
  OR: [HookElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: HookElementNodeAggregationWhereInput
}

input HookElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input HookElementConnectOrCreateFieldInput {
  onCreate: HookElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input HookElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type HookElementConnection {
  edges: [HookElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input HookElementConnectionSort {
  node: ElementSort
}

input HookElementConnectionWhere {
  AND: [HookElementConnectionWhere!]
  OR: [HookElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input HookElementCreateFieldInput {
  node: ElementCreateInput!
}

input HookElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: HookElementConnectionWhere
}

input HookElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: HookElementConnectionWhere
}

type HookElementElementAggregationSelection {
  count: Int!
  node: HookElementElementNodeAggregateSelection
}

type HookElementElementNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input HookElementFieldInput {
  connect: HookElementConnectFieldInput
  connectOrCreate: HookElementConnectOrCreateFieldInput
  create: HookElementCreateFieldInput
}

input HookElementNodeAggregationWhereInput {
  AND: [HookElementNodeAggregationWhereInput!]
  OR: [HookElementNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type HookElementRelationship {
  cursor: String!
  node: Element!
}

input HookElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input HookElementUpdateFieldInput {
  connect: HookElementConnectFieldInput
  connectOrCreate: HookElementConnectOrCreateFieldInput
  create: HookElementCreateFieldInput
  delete: HookElementDeleteFieldInput
  disconnect: HookElementDisconnectFieldInput
  update: HookElementUpdateConnectionInput
  where: HookElementConnectionWhere
}

input HookOnCreateInput {
  """
  Appears because this input type would be empty otherwise because this type is composed of just generated and/or relationship properties. See https://neo4j.com/docs/graphql-manual/current/troubleshooting/faqs/
  """
  _emptyInput: Boolean
}

input HookOptions {
  limit: Int
  offset: Int

  """
  Specify one or more HookSort objects to sort Hooks by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [HookSort!]
}

type HookPropConfigAggregationSelection {
  count: Int!
  node: HookPropConfigNodeAggregateSelection
}

type HookPropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input HookRelationInput {
  config: HookConfigCreateFieldInput
  element: HookElementCreateFieldInput
}

"""
Fields to sort Hooks by. The order in which sorts are applied is not guaranteed when specifying many fields in one HookSort object.
"""
input HookSort {
  id: SortDirection
  type: SortDirection
}

input HookUniqueWhere {
  id: ID
}

input HookUpdateInput {
  config: HookConfigUpdateFieldInput
  element: HookElementUpdateFieldInput
  type: AtomType
}

input HookWhere {
  AND: [HookWhere!]
  OR: [HookWhere!]
  config: PropWhere
  configAggregate: HookConfigAggregateInput
  configConnection: HookConfigConnectionWhere
  configConnection_NOT: HookConfigConnectionWhere
  config_NOT: PropWhere
  element: ElementWhere
  elementAggregate: HookElementAggregateInput
  elementConnection: HookElementConnectionWhere
  elementConnection_NOT: HookElementConnectionWhere
  element_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  type: AtomType
  type_IN: [AtomType!]
  type_NOT: AtomType
  type_NOT_IN: [AtomType!]
}

type HooksConnection {
  edges: [HookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IDAggregateSelectionNonNullable {
  longest: ID!
  shortest: ID!
}

type IntAggregateSelectionNonNullable {
  average: Float!
  max: Int!
  min: Int!
  sum: Int!
}

type IntAggregateSelectionNullable {
  average: Float
  max: Int
  min: Int
  sum: Int
}

"""
Represents an object type with multiple fields
"""
type InterfaceType implements TypeBase & WithDescendants {
  apiOfAtoms(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): [Atom!]!
  apiOfAtomsAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): InterfaceTypeAtomApiOfAtomsAggregationSelection
  apiOfAtomsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [InterfaceTypeApiOfAtomsConnectionSort!]
    where: InterfaceTypeApiOfAtomsConnectionWhere
  ): InterfaceTypeApiOfAtomsConnection!
  descendantTypesIds: [ID!]!
  fieldFor: [TypeBase!]!
  fields(
    directed: Boolean = true
    options: TypeBaseOptions
    where: TypeBaseWhere
  ): [TypeBase!]!
  fieldsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [InterfaceTypeFieldsConnectionSort!]
    where: InterfaceTypeFieldsConnectionWhere
  ): InterfaceTypeFieldsConnection!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): InterfaceTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type InterfaceTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input InterfaceTypeApiOfAtomsAggregateInput {
  AND: [InterfaceTypeApiOfAtomsAggregateInput!]
  OR: [InterfaceTypeApiOfAtomsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: InterfaceTypeApiOfAtomsNodeAggregationWhereInput
}

input InterfaceTypeApiOfAtomsConnectFieldInput {
  connect: [AtomConnectInput!]
  where: AtomConnectWhere
}

input InterfaceTypeApiOfAtomsConnectOrCreateFieldInput {
  onCreate: InterfaceTypeApiOfAtomsConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input InterfaceTypeApiOfAtomsConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type InterfaceTypeApiOfAtomsConnection {
  edges: [InterfaceTypeApiOfAtomsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input InterfaceTypeApiOfAtomsConnectionSort {
  node: AtomSort
}

input InterfaceTypeApiOfAtomsConnectionWhere {
  AND: [InterfaceTypeApiOfAtomsConnectionWhere!]
  OR: [InterfaceTypeApiOfAtomsConnectionWhere!]
  node: AtomWhere
  node_NOT: AtomWhere
}

input InterfaceTypeApiOfAtomsCreateFieldInput {
  node: AtomCreateInput!
}

input InterfaceTypeApiOfAtomsDeleteFieldInput {
  delete: AtomDeleteInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

input InterfaceTypeApiOfAtomsDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

input InterfaceTypeApiOfAtomsFieldInput {
  connect: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  connectOrCreate: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  create: [InterfaceTypeApiOfAtomsCreateFieldInput!]
}

input InterfaceTypeApiOfAtomsNodeAggregationWhereInput {
  AND: [InterfaceTypeApiOfAtomsNodeAggregationWhereInput!]
  OR: [InterfaceTypeApiOfAtomsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type InterfaceTypeApiOfAtomsRelationship {
  cursor: String!
  node: Atom!
}

input InterfaceTypeApiOfAtomsUpdateConnectionInput {
  node: AtomUpdateInput
}

input InterfaceTypeApiOfAtomsUpdateFieldInput {
  connect: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  connectOrCreate: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  create: [InterfaceTypeApiOfAtomsCreateFieldInput!]
  delete: [InterfaceTypeApiOfAtomsDeleteFieldInput!]
  disconnect: [InterfaceTypeApiOfAtomsDisconnectFieldInput!]
  update: InterfaceTypeApiOfAtomsUpdateConnectionInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

type InterfaceTypeAtomApiOfAtomsAggregationSelection {
  count: Int!
  node: InterfaceTypeAtomApiOfAtomsNodeAggregateSelection
}

type InterfaceTypeAtomApiOfAtomsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input InterfaceTypeConnectInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  fields: [InterfaceTypeFieldsConnectFieldInput!]
  owner: TypeBaseOwnerConnectFieldInput
}

input InterfaceTypeConnectOrCreateInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input InterfaceTypeConnectOrCreateWhere {
  node: InterfaceTypeUniqueWhere!
}

input InterfaceTypeConnectWhere {
  node: InterfaceTypeWhere!
}

input InterfaceTypeCreateInput {
  apiOfAtoms: InterfaceTypeApiOfAtomsFieldInput
  fields: InterfaceTypeFieldsFieldInput
  id: ID!
  kind: TypeKind! = InterfaceType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input InterfaceTypeDeleteInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsDeleteFieldInput!]
  fields: [InterfaceTypeFieldsDeleteFieldInput!]
  owner: TypeBaseOwnerDeleteFieldInput
}

input InterfaceTypeDisconnectInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsDisconnectFieldInput!]
  fields: [InterfaceTypeFieldsDisconnectFieldInput!]
  owner: TypeBaseOwnerDisconnectFieldInput
}

type InterfaceTypeEdge {
  cursor: String!
  node: InterfaceType!
}

input InterfaceTypeFieldsConnectFieldInput {
  connect: TypeBaseConnectInput
  edge: FieldCreateInput!
  where: TypeBaseConnectWhere
}

type InterfaceTypeFieldsConnection {
  edges: [InterfaceTypeFieldsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input InterfaceTypeFieldsConnectionSort {
  edge: FieldSort
  node: TypeBaseSort
}

input InterfaceTypeFieldsConnectionWhere {
  AND: [InterfaceTypeFieldsConnectionWhere!]
  OR: [InterfaceTypeFieldsConnectionWhere!]
  edge: FieldWhere
  edge_NOT: FieldWhere
  node: TypeBaseWhere
  node_NOT: TypeBaseWhere
}

input InterfaceTypeFieldsCreateFieldInput {
  edge: FieldCreateInput!
  node: TypeBaseCreateInput!
}

input InterfaceTypeFieldsDeleteFieldInput {
  delete: TypeBaseDeleteInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeFieldsDisconnectFieldInput {
  disconnect: TypeBaseDisconnectInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeFieldsFieldInput {
  connect: [InterfaceTypeFieldsConnectFieldInput!]
  create: [InterfaceTypeFieldsCreateFieldInput!]
}

type InterfaceTypeFieldsRelationship implements Field {
  cursor: String!
  description: String
  id: ID!
  key: String!
  name: String
  node: TypeBase!
}

input InterfaceTypeFieldsUpdateConnectionInput {
  edge: FieldUpdateInput
  node: TypeBaseUpdateInput
}

input InterfaceTypeFieldsUpdateFieldInput {
  connect: [InterfaceTypeFieldsConnectFieldInput!]
  create: [InterfaceTypeFieldsCreateFieldInput!]
  delete: [InterfaceTypeFieldsDeleteFieldInput!]
  disconnect: [InterfaceTypeFieldsDisconnectFieldInput!]
  update: InterfaceTypeFieldsUpdateConnectionInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeOnCreateInput {
  id: ID!
  name: String!
}

input InterfaceTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more InterfaceTypeSort objects to sort InterfaceTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [InterfaceTypeSort!]
}

input InterfaceTypeOwnerAggregateInput {
  AND: [InterfaceTypeOwnerAggregateInput!]
  OR: [InterfaceTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: InterfaceTypeOwnerNodeAggregationWhereInput
}

input InterfaceTypeOwnerNodeAggregationWhereInput {
  AND: [InterfaceTypeOwnerNodeAggregationWhereInput!]
  OR: [InterfaceTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input InterfaceTypeRelationInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsCreateFieldInput!]
  fields: [InterfaceTypeFieldsCreateFieldInput!]
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort InterfaceTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one InterfaceTypeSort object.
"""
input InterfaceTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input InterfaceTypeUniqueWhere {
  id: ID
}

input InterfaceTypeUpdateInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsUpdateFieldInput!]
  fields: [InterfaceTypeFieldsUpdateFieldInput!]
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type InterfaceTypeUserOwnerAggregationSelection {
  count: Int!
  node: InterfaceTypeUserOwnerNodeAggregateSelection
}

type InterfaceTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input InterfaceTypeWhere {
  AND: [InterfaceTypeWhere!]
  OR: [InterfaceTypeWhere!]
  apiOfAtomsAggregate: InterfaceTypeApiOfAtomsAggregateInput
  apiOfAtomsConnection_ALL: InterfaceTypeApiOfAtomsConnectionWhere
  apiOfAtomsConnection_NONE: InterfaceTypeApiOfAtomsConnectionWhere
  apiOfAtomsConnection_SINGLE: InterfaceTypeApiOfAtomsConnectionWhere
  apiOfAtomsConnection_SOME: InterfaceTypeApiOfAtomsConnectionWhere

  """
  Return InterfaceTypes where all of the related Atoms match this filter
  """
  apiOfAtoms_ALL: AtomWhere

  """
  Return InterfaceTypes where none of the related Atoms match this filter
  """
  apiOfAtoms_NONE: AtomWhere

  """
  Return InterfaceTypes where one of the related Atoms match this filter
  """
  apiOfAtoms_SINGLE: AtomWhere

  """
  Return InterfaceTypes where some of the related Atoms match this filter
  """
  apiOfAtoms_SOME: AtomWhere
  fieldsConnection_ALL: InterfaceTypeFieldsConnectionWhere
  fieldsConnection_NONE: InterfaceTypeFieldsConnectionWhere
  fieldsConnection_SINGLE: InterfaceTypeFieldsConnectionWhere
  fieldsConnection_SOME: InterfaceTypeFieldsConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: InterfaceTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type InterfaceTypesConnection {
  edges: [InterfaceTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking a lambda
"""
type LambdaType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): LambdaTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type LambdaTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input LambdaTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input LambdaTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input LambdaTypeCreateInput {
  id: ID!
  kind: TypeKind! = LambdaType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input LambdaTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input LambdaTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type LambdaTypeEdge {
  cursor: String!
  node: LambdaType!
}

input LambdaTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more LambdaTypeSort objects to sort LambdaTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [LambdaTypeSort!]
}

input LambdaTypeOwnerAggregateInput {
  AND: [LambdaTypeOwnerAggregateInput!]
  OR: [LambdaTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: LambdaTypeOwnerNodeAggregationWhereInput
}

input LambdaTypeOwnerNodeAggregationWhereInput {
  AND: [LambdaTypeOwnerNodeAggregationWhereInput!]
  OR: [LambdaTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input LambdaTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort LambdaTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one LambdaTypeSort object.
"""
input LambdaTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input LambdaTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type LambdaTypeUserOwnerAggregationSelection {
  count: Int!
  node: LambdaTypeUserOwnerNodeAggregateSelection
}

type LambdaTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input LambdaTypeWhere {
  AND: [LambdaTypeWhere!]
  OR: [LambdaTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: LambdaTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type LambdaTypesConnection {
  edges: [LambdaTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum MonacoLanguage {
  css
  cssInJs
  graphqlDev
  javascript
  json
  typescript
}

"""
Allows editing the value using a monaco editor
"""
type MonacoType implements TypeBase {
  id: ID!
  kind: TypeKind!
  language: MonacoLanguage!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): MonacoTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type MonacoTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input MonacoTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input MonacoTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input MonacoTypeCreateInput {
  id: ID!
  kind: TypeKind! = MonacoType
  language: MonacoLanguage!
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input MonacoTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input MonacoTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type MonacoTypeEdge {
  cursor: String!
  node: MonacoType!
}

input MonacoTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more MonacoTypeSort objects to sort MonacoTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [MonacoTypeSort!]
}

input MonacoTypeOwnerAggregateInput {
  AND: [MonacoTypeOwnerAggregateInput!]
  OR: [MonacoTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: MonacoTypeOwnerNodeAggregationWhereInput
}

input MonacoTypeOwnerNodeAggregationWhereInput {
  AND: [MonacoTypeOwnerNodeAggregationWhereInput!]
  OR: [MonacoTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input MonacoTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort MonacoTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one MonacoTypeSort object.
"""
input MonacoTypeSort {
  id: SortDirection
  kind: SortDirection
  language: SortDirection
  name: SortDirection
}

input MonacoTypeUpdateInput {
  id: ID
  language: MonacoLanguage
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type MonacoTypeUserOwnerAggregationSelection {
  count: Int!
  node: MonacoTypeUserOwnerNodeAggregateSelection
}

type MonacoTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input MonacoTypeWhere {
  AND: [MonacoTypeWhere!]
  OR: [MonacoTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  language: MonacoLanguage
  language_IN: [MonacoLanguage!]
  language_NOT: MonacoLanguage
  language_NOT_IN: [MonacoLanguage!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: MonacoTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type MonacoTypesConnection {
  edges: [MonacoTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Mutation {
  createActionTypes(
    input: [ActionTypeCreateInput!]!
  ): CreateActionTypesMutationResponse!
  createAppTypes(input: [AppTypeCreateInput!]!): CreateAppTypesMutationResponse!
  createApps(input: [AppCreateInput!]!): CreateAppsMutationResponse!
  createArrayTypes(
    input: [ArrayTypeCreateInput!]!
  ): CreateArrayTypesMutationResponse!
  createAtoms(input: [AtomCreateInput!]!): CreateAtomsMutationResponse!
  createComponents(
    input: [ComponentCreateInput!]!
  ): CreateComponentsMutationResponse!
  createCreateInfos(
    input: [CreateInfoCreateInput!]!
  ): CreateCreateInfosMutationResponse!
  createCustomActions(
    input: [CustomActionCreateInput!]!
  ): CreateCustomActionsMutationResponse!
  createElementTypes(
    input: [ElementTypeCreateInput!]!
  ): CreateElementTypesMutationResponse!
  createElements(input: [ElementCreateInput!]!): CreateElementsMutationResponse!
  createEnumTypeValues(
    input: [EnumTypeValueCreateInput!]!
  ): CreateEnumTypeValuesMutationResponse!
  createEnumTypes(
    input: [EnumTypeCreateInput!]!
  ): CreateEnumTypesMutationResponse!
  createHooks(input: [HookCreateInput!]!): CreateHooksMutationResponse!
  createInterfaceTypes(
    input: [InterfaceTypeCreateInput!]!
  ): CreateInterfaceTypesMutationResponse!
  createLambdaTypes(
    input: [LambdaTypeCreateInput!]!
  ): CreateLambdaTypesMutationResponse!
  createMonacoTypes(
    input: [MonacoTypeCreateInput!]!
  ): CreateMonacoTypesMutationResponse!
  createPageTypes(
    input: [PageTypeCreateInput!]!
  ): CreatePageTypesMutationResponse!
  createPages(input: [PageCreateInput!]!): CreatePagesMutationResponse!
  createPipelineActions(
    input: [PipelineActionCreateInput!]!
  ): CreatePipelineActionsMutationResponse!
  createPrimitiveTypes(
    input: [PrimitiveTypeCreateInput!]!
  ): CreatePrimitiveTypesMutationResponse!
  createPropMapBindings(
    input: [PropMapBindingCreateInput!]!
  ): CreatePropMapBindingsMutationResponse!
  createProps(input: [PropCreateInput!]!): CreatePropsMutationResponse!
  createReactNodeTypes(
    input: [ReactNodeTypeCreateInput!]!
  ): CreateReactNodeTypesMutationResponse!
  createRenderPropsTypes(
    input: [RenderPropsTypeCreateInput!]!
  ): CreateRenderPropsTypesMutationResponse!
  createResetDatabaseMutationResponses(
    input: [ResetDatabaseMutationResponseCreateInput!]!
  ): CreateResetDatabaseMutationResponsesMutationResponse!
  createResourceActions(
    input: [ResourceActionCreateInput!]!
  ): CreateResourceActionsMutationResponse!
  createResources(
    input: [ResourceCreateInput!]!
  ): CreateResourcesMutationResponse!
  createStores(input: [StoreCreateInput!]!): CreateStoresMutationResponse!
  createTagGraphOptions(
    input: [TagGraphOptionsCreateInput!]!
  ): CreateTagGraphOptionsMutationResponse!
  createTags(input: [TagCreateInput!]!): CreateTagsMutationResponse!
  createTypeReferences(
    input: [TypeReferenceCreateInput!]!
  ): CreateTypeReferencesMutationResponse!
  createUnionTypes(
    input: [UnionTypeCreateInput!]!
  ): CreateUnionTypesMutationResponse!
  createUsers(input: [UserCreateInput!]!): CreateUsersMutationResponse!
  deleteActionTypes(
    delete: ActionTypeDeleteInput
    where: ActionTypeWhere
  ): DeleteInfo!
  deleteAppTypes(delete: AppTypeDeleteInput, where: AppTypeWhere): DeleteInfo!
  deleteApps(delete: AppDeleteInput, where: AppWhere): DeleteInfo!
  deleteArrayTypes(
    delete: ArrayTypeDeleteInput
    where: ArrayTypeWhere
  ): DeleteInfo!
  deleteAtoms(delete: AtomDeleteInput, where: AtomWhere): DeleteInfo!
  deleteComponents(
    delete: ComponentDeleteInput
    where: ComponentWhere
  ): DeleteInfo!
  deleteCreateInfos(where: CreateInfoWhere): DeleteInfo!
  deleteCustomActions(
    delete: CustomActionDeleteInput
    where: CustomActionWhere
  ): DeleteInfo!
  deleteElementTypes(
    delete: ElementTypeDeleteInput
    where: ElementTypeWhere
  ): DeleteInfo!
  deleteElements(delete: ElementDeleteInput, where: ElementWhere): DeleteInfo!
  deleteEnumTypeValues(
    delete: EnumTypeValueDeleteInput
    where: EnumTypeValueWhere
  ): DeleteInfo!
  deleteEnumTypes(
    delete: EnumTypeDeleteInput
    where: EnumTypeWhere
  ): DeleteInfo!
  deleteHooks(delete: HookDeleteInput, where: HookWhere): DeleteInfo!
  deleteInterfaceTypes(
    delete: InterfaceTypeDeleteInput
    where: InterfaceTypeWhere
  ): DeleteInfo!
  deleteLambdaTypes(
    delete: LambdaTypeDeleteInput
    where: LambdaTypeWhere
  ): DeleteInfo!
  deleteMonacoTypes(
    delete: MonacoTypeDeleteInput
    where: MonacoTypeWhere
  ): DeleteInfo!
  deletePageTypes(
    delete: PageTypeDeleteInput
    where: PageTypeWhere
  ): DeleteInfo!
  deletePages(delete: PageDeleteInput, where: PageWhere): DeleteInfo!
  deletePipelineActions(
    delete: PipelineActionDeleteInput
    where: PipelineActionWhere
  ): DeleteInfo!
  deletePrimitiveTypes(
    delete: PrimitiveTypeDeleteInput
    where: PrimitiveTypeWhere
  ): DeleteInfo!
  deletePropMapBindings(
    delete: PropMapBindingDeleteInput
    where: PropMapBindingWhere
  ): DeleteInfo!
  deleteProps(where: PropWhere): DeleteInfo!
  deleteReactNodeTypes(
    delete: ReactNodeTypeDeleteInput
    where: ReactNodeTypeWhere
  ): DeleteInfo!
  deleteRenderPropsTypes(
    delete: RenderPropsTypeDeleteInput
    where: RenderPropsTypeWhere
  ): DeleteInfo!
  deleteResetDatabaseMutationResponses(
    where: ResetDatabaseMutationResponseWhere
  ): DeleteInfo!
  deleteResourceActions(
    delete: ResourceActionDeleteInput
    where: ResourceActionWhere
  ): DeleteInfo!
  deleteResources(
    delete: ResourceDeleteInput
    where: ResourceWhere
  ): DeleteInfo!
  deleteStores(delete: StoreDeleteInput, where: StoreWhere): DeleteInfo!
  deleteTagGraphOptions(where: TagGraphOptionsWhere): DeleteInfo!
  deleteTags(delete: TagDeleteInput, where: TagWhere): DeleteInfo!
  deleteTypeReferences(where: TypeReferenceWhere): DeleteInfo!
  deleteUnionTypes(
    delete: UnionTypeDeleteInput
    where: UnionTypeWhere
  ): DeleteInfo!
  deleteUsers(delete: UserDeleteInput, where: UserWhere): DeleteInfo!
  resetDatabase: ResetDatabaseMutationResponse
  updateActionTypes(
    connect: ActionTypeConnectInput
    connectOrCreate: ActionTypeConnectOrCreateInput
    create: ActionTypeRelationInput
    delete: ActionTypeDeleteInput
    disconnect: ActionTypeDisconnectInput
    update: ActionTypeUpdateInput
    where: ActionTypeWhere
  ): UpdateActionTypesMutationResponse!
  updateAppTypes(
    connect: AppTypeConnectInput
    connectOrCreate: AppTypeConnectOrCreateInput
    create: AppTypeRelationInput
    delete: AppTypeDeleteInput
    disconnect: AppTypeDisconnectInput
    update: AppTypeUpdateInput
    where: AppTypeWhere
  ): UpdateAppTypesMutationResponse!
  updateApps(
    connect: AppConnectInput
    connectOrCreate: AppConnectOrCreateInput
    create: AppRelationInput
    delete: AppDeleteInput
    disconnect: AppDisconnectInput
    update: AppUpdateInput
    where: AppWhere
  ): UpdateAppsMutationResponse!
  updateArrayTypes(
    connect: ArrayTypeConnectInput
    connectOrCreate: ArrayTypeConnectOrCreateInput
    create: ArrayTypeRelationInput
    delete: ArrayTypeDeleteInput
    disconnect: ArrayTypeDisconnectInput
    update: ArrayTypeUpdateInput
    where: ArrayTypeWhere
  ): UpdateArrayTypesMutationResponse!
  updateAtoms(
    connect: AtomConnectInput
    connectOrCreate: AtomConnectOrCreateInput
    create: AtomRelationInput
    delete: AtomDeleteInput
    disconnect: AtomDisconnectInput
    update: AtomUpdateInput
    where: AtomWhere
  ): UpdateAtomsMutationResponse!
  updateComponents(
    connect: ComponentConnectInput
    connectOrCreate: ComponentConnectOrCreateInput
    create: ComponentRelationInput
    delete: ComponentDeleteInput
    disconnect: ComponentDisconnectInput
    update: ComponentUpdateInput
    where: ComponentWhere
  ): UpdateComponentsMutationResponse!
  updateCreateInfos(
    update: CreateInfoUpdateInput
    where: CreateInfoWhere
  ): UpdateCreateInfosMutationResponse!
  updateCustomActions(
    connect: CustomActionConnectInput
    connectOrCreate: CustomActionConnectOrCreateInput
    create: CustomActionRelationInput
    delete: CustomActionDeleteInput
    disconnect: CustomActionDisconnectInput
    update: CustomActionUpdateInput
    where: CustomActionWhere
  ): UpdateCustomActionsMutationResponse!
  updateElementTypes(
    connect: ElementTypeConnectInput
    connectOrCreate: ElementTypeConnectOrCreateInput
    create: ElementTypeRelationInput
    delete: ElementTypeDeleteInput
    disconnect: ElementTypeDisconnectInput
    update: ElementTypeUpdateInput
    where: ElementTypeWhere
  ): UpdateElementTypesMutationResponse!
  updateElements(
    connect: ElementConnectInput
    connectOrCreate: ElementConnectOrCreateInput
    create: ElementRelationInput
    delete: ElementDeleteInput
    disconnect: ElementDisconnectInput
    update: ElementUpdateInput
    where: ElementWhere
  ): UpdateElementsMutationResponse!
  updateEnumTypeValues(
    connect: EnumTypeValueConnectInput
    connectOrCreate: EnumTypeValueConnectOrCreateInput
    create: EnumTypeValueRelationInput
    delete: EnumTypeValueDeleteInput
    disconnect: EnumTypeValueDisconnectInput
    update: EnumTypeValueUpdateInput
    where: EnumTypeValueWhere
  ): UpdateEnumTypeValuesMutationResponse!
  updateEnumTypes(
    connect: EnumTypeConnectInput
    connectOrCreate: EnumTypeConnectOrCreateInput
    create: EnumTypeRelationInput
    delete: EnumTypeDeleteInput
    disconnect: EnumTypeDisconnectInput
    update: EnumTypeUpdateInput
    where: EnumTypeWhere
  ): UpdateEnumTypesMutationResponse!
  updateHooks(
    connect: HookConnectInput
    connectOrCreate: HookConnectOrCreateInput
    create: HookRelationInput
    delete: HookDeleteInput
    disconnect: HookDisconnectInput
    update: HookUpdateInput
    where: HookWhere
  ): UpdateHooksMutationResponse!
  updateInterfaceTypes(
    connect: InterfaceTypeConnectInput
    connectOrCreate: InterfaceTypeConnectOrCreateInput
    create: InterfaceTypeRelationInput
    delete: InterfaceTypeDeleteInput
    disconnect: InterfaceTypeDisconnectInput
    update: InterfaceTypeUpdateInput
    where: InterfaceTypeWhere
  ): UpdateInterfaceTypesMutationResponse!
  updateLambdaTypes(
    connect: LambdaTypeConnectInput
    connectOrCreate: LambdaTypeConnectOrCreateInput
    create: LambdaTypeRelationInput
    delete: LambdaTypeDeleteInput
    disconnect: LambdaTypeDisconnectInput
    update: LambdaTypeUpdateInput
    where: LambdaTypeWhere
  ): UpdateLambdaTypesMutationResponse!
  updateMonacoTypes(
    connect: MonacoTypeConnectInput
    connectOrCreate: MonacoTypeConnectOrCreateInput
    create: MonacoTypeRelationInput
    delete: MonacoTypeDeleteInput
    disconnect: MonacoTypeDisconnectInput
    update: MonacoTypeUpdateInput
    where: MonacoTypeWhere
  ): UpdateMonacoTypesMutationResponse!
  updatePageTypes(
    connect: PageTypeConnectInput
    connectOrCreate: PageTypeConnectOrCreateInput
    create: PageTypeRelationInput
    delete: PageTypeDeleteInput
    disconnect: PageTypeDisconnectInput
    update: PageTypeUpdateInput
    where: PageTypeWhere
  ): UpdatePageTypesMutationResponse!
  updatePages(
    connect: PageConnectInput
    connectOrCreate: PageConnectOrCreateInput
    create: PageRelationInput
    delete: PageDeleteInput
    disconnect: PageDisconnectInput
    update: PageUpdateInput
    where: PageWhere
  ): UpdatePagesMutationResponse!
  updatePipelineActions(
    connect: PipelineActionConnectInput
    connectOrCreate: PipelineActionConnectOrCreateInput
    create: PipelineActionRelationInput
    delete: PipelineActionDeleteInput
    disconnect: PipelineActionDisconnectInput
    update: PipelineActionUpdateInput
    where: PipelineActionWhere
  ): UpdatePipelineActionsMutationResponse!
  updatePrimitiveTypes(
    connect: PrimitiveTypeConnectInput
    connectOrCreate: PrimitiveTypeConnectOrCreateInput
    create: PrimitiveTypeRelationInput
    delete: PrimitiveTypeDeleteInput
    disconnect: PrimitiveTypeDisconnectInput
    update: PrimitiveTypeUpdateInput
    where: PrimitiveTypeWhere
  ): UpdatePrimitiveTypesMutationResponse!
  updatePropMapBindings(
    connect: PropMapBindingConnectInput
    connectOrCreate: PropMapBindingConnectOrCreateInput
    create: PropMapBindingRelationInput
    delete: PropMapBindingDeleteInput
    disconnect: PropMapBindingDisconnectInput
    update: PropMapBindingUpdateInput
    where: PropMapBindingWhere
  ): UpdatePropMapBindingsMutationResponse!
  updateProps(
    update: PropUpdateInput
    where: PropWhere
  ): UpdatePropsMutationResponse!
  updateReactNodeTypes(
    connect: ReactNodeTypeConnectInput
    connectOrCreate: ReactNodeTypeConnectOrCreateInput
    create: ReactNodeTypeRelationInput
    delete: ReactNodeTypeDeleteInput
    disconnect: ReactNodeTypeDisconnectInput
    update: ReactNodeTypeUpdateInput
    where: ReactNodeTypeWhere
  ): UpdateReactNodeTypesMutationResponse!
  updateRenderPropsTypes(
    connect: RenderPropsTypeConnectInput
    connectOrCreate: RenderPropsTypeConnectOrCreateInput
    create: RenderPropsTypeRelationInput
    delete: RenderPropsTypeDeleteInput
    disconnect: RenderPropsTypeDisconnectInput
    update: RenderPropsTypeUpdateInput
    where: RenderPropsTypeWhere
  ): UpdateRenderPropsTypesMutationResponse!
  updateResetDatabaseMutationResponses(
    update: ResetDatabaseMutationResponseUpdateInput
    where: ResetDatabaseMutationResponseWhere
  ): UpdateResetDatabaseMutationResponsesMutationResponse!
  updateResourceActions(
    connect: ResourceActionConnectInput
    connectOrCreate: ResourceActionConnectOrCreateInput
    create: ResourceActionRelationInput
    delete: ResourceActionDeleteInput
    disconnect: ResourceActionDisconnectInput
    update: ResourceActionUpdateInput
    where: ResourceActionWhere
  ): UpdateResourceActionsMutationResponse!
  updateResources(
    connect: ResourceConnectInput
    connectOrCreate: ResourceConnectOrCreateInput
    create: ResourceRelationInput
    delete: ResourceDeleteInput
    disconnect: ResourceDisconnectInput
    update: ResourceUpdateInput
    where: ResourceWhere
  ): UpdateResourcesMutationResponse!
  updateStores(
    connect: StoreConnectInput
    connectOrCreate: StoreConnectOrCreateInput
    create: StoreRelationInput
    delete: StoreDeleteInput
    disconnect: StoreDisconnectInput
    update: StoreUpdateInput
    where: StoreWhere
  ): UpdateStoresMutationResponse!
  updateTagGraphOptions(
    update: TagGraphOptionsUpdateInput
    where: TagGraphOptionsWhere
  ): UpdateTagGraphOptionsMutationResponse!
  updateTags(
    connect: TagConnectInput
    connectOrCreate: TagConnectOrCreateInput
    create: TagRelationInput
    delete: TagDeleteInput
    disconnect: TagDisconnectInput
    update: TagUpdateInput
    where: TagWhere
  ): UpdateTagsMutationResponse!
  updateTypeReferences(
    update: TypeReferenceUpdateInput
    where: TypeReferenceWhere
  ): UpdateTypeReferencesMutationResponse!
  updateUnionTypes(
    connect: UnionTypeConnectInput
    connectOrCreate: UnionTypeConnectOrCreateInput
    create: UnionTypeRelationInput
    delete: UnionTypeDeleteInput
    disconnect: UnionTypeDisconnectInput
    update: UnionTypeUpdateInput
    where: UnionTypeWhere
  ): UpdateUnionTypesMutationResponse!
  upsertField(
    field: FieldCreateInput!
    fieldTypeId: ID!
    interfaceTypeId: ID!
  ): InterfaceType!
}

type Page {
  app(directed: Boolean = true, options: AppOptions, where: AppWhere): App!
  appAggregate(
    directed: Boolean = true
    where: AppWhere
  ): PageAppAppAggregationSelection
  appConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PageAppConnectionSort!]
    where: PageAppConnectionWhere
  ): PageAppConnection!
  id: ID!
  name: String!
  rootElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  rootElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PageElementRootElementAggregationSelection
  rootElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PageRootElementConnectionSort!]
    where: PageRootElementConnectionWhere
  ): PageRootElementConnection!
}

type PageAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PageAppAggregateInput {
  AND: [PageAppAggregateInput!]
  OR: [PageAppAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageAppNodeAggregationWhereInput
}

type PageAppAppAggregationSelection {
  count: Int!
  node: PageAppAppNodeAggregateSelection
}

type PageAppAppNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PageAppConnectFieldInput {
  connect: AppConnectInput
  where: AppConnectWhere
}

input PageAppConnectOrCreateFieldInput {
  onCreate: PageAppConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input PageAppConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type PageAppConnection {
  edges: [PageAppRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageAppConnectionSort {
  node: AppSort
}

input PageAppConnectionWhere {
  AND: [PageAppConnectionWhere!]
  OR: [PageAppConnectionWhere!]
  node: AppWhere
  node_NOT: AppWhere
}

input PageAppCreateFieldInput {
  node: AppCreateInput!
}

input PageAppDeleteFieldInput {
  delete: AppDeleteInput
  where: PageAppConnectionWhere
}

input PageAppDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: PageAppConnectionWhere
}

input PageAppFieldInput {
  connect: PageAppConnectFieldInput
  connectOrCreate: PageAppConnectOrCreateFieldInput
  create: PageAppCreateFieldInput
}

input PageAppNodeAggregationWhereInput {
  AND: [PageAppNodeAggregationWhereInput!]
  OR: [PageAppNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type PageAppRelationship {
  cursor: String!
  node: App!
}

input PageAppUpdateConnectionInput {
  node: AppUpdateInput
}

input PageAppUpdateFieldInput {
  connect: PageAppConnectFieldInput
  connectOrCreate: PageAppConnectOrCreateFieldInput
  create: PageAppCreateFieldInput
  delete: PageAppDeleteFieldInput
  disconnect: PageAppDisconnectFieldInput
  update: PageAppUpdateConnectionInput
  where: PageAppConnectionWhere
}

input PageConnectInput {
  app: PageAppConnectFieldInput
  rootElement: PageRootElementConnectFieldInput
}

input PageConnectOrCreateInput {
  app: PageAppConnectOrCreateFieldInput
  rootElement: PageRootElementConnectOrCreateFieldInput
}

input PageConnectOrCreateWhere {
  node: PageUniqueWhere!
}

input PageConnectWhere {
  node: PageWhere!
}

input PageCreateInput {
  app: PageAppFieldInput
  id: ID!
  name: String!
  rootElement: PageRootElementFieldInput
}

input PageDeleteInput {
  app: PageAppDeleteFieldInput
  rootElement: PageRootElementDeleteFieldInput
}

input PageDisconnectInput {
  app: PageAppDisconnectFieldInput
  rootElement: PageRootElementDisconnectFieldInput
}

type PageEdge {
  cursor: String!
  node: Page!
}

type PageElementRootElementAggregationSelection {
  count: Int!
  node: PageElementRootElementNodeAggregateSelection
}

type PageElementRootElementNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

"""
Pagination information (Relay)
"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PageOnCreateInput {
  id: ID!
  name: String!
}

input PageOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PageSort objects to sort Pages by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PageSort!]
}

input PageRelationInput {
  app: PageAppCreateFieldInput
  rootElement: PageRootElementCreateFieldInput
}

input PageRootElementAggregateInput {
  AND: [PageRootElementAggregateInput!]
  OR: [PageRootElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageRootElementNodeAggregationWhereInput
}

input PageRootElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input PageRootElementConnectOrCreateFieldInput {
  onCreate: PageRootElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PageRootElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PageRootElementConnection {
  edges: [PageRootElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageRootElementConnectionSort {
  node: ElementSort
}

input PageRootElementConnectionWhere {
  AND: [PageRootElementConnectionWhere!]
  OR: [PageRootElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input PageRootElementCreateFieldInput {
  node: ElementCreateInput!
}

input PageRootElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: PageRootElementConnectionWhere
}

input PageRootElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PageRootElementConnectionWhere
}

input PageRootElementFieldInput {
  connect: PageRootElementConnectFieldInput
  connectOrCreate: PageRootElementConnectOrCreateFieldInput
  create: PageRootElementCreateFieldInput
}

input PageRootElementNodeAggregationWhereInput {
  AND: [PageRootElementNodeAggregationWhereInput!]
  OR: [PageRootElementNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type PageRootElementRelationship {
  cursor: String!
  node: Element!
}

input PageRootElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input PageRootElementUpdateFieldInput {
  connect: PageRootElementConnectFieldInput
  connectOrCreate: PageRootElementConnectOrCreateFieldInput
  create: PageRootElementCreateFieldInput
  delete: PageRootElementDeleteFieldInput
  disconnect: PageRootElementDisconnectFieldInput
  update: PageRootElementUpdateConnectionInput
  where: PageRootElementConnectionWhere
}

"""
Fields to sort Pages by. The order in which sorts are applied is not guaranteed when specifying many fields in one PageSort object.
"""
input PageSort {
  id: SortDirection
  name: SortDirection
}

"""
Allows picking a page from the list of pages
"""
type PageType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): PageTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type PageTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PageTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input PageTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input PageTypeCreateInput {
  id: ID!
  kind: TypeKind! = PageType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input PageTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input PageTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type PageTypeEdge {
  cursor: String!
  node: PageType!
}

input PageTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PageTypeSort objects to sort PageTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PageTypeSort!]
}

input PageTypeOwnerAggregateInput {
  AND: [PageTypeOwnerAggregateInput!]
  OR: [PageTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageTypeOwnerNodeAggregationWhereInput
}

input PageTypeOwnerNodeAggregationWhereInput {
  AND: [PageTypeOwnerNodeAggregationWhereInput!]
  OR: [PageTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input PageTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort PageTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one PageTypeSort object.
"""
input PageTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input PageTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type PageTypeUserOwnerAggregationSelection {
  count: Int!
  node: PageTypeUserOwnerNodeAggregateSelection
}

type PageTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input PageTypeWhere {
  AND: [PageTypeWhere!]
  OR: [PageTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: PageTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type PageTypesConnection {
  edges: [PageTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageUniqueWhere {
  id: ID
}

input PageUpdateInput {
  app: PageAppUpdateFieldInput
  id: ID
  name: String
  rootElement: PageRootElementUpdateFieldInput
}

input PageWhere {
  AND: [PageWhere!]
  OR: [PageWhere!]
  app: AppWhere
  appAggregate: PageAppAggregateInput
  appConnection: PageAppConnectionWhere
  appConnection_NOT: PageAppConnectionWhere
  app_NOT: AppWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  rootElement: ElementWhere
  rootElementAggregate: PageRootElementAggregateInput
  rootElementConnection: PageRootElementConnectionWhere
  rootElementConnection_NOT: PageRootElementConnectionWhere
  rootElement_NOT: ElementWhere
}

type PagesConnection {
  edges: [PageEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface ParentOfElement {
  order: Int
}

input ParentOfElementCreateInput {
  order: Int
}

input ParentOfElementSort {
  order: SortDirection
}

input ParentOfElementUpdateInput {
  order: Int
}

input ParentOfElementWhere {
  AND: [ParentOfElementWhere!]
  OR: [ParentOfElementWhere!]
  order: Int
  order_GT: Int
  order_GTE: Int
  order_IN: [Int]
  order_LT: Int
  order_LTE: Int
  order_NOT: Int
  order_NOT_IN: [Int]
}

type PipelineAction implements ActionBase {
  """
  List of actions to run in order
  """
  actions(
    directed: Boolean = true
    options: QueryOptions
    where: AnyActionWhere
  ): [AnyAction!]!
  actionsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PipelineActionActionsConnectionSort!]
    where: PipelineActionActionsConnectionWhere
  ): PipelineActionActionsConnection!
  id: ID!
  name: String!
  runOnInit: Boolean!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): PipelineActionStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ActionBaseStoreConnectionSort!]
    where: ActionBaseStoreConnectionWhere
  ): ActionBaseStoreConnection!
  type: ActionKind!
}

input PipelineActionActionsConnectInput {
  CustomAction: [PipelineActionActionsCustomActionConnectFieldInput!]
  PipelineAction: [PipelineActionActionsPipelineActionConnectFieldInput!]
  ResourceAction: [PipelineActionActionsResourceActionConnectFieldInput!]
}

input PipelineActionActionsConnectOrCreateInput {
  CustomAction: [PipelineActionActionsCustomActionConnectOrCreateFieldInput!]
  PipelineAction: [PipelineActionActionsPipelineActionConnectOrCreateFieldInput!]
  ResourceAction: [PipelineActionActionsResourceActionConnectOrCreateFieldInput!]
}

type PipelineActionActionsConnection {
  edges: [PipelineActionActionsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PipelineActionActionsConnectionSort {
  edge: ActionsPipeLineSort
}

input PipelineActionActionsConnectionWhere {
  CustomAction: PipelineActionActionsCustomActionConnectionWhere
  PipelineAction: PipelineActionActionsPipelineActionConnectionWhere
  ResourceAction: PipelineActionActionsResourceActionConnectionWhere
}

input PipelineActionActionsCreateFieldInput {
  CustomAction: [PipelineActionActionsCustomActionCreateFieldInput!]
  PipelineAction: [PipelineActionActionsPipelineActionCreateFieldInput!]
  ResourceAction: [PipelineActionActionsResourceActionCreateFieldInput!]
}

input PipelineActionActionsCreateInput {
  CustomAction: PipelineActionActionsCustomActionFieldInput
  PipelineAction: PipelineActionActionsPipelineActionFieldInput
  ResourceAction: PipelineActionActionsResourceActionFieldInput
}

input PipelineActionActionsCustomActionConnectFieldInput {
  connect: [CustomActionConnectInput!]
  edge: ActionsPipeLineCreateInput
  where: CustomActionConnectWhere
}

input PipelineActionActionsCustomActionConnectOrCreateFieldInput {
  onCreate: PipelineActionActionsCustomActionConnectOrCreateFieldInputOnCreate!
  where: CustomActionConnectOrCreateWhere!
}

input PipelineActionActionsCustomActionConnectOrCreateFieldInputOnCreate {
  edge: ActionsPipeLineCreateInput
  node: CustomActionOnCreateInput!
}

input PipelineActionActionsCustomActionConnectionWhere {
  AND: [PipelineActionActionsCustomActionConnectionWhere!]
  OR: [PipelineActionActionsCustomActionConnectionWhere!]
  edge: ActionsPipeLineWhere
  edge_NOT: ActionsPipeLineWhere
  node: CustomActionWhere
  node_NOT: CustomActionWhere
}

input PipelineActionActionsCustomActionCreateFieldInput {
  edge: ActionsPipeLineCreateInput
  node: CustomActionCreateInput!
}

input PipelineActionActionsCustomActionDeleteFieldInput {
  delete: CustomActionDeleteInput
  where: PipelineActionActionsCustomActionConnectionWhere
}

input PipelineActionActionsCustomActionDisconnectFieldInput {
  disconnect: CustomActionDisconnectInput
  where: PipelineActionActionsCustomActionConnectionWhere
}

input PipelineActionActionsCustomActionFieldInput {
  connect: [PipelineActionActionsCustomActionConnectFieldInput!]
  connectOrCreate: [PipelineActionActionsCustomActionConnectOrCreateFieldInput!]
  create: [PipelineActionActionsCustomActionCreateFieldInput!]
}

input PipelineActionActionsCustomActionUpdateConnectionInput {
  edge: ActionsPipeLineUpdateInput
  node: CustomActionUpdateInput
}

input PipelineActionActionsCustomActionUpdateFieldInput {
  connect: [PipelineActionActionsCustomActionConnectFieldInput!]
  connectOrCreate: [PipelineActionActionsCustomActionConnectOrCreateFieldInput!]
  create: [PipelineActionActionsCustomActionCreateFieldInput!]
  delete: [PipelineActionActionsCustomActionDeleteFieldInput!]
  disconnect: [PipelineActionActionsCustomActionDisconnectFieldInput!]
  update: PipelineActionActionsCustomActionUpdateConnectionInput
  where: PipelineActionActionsCustomActionConnectionWhere
}

input PipelineActionActionsDeleteInput {
  CustomAction: [PipelineActionActionsCustomActionDeleteFieldInput!]
  PipelineAction: [PipelineActionActionsPipelineActionDeleteFieldInput!]
  ResourceAction: [PipelineActionActionsResourceActionDeleteFieldInput!]
}

input PipelineActionActionsDisconnectInput {
  CustomAction: [PipelineActionActionsCustomActionDisconnectFieldInput!]
  PipelineAction: [PipelineActionActionsPipelineActionDisconnectFieldInput!]
  ResourceAction: [PipelineActionActionsResourceActionDisconnectFieldInput!]
}

input PipelineActionActionsPipelineActionConnectFieldInput {
  connect: [PipelineActionConnectInput!]
  edge: ActionsPipeLineCreateInput
  where: PipelineActionConnectWhere
}

input PipelineActionActionsPipelineActionConnectOrCreateFieldInput {
  onCreate: PipelineActionActionsPipelineActionConnectOrCreateFieldInputOnCreate!
  where: PipelineActionConnectOrCreateWhere!
}

input PipelineActionActionsPipelineActionConnectOrCreateFieldInputOnCreate {
  edge: ActionsPipeLineCreateInput
  node: PipelineActionOnCreateInput!
}

input PipelineActionActionsPipelineActionConnectionWhere {
  AND: [PipelineActionActionsPipelineActionConnectionWhere!]
  OR: [PipelineActionActionsPipelineActionConnectionWhere!]
  edge: ActionsPipeLineWhere
  edge_NOT: ActionsPipeLineWhere
  node: PipelineActionWhere
  node_NOT: PipelineActionWhere
}

input PipelineActionActionsPipelineActionCreateFieldInput {
  edge: ActionsPipeLineCreateInput
  node: PipelineActionCreateInput!
}

input PipelineActionActionsPipelineActionDeleteFieldInput {
  delete: PipelineActionDeleteInput
  where: PipelineActionActionsPipelineActionConnectionWhere
}

input PipelineActionActionsPipelineActionDisconnectFieldInput {
  disconnect: PipelineActionDisconnectInput
  where: PipelineActionActionsPipelineActionConnectionWhere
}

input PipelineActionActionsPipelineActionFieldInput {
  connect: [PipelineActionActionsPipelineActionConnectFieldInput!]
  connectOrCreate: [PipelineActionActionsPipelineActionConnectOrCreateFieldInput!]
  create: [PipelineActionActionsPipelineActionCreateFieldInput!]
}

input PipelineActionActionsPipelineActionUpdateConnectionInput {
  edge: ActionsPipeLineUpdateInput
  node: PipelineActionUpdateInput
}

input PipelineActionActionsPipelineActionUpdateFieldInput {
  connect: [PipelineActionActionsPipelineActionConnectFieldInput!]
  connectOrCreate: [PipelineActionActionsPipelineActionConnectOrCreateFieldInput!]
  create: [PipelineActionActionsPipelineActionCreateFieldInput!]
  delete: [PipelineActionActionsPipelineActionDeleteFieldInput!]
  disconnect: [PipelineActionActionsPipelineActionDisconnectFieldInput!]
  update: PipelineActionActionsPipelineActionUpdateConnectionInput
  where: PipelineActionActionsPipelineActionConnectionWhere
}

type PipelineActionActionsRelationship implements ActionsPipeLine {
  cursor: String!
  node: AnyAction!
  orders: [String!]
}

input PipelineActionActionsResourceActionConnectFieldInput {
  connect: [ResourceActionConnectInput!]
  edge: ActionsPipeLineCreateInput
  where: ResourceActionConnectWhere
}

input PipelineActionActionsResourceActionConnectOrCreateFieldInput {
  onCreate: PipelineActionActionsResourceActionConnectOrCreateFieldInputOnCreate!
  where: ResourceActionConnectOrCreateWhere!
}

input PipelineActionActionsResourceActionConnectOrCreateFieldInputOnCreate {
  edge: ActionsPipeLineCreateInput
  node: ResourceActionOnCreateInput!
}

input PipelineActionActionsResourceActionConnectionWhere {
  AND: [PipelineActionActionsResourceActionConnectionWhere!]
  OR: [PipelineActionActionsResourceActionConnectionWhere!]
  edge: ActionsPipeLineWhere
  edge_NOT: ActionsPipeLineWhere
  node: ResourceActionWhere
  node_NOT: ResourceActionWhere
}

input PipelineActionActionsResourceActionCreateFieldInput {
  edge: ActionsPipeLineCreateInput
  node: ResourceActionCreateInput!
}

input PipelineActionActionsResourceActionDeleteFieldInput {
  delete: ResourceActionDeleteInput
  where: PipelineActionActionsResourceActionConnectionWhere
}

input PipelineActionActionsResourceActionDisconnectFieldInput {
  disconnect: ResourceActionDisconnectInput
  where: PipelineActionActionsResourceActionConnectionWhere
}

input PipelineActionActionsResourceActionFieldInput {
  connect: [PipelineActionActionsResourceActionConnectFieldInput!]
  connectOrCreate: [PipelineActionActionsResourceActionConnectOrCreateFieldInput!]
  create: [PipelineActionActionsResourceActionCreateFieldInput!]
}

input PipelineActionActionsResourceActionUpdateConnectionInput {
  edge: ActionsPipeLineUpdateInput
  node: ResourceActionUpdateInput
}

input PipelineActionActionsResourceActionUpdateFieldInput {
  connect: [PipelineActionActionsResourceActionConnectFieldInput!]
  connectOrCreate: [PipelineActionActionsResourceActionConnectOrCreateFieldInput!]
  create: [PipelineActionActionsResourceActionCreateFieldInput!]
  delete: [PipelineActionActionsResourceActionDeleteFieldInput!]
  disconnect: [PipelineActionActionsResourceActionDisconnectFieldInput!]
  update: PipelineActionActionsResourceActionUpdateConnectionInput
  where: PipelineActionActionsResourceActionConnectionWhere
}

input PipelineActionActionsUpdateInput {
  CustomAction: [PipelineActionActionsCustomActionUpdateFieldInput!]
  PipelineAction: [PipelineActionActionsPipelineActionUpdateFieldInput!]
  ResourceAction: [PipelineActionActionsResourceActionUpdateFieldInput!]
}

type PipelineActionAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PipelineActionConnectInput {
  actions: PipelineActionActionsConnectInput
  store: ActionBaseStoreConnectFieldInput
}

input PipelineActionConnectOrCreateInput {
  actions: PipelineActionActionsConnectOrCreateInput
  store: ActionBaseStoreConnectOrCreateFieldInput
}

input PipelineActionConnectOrCreateWhere {
  node: PipelineActionUniqueWhere!
}

input PipelineActionConnectWhere {
  node: PipelineActionWhere!
}

input PipelineActionCreateInput {
  actions: PipelineActionActionsCreateInput
  id: ID!
  name: String!
  runOnInit: Boolean! = false
  store: ActionBaseStoreFieldInput
  type: ActionKind! = PipelineAction
}

input PipelineActionDeleteInput {
  actions: PipelineActionActionsDeleteInput
  store: ActionBaseStoreDeleteFieldInput
}

input PipelineActionDisconnectInput {
  actions: PipelineActionActionsDisconnectInput
  store: ActionBaseStoreDisconnectFieldInput
}

type PipelineActionEdge {
  cursor: String!
  node: PipelineAction!
}

input PipelineActionOnCreateInput {
  id: ID!
  name: String!
  runOnInit: Boolean! = false
}

input PipelineActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PipelineActionSort objects to sort PipelineActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PipelineActionSort!]
}

input PipelineActionRelationInput {
  actions: PipelineActionActionsCreateFieldInput
  store: ActionBaseStoreCreateFieldInput
}

"""
Fields to sort PipelineActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one PipelineActionSort object.
"""
input PipelineActionSort {
  id: SortDirection
  name: SortDirection
  runOnInit: SortDirection
  type: SortDirection
}

input PipelineActionStoreAggregateInput {
  AND: [PipelineActionStoreAggregateInput!]
  OR: [PipelineActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PipelineActionStoreNodeAggregationWhereInput
}

input PipelineActionStoreNodeAggregationWhereInput {
  AND: [PipelineActionStoreNodeAggregationWhereInput!]
  OR: [PipelineActionStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type PipelineActionStoreStoreAggregationSelection {
  count: Int!
  node: PipelineActionStoreStoreNodeAggregateSelection
}

type PipelineActionStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PipelineActionUniqueWhere {
  id: ID
  name: String
}

input PipelineActionUpdateInput {
  actions: PipelineActionActionsUpdateInput
  id: ID
  name: String
  runOnInit: Boolean
  store: ActionBaseStoreUpdateFieldInput
}

input PipelineActionWhere {
  AND: [PipelineActionWhere!]
  OR: [PipelineActionWhere!]
  actionsConnection_ALL: PipelineActionActionsConnectionWhere
  actionsConnection_NONE: PipelineActionActionsConnectionWhere
  actionsConnection_SINGLE: PipelineActionActionsConnectionWhere
  actionsConnection_SOME: PipelineActionActionsConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  runOnInit: Boolean
  runOnInit_NOT: Boolean
  store: StoreWhere
  storeAggregate: PipelineActionStoreAggregateInput
  storeConnection: ActionBaseStoreConnectionWhere
  storeConnection_NOT: ActionBaseStoreConnectionWhere
  store_NOT: StoreWhere
  type: ActionKind
  type_IN: [ActionKind!]
  type_NOT: ActionKind
  type_NOT_IN: [ActionKind!]
}

type PipelineActionsConnection {
  edges: [PipelineActionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Base atomic building block of the type system. Represents primitive types - String, Integer, Float, Boolean
"""
type PrimitiveType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): PrimitiveTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
  primitiveKind: PrimitiveTypeKind!
}

type PrimitiveTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PrimitiveTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input PrimitiveTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input PrimitiveTypeCreateInput {
  id: ID!
  kind: TypeKind! = PrimitiveType
  name: String!
  owner: TypeBaseOwnerFieldInput
  primitiveKind: PrimitiveTypeKind!
}

input PrimitiveTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input PrimitiveTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type PrimitiveTypeEdge {
  cursor: String!
  node: PrimitiveType!
}

enum PrimitiveTypeKind {
  Boolean
  Float
  Integer
  String
}

input PrimitiveTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PrimitiveTypeSort objects to sort PrimitiveTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PrimitiveTypeSort!]
}

input PrimitiveTypeOwnerAggregateInput {
  AND: [PrimitiveTypeOwnerAggregateInput!]
  OR: [PrimitiveTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PrimitiveTypeOwnerNodeAggregationWhereInput
}

input PrimitiveTypeOwnerNodeAggregationWhereInput {
  AND: [PrimitiveTypeOwnerNodeAggregationWhereInput!]
  OR: [PrimitiveTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input PrimitiveTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort PrimitiveTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one PrimitiveTypeSort object.
"""
input PrimitiveTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
  primitiveKind: SortDirection
}

input PrimitiveTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
  primitiveKind: PrimitiveTypeKind
}

type PrimitiveTypeUserOwnerAggregationSelection {
  count: Int!
  node: PrimitiveTypeUserOwnerNodeAggregateSelection
}

type PrimitiveTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input PrimitiveTypeWhere {
  AND: [PrimitiveTypeWhere!]
  OR: [PrimitiveTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: PrimitiveTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
  primitiveKind: PrimitiveTypeKind
  primitiveKind_IN: [PrimitiveTypeKind!]
  primitiveKind_NOT: PrimitiveTypeKind
  primitiveKind_NOT_IN: [PrimitiveTypeKind!]
}

type PrimitiveTypesConnection {
  edges: [PrimitiveTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Prop {
  data: String!
  id: ID!
}

type PropAggregateSelection {
  count: Int!
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input PropConnectOrCreateWhere {
  node: PropUniqueWhere!
}

input PropConnectWhere {
  node: PropWhere!
}

input PropCreateInput {
  data: String! = "{}"
}

type PropEdge {
  cursor: String!
  node: Prop!
}

type PropMapBinding {
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  elementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PropMapBindingElementElementAggregationSelection
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PropMapBindingElementConnectionSort!]
    where: PropMapBindingElementConnectionWhere
  ): PropMapBindingElementConnection!
  id: ID!
  sourceKey: String!
  targetElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  targetElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PropMapBindingElementTargetElementAggregationSelection
  targetElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PropMapBindingTargetElementConnectionSort!]
    where: PropMapBindingTargetElementConnectionWhere
  ): PropMapBindingTargetElementConnection!
  targetKey: String!
}

type PropMapBindingAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  sourceKey: StringAggregateSelectionNonNullable!
  targetKey: StringAggregateSelectionNonNullable!
}

input PropMapBindingConnectInput {
  element: PropMapBindingElementConnectFieldInput
  targetElement: PropMapBindingTargetElementConnectFieldInput
}

input PropMapBindingConnectOrCreateInput {
  element: PropMapBindingElementConnectOrCreateFieldInput
  targetElement: PropMapBindingTargetElementConnectOrCreateFieldInput
}

input PropMapBindingConnectOrCreateWhere {
  node: PropMapBindingUniqueWhere!
}

input PropMapBindingConnectWhere {
  node: PropMapBindingWhere!
}

input PropMapBindingCreateInput {
  element: PropMapBindingElementFieldInput
  sourceKey: String!
  targetElement: PropMapBindingTargetElementFieldInput
  targetKey: String!
}

input PropMapBindingDeleteInput {
  element: PropMapBindingElementDeleteFieldInput
  targetElement: PropMapBindingTargetElementDeleteFieldInput
}

input PropMapBindingDisconnectInput {
  element: PropMapBindingElementDisconnectFieldInput
  targetElement: PropMapBindingTargetElementDisconnectFieldInput
}

type PropMapBindingEdge {
  cursor: String!
  node: PropMapBinding!
}

input PropMapBindingElementAggregateInput {
  AND: [PropMapBindingElementAggregateInput!]
  OR: [PropMapBindingElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PropMapBindingElementNodeAggregationWhereInput
}

input PropMapBindingElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input PropMapBindingElementConnectOrCreateFieldInput {
  onCreate: PropMapBindingElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PropMapBindingElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PropMapBindingElementConnection {
  edges: [PropMapBindingElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PropMapBindingElementConnectionSort {
  node: ElementSort
}

input PropMapBindingElementConnectionWhere {
  AND: [PropMapBindingElementConnectionWhere!]
  OR: [PropMapBindingElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input PropMapBindingElementCreateFieldInput {
  node: ElementCreateInput!
}

input PropMapBindingElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: PropMapBindingElementConnectionWhere
}

input PropMapBindingElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PropMapBindingElementConnectionWhere
}

type PropMapBindingElementElementAggregationSelection {
  count: Int!
  node: PropMapBindingElementElementNodeAggregateSelection
}

type PropMapBindingElementElementNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input PropMapBindingElementFieldInput {
  connect: PropMapBindingElementConnectFieldInput
  connectOrCreate: PropMapBindingElementConnectOrCreateFieldInput
  create: PropMapBindingElementCreateFieldInput
}

input PropMapBindingElementNodeAggregationWhereInput {
  AND: [PropMapBindingElementNodeAggregationWhereInput!]
  OR: [PropMapBindingElementNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type PropMapBindingElementRelationship {
  cursor: String!
  node: Element!
}

type PropMapBindingElementTargetElementAggregationSelection {
  count: Int!
  node: PropMapBindingElementTargetElementNodeAggregateSelection
}

type PropMapBindingElementTargetElementNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input PropMapBindingElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input PropMapBindingElementUpdateFieldInput {
  connect: PropMapBindingElementConnectFieldInput
  connectOrCreate: PropMapBindingElementConnectOrCreateFieldInput
  create: PropMapBindingElementCreateFieldInput
  delete: PropMapBindingElementDeleteFieldInput
  disconnect: PropMapBindingElementDisconnectFieldInput
  update: PropMapBindingElementUpdateConnectionInput
  where: PropMapBindingElementConnectionWhere
}

input PropMapBindingOnCreateInput {
  sourceKey: String!
  targetKey: String!
}

input PropMapBindingOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PropMapBindingSort objects to sort PropMapBindings by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PropMapBindingSort!]
}

input PropMapBindingRelationInput {
  element: PropMapBindingElementCreateFieldInput
  targetElement: PropMapBindingTargetElementCreateFieldInput
}

"""
Fields to sort PropMapBindings by. The order in which sorts are applied is not guaranteed when specifying many fields in one PropMapBindingSort object.
"""
input PropMapBindingSort {
  id: SortDirection
  sourceKey: SortDirection
  targetKey: SortDirection
}

input PropMapBindingTargetElementAggregateInput {
  AND: [PropMapBindingTargetElementAggregateInput!]
  OR: [PropMapBindingTargetElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PropMapBindingTargetElementNodeAggregationWhereInput
}

input PropMapBindingTargetElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input PropMapBindingTargetElementConnectOrCreateFieldInput {
  onCreate: PropMapBindingTargetElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PropMapBindingTargetElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PropMapBindingTargetElementConnection {
  edges: [PropMapBindingTargetElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PropMapBindingTargetElementConnectionSort {
  node: ElementSort
}

input PropMapBindingTargetElementConnectionWhere {
  AND: [PropMapBindingTargetElementConnectionWhere!]
  OR: [PropMapBindingTargetElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input PropMapBindingTargetElementCreateFieldInput {
  node: ElementCreateInput!
}

input PropMapBindingTargetElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: PropMapBindingTargetElementConnectionWhere
}

input PropMapBindingTargetElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PropMapBindingTargetElementConnectionWhere
}

input PropMapBindingTargetElementFieldInput {
  connect: PropMapBindingTargetElementConnectFieldInput
  connectOrCreate: PropMapBindingTargetElementConnectOrCreateFieldInput
  create: PropMapBindingTargetElementCreateFieldInput
}

input PropMapBindingTargetElementNodeAggregationWhereInput {
  AND: [PropMapBindingTargetElementNodeAggregationWhereInput!]
  OR: [PropMapBindingTargetElementNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type PropMapBindingTargetElementRelationship {
  cursor: String!
  node: Element!
}

input PropMapBindingTargetElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input PropMapBindingTargetElementUpdateFieldInput {
  connect: PropMapBindingTargetElementConnectFieldInput
  connectOrCreate: PropMapBindingTargetElementConnectOrCreateFieldInput
  create: PropMapBindingTargetElementCreateFieldInput
  delete: PropMapBindingTargetElementDeleteFieldInput
  disconnect: PropMapBindingTargetElementDisconnectFieldInput
  update: PropMapBindingTargetElementUpdateConnectionInput
  where: PropMapBindingTargetElementConnectionWhere
}

input PropMapBindingUniqueWhere {
  id: ID
}

input PropMapBindingUpdateInput {
  element: PropMapBindingElementUpdateFieldInput
  sourceKey: String
  targetElement: PropMapBindingTargetElementUpdateFieldInput
  targetKey: String
}

input PropMapBindingWhere {
  AND: [PropMapBindingWhere!]
  OR: [PropMapBindingWhere!]
  element: ElementWhere
  elementAggregate: PropMapBindingElementAggregateInput
  elementConnection: PropMapBindingElementConnectionWhere
  elementConnection_NOT: PropMapBindingElementConnectionWhere
  element_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  sourceKey: String
  sourceKey_CONTAINS: String
  sourceKey_ENDS_WITH: String
  sourceKey_IN: [String!]
  sourceKey_NOT: String
  sourceKey_NOT_CONTAINS: String
  sourceKey_NOT_ENDS_WITH: String
  sourceKey_NOT_IN: [String!]
  sourceKey_NOT_STARTS_WITH: String
  sourceKey_STARTS_WITH: String
  targetElement: ElementWhere
  targetElementAggregate: PropMapBindingTargetElementAggregateInput
  targetElementConnection: PropMapBindingTargetElementConnectionWhere
  targetElementConnection_NOT: PropMapBindingTargetElementConnectionWhere
  targetElement_NOT: ElementWhere
  targetKey: String
  targetKey_CONTAINS: String
  targetKey_ENDS_WITH: String
  targetKey_IN: [String!]
  targetKey_NOT: String
  targetKey_NOT_CONTAINS: String
  targetKey_NOT_ENDS_WITH: String
  targetKey_NOT_IN: [String!]
  targetKey_NOT_STARTS_WITH: String
  targetKey_STARTS_WITH: String
}

type PropMapBindingsConnection {
  edges: [PropMapBindingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PropOnCreateInput {
  data: String! = "{}"
}

input PropOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PropSort objects to sort Props by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PropSort!]
}

"""
Fields to sort Props by. The order in which sorts are applied is not guaranteed when specifying many fields in one PropSort object.
"""
input PropSort {
  data: SortDirection
  id: SortDirection
}

input PropUniqueWhere {
  id: ID
}

input PropUpdateInput {
  data: String
}

input PropWhere {
  AND: [PropWhere!]
  OR: [PropWhere!]
  data: String
  data_CONTAINS: String
  data_ENDS_WITH: String
  data_IN: [String!]
  data_NOT: String
  data_NOT_CONTAINS: String
  data_NOT_ENDS_WITH: String
  data_NOT_IN: [String!]
  data_NOT_STARTS_WITH: String
  data_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
}

type PropsConnection {
  edges: [PropEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  actionTypes(
    options: ActionTypeOptions
    where: ActionTypeWhere
  ): [ActionType!]!
  actionTypesAggregate(where: ActionTypeWhere): ActionTypeAggregateSelection!
  actionTypesConnection(
    after: String
    first: Int
    sort: [ActionTypeSort]
    where: ActionTypeWhere
  ): ActionTypesConnection!
  appTypes(options: AppTypeOptions, where: AppTypeWhere): [AppType!]!
  appTypesAggregate(where: AppTypeWhere): AppTypeAggregateSelection!
  appTypesConnection(
    after: String
    first: Int
    sort: [AppTypeSort]
    where: AppTypeWhere
  ): AppTypesConnection!
  apps(options: AppOptions, where: AppWhere): [App!]!
  appsAggregate(where: AppWhere): AppAggregateSelection!
  appsConnection(
    after: String
    first: Int
    sort: [AppSort]
    where: AppWhere
  ): AppsConnection!
  arrayTypes(options: ArrayTypeOptions, where: ArrayTypeWhere): [ArrayType!]!
  arrayTypesAggregate(where: ArrayTypeWhere): ArrayTypeAggregateSelection!
  arrayTypesConnection(
    after: String
    first: Int
    sort: [ArrayTypeSort]
    where: ArrayTypeWhere
  ): ArrayTypesConnection!
  atoms(options: AtomOptions, where: AtomWhere): [Atom!]!
  atomsAggregate(where: AtomWhere): AtomAggregateSelection!
  atomsConnection(
    after: String
    first: Int
    sort: [AtomSort]
    where: AtomWhere
  ): AtomsConnection!
  components(options: ComponentOptions, where: ComponentWhere): [Component!]!
  componentsAggregate(where: ComponentWhere): ComponentAggregateSelection!
  componentsConnection(
    after: String
    first: Int
    sort: [ComponentSort]
    where: ComponentWhere
  ): ComponentsConnection!
  createInfos(
    options: CreateInfoOptions
    where: CreateInfoWhere
  ): [CreateInfo!]!
  createInfosAggregate(where: CreateInfoWhere): CreateInfoAggregateSelection!
  createInfosConnection(
    after: String
    first: Int
    sort: [CreateInfoSort]
    where: CreateInfoWhere
  ): CreateInfosConnection!
  customActions(
    options: CustomActionOptions
    where: CustomActionWhere
  ): [CustomAction!]!
  customActionsAggregate(
    where: CustomActionWhere
  ): CustomActionAggregateSelection!
  customActionsConnection(
    after: String
    first: Int
    sort: [CustomActionSort]
    where: CustomActionWhere
  ): CustomActionsConnection!
  elementGraph(input: ElementGraphInput!): ElementGraph!
  elementTypes(
    options: ElementTypeOptions
    where: ElementTypeWhere
  ): [ElementType!]!
  elementTypesAggregate(where: ElementTypeWhere): ElementTypeAggregateSelection!
  elementTypesConnection(
    after: String
    first: Int
    sort: [ElementTypeSort]
    where: ElementTypeWhere
  ): ElementTypesConnection!
  elements(options: ElementOptions, where: ElementWhere): [Element!]!
  elementsAggregate(where: ElementWhere): ElementAggregateSelection!
  elementsConnection(
    after: String
    first: Int
    sort: [ElementSort]
    where: ElementWhere
  ): ElementsConnection!
  enumTypeValues(
    options: EnumTypeValueOptions
    where: EnumTypeValueWhere
  ): [EnumTypeValue!]!
  enumTypeValuesAggregate(
    where: EnumTypeValueWhere
  ): EnumTypeValueAggregateSelection!
  enumTypeValuesConnection(
    after: String
    first: Int
    sort: [EnumTypeValueSort]
    where: EnumTypeValueWhere
  ): EnumTypeValuesConnection!
  enumTypes(options: EnumTypeOptions, where: EnumTypeWhere): [EnumType!]!
  enumTypesAggregate(where: EnumTypeWhere): EnumTypeAggregateSelection!
  enumTypesConnection(
    after: String
    first: Int
    sort: [EnumTypeSort]
    where: EnumTypeWhere
  ): EnumTypesConnection!

  """
  Returns a list of all Type and Atom entities that reference the type with the given id
  This could be different types of relationships like Atom-Api, ArrayType-itemType, InterfaceType-field, UnionType-unionTypeChild
  """
  getTypeReferences(typeId: ID!): [TypeReference!]
  hooks(options: HookOptions, where: HookWhere): [Hook!]!
  hooksAggregate(where: HookWhere): HookAggregateSelection!
  hooksConnection(
    after: String
    first: Int
    sort: [HookSort]
    where: HookWhere
  ): HooksConnection!
  interfaceTypes(
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): [InterfaceType!]!
  interfaceTypesAggregate(
    where: InterfaceTypeWhere
  ): InterfaceTypeAggregateSelection!
  interfaceTypesConnection(
    after: String
    first: Int
    sort: [InterfaceTypeSort]
    where: InterfaceTypeWhere
  ): InterfaceTypesConnection!

  """
  Does a recursive check to see if the parent type (parentTypeId) contains the descendant type (descendantTypeId) at any level of nesting. Useful for checking for recursion
  """
  isTypeDescendantOf(descendantTypeId: ID!, parentTypeId: ID!): Boolean
  lambdaTypes(
    options: LambdaTypeOptions
    where: LambdaTypeWhere
  ): [LambdaType!]!
  lambdaTypesAggregate(where: LambdaTypeWhere): LambdaTypeAggregateSelection!
  lambdaTypesConnection(
    after: String
    first: Int
    sort: [LambdaTypeSort]
    where: LambdaTypeWhere
  ): LambdaTypesConnection!
  monacoTypes(
    options: MonacoTypeOptions
    where: MonacoTypeWhere
  ): [MonacoType!]!
  monacoTypesAggregate(where: MonacoTypeWhere): MonacoTypeAggregateSelection!
  monacoTypesConnection(
    after: String
    first: Int
    sort: [MonacoTypeSort]
    where: MonacoTypeWhere
  ): MonacoTypesConnection!
  pageTypes(options: PageTypeOptions, where: PageTypeWhere): [PageType!]!
  pageTypesAggregate(where: PageTypeWhere): PageTypeAggregateSelection!
  pageTypesConnection(
    after: String
    first: Int
    sort: [PageTypeSort]
    where: PageTypeWhere
  ): PageTypesConnection!
  pages(options: PageOptions, where: PageWhere): [Page!]!
  pagesAggregate(where: PageWhere): PageAggregateSelection!
  pagesConnection(
    after: String
    first: Int
    sort: [PageSort]
    where: PageWhere
  ): PagesConnection!
  pipelineActions(
    options: PipelineActionOptions
    where: PipelineActionWhere
  ): [PipelineAction!]!
  pipelineActionsAggregate(
    where: PipelineActionWhere
  ): PipelineActionAggregateSelection!
  pipelineActionsConnection(
    after: String
    first: Int
    sort: [PipelineActionSort]
    where: PipelineActionWhere
  ): PipelineActionsConnection!
  primitiveTypes(
    options: PrimitiveTypeOptions
    where: PrimitiveTypeWhere
  ): [PrimitiveType!]!
  primitiveTypesAggregate(
    where: PrimitiveTypeWhere
  ): PrimitiveTypeAggregateSelection!
  primitiveTypesConnection(
    after: String
    first: Int
    sort: [PrimitiveTypeSort]
    where: PrimitiveTypeWhere
  ): PrimitiveTypesConnection!
  propMapBindings(
    options: PropMapBindingOptions
    where: PropMapBindingWhere
  ): [PropMapBinding!]!
  propMapBindingsAggregate(
    where: PropMapBindingWhere
  ): PropMapBindingAggregateSelection!
  propMapBindingsConnection(
    after: String
    first: Int
    sort: [PropMapBindingSort]
    where: PropMapBindingWhere
  ): PropMapBindingsConnection!
  props(options: PropOptions, where: PropWhere): [Prop!]!
  propsAggregate(where: PropWhere): PropAggregateSelection!
  propsConnection(
    after: String
    first: Int
    sort: [PropSort]
    where: PropWhere
  ): PropsConnection!
  reactNodeTypes(
    options: ReactNodeTypeOptions
    where: ReactNodeTypeWhere
  ): [ReactNodeType!]!
  reactNodeTypesAggregate(
    where: ReactNodeTypeWhere
  ): ReactNodeTypeAggregateSelection!
  reactNodeTypesConnection(
    after: String
    first: Int
    sort: [ReactNodeTypeSort]
    where: ReactNodeTypeWhere
  ): ReactNodeTypesConnection!
  renderPropsTypes(
    options: RenderPropsTypeOptions
    where: RenderPropsTypeWhere
  ): [RenderPropsType!]!
  renderPropsTypesAggregate(
    where: RenderPropsTypeWhere
  ): RenderPropsTypeAggregateSelection!
  renderPropsTypesConnection(
    after: String
    first: Int
    sort: [RenderPropsTypeSort]
    where: RenderPropsTypeWhere
  ): RenderPropsTypesConnection!
  resetDatabaseMutationResponses(
    options: ResetDatabaseMutationResponseOptions
    where: ResetDatabaseMutationResponseWhere
  ): [ResetDatabaseMutationResponse!]!
  resetDatabaseMutationResponsesAggregate(
    where: ResetDatabaseMutationResponseWhere
  ): ResetDatabaseMutationResponseAggregateSelection!
  resetDatabaseMutationResponsesConnection(
    after: String
    first: Int
    sort: [ResetDatabaseMutationResponseSort]
    where: ResetDatabaseMutationResponseWhere
  ): ResetDatabaseMutationResponsesConnection!
  resourceActions(
    options: ResourceActionOptions
    where: ResourceActionWhere
  ): [ResourceAction!]!
  resourceActionsAggregate(
    where: ResourceActionWhere
  ): ResourceActionAggregateSelection!
  resourceActionsConnection(
    after: String
    first: Int
    sort: [ResourceActionSort]
    where: ResourceActionWhere
  ): ResourceActionsConnection!
  resources(options: ResourceOptions, where: ResourceWhere): [Resource!]!
  resourcesAggregate(where: ResourceWhere): ResourceAggregateSelection!
  resourcesConnection(
    after: String
    first: Int
    sort: [ResourceSort]
    where: ResourceWhere
  ): ResourcesConnection!
  stores(options: StoreOptions, where: StoreWhere): [Store!]!
  storesAggregate(where: StoreWhere): StoreAggregateSelection!
  storesConnection(
    after: String
    first: Int
    sort: [StoreSort]
    where: StoreWhere
  ): StoresConnection!
  tagGraphOptions(
    options: TagGraphOptionsOptions
    where: TagGraphOptionsWhere
  ): [TagGraphOptions!]!
  tagGraphOptionsAggregate(
    where: TagGraphOptionsWhere
  ): TagGraphOptionsAggregateSelection!
  tagGraphOptionsConnection(
    after: String
    first: Int
    sort: [TagGraphOptionsSort]
    where: TagGraphOptionsWhere
  ): TagGraphOptionsConnection!
  tagGraphs: [TagGraph!]!
  tags(options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(where: TagWhere): TagAggregateSelection!
  tagsConnection(
    after: String
    first: Int
    sort: [TagSort]
    where: TagWhere
  ): TagsConnection!
  typeReferences(
    options: TypeReferenceOptions
    where: TypeReferenceWhere
  ): [TypeReference!]!
  typeReferencesAggregate(
    where: TypeReferenceWhere
  ): TypeReferenceAggregateSelection!
  typeReferencesConnection(
    after: String
    first: Int
    sort: [TypeReferenceSort]
    where: TypeReferenceWhere
  ): TypeReferencesConnection!
  unionTypes(options: UnionTypeOptions, where: UnionTypeWhere): [UnionType!]!
  unionTypesAggregate(where: UnionTypeWhere): UnionTypeAggregateSelection!
  unionTypesConnection(
    after: String
    first: Int
    sort: [UnionTypeSort]
    where: UnionTypeWhere
  ): UnionTypesConnection!
  users(options: UserOptions, where: UserWhere): [User!]!
  usersAggregate(where: UserWhere): UserAggregateSelection!
  usersConnection(
    after: String
    first: Int
    sort: [UserSort]
    where: UserWhere
  ): UsersConnection!
}

input QueryOptions {
  limit: Int
  offset: Int
}

"""
Allows picking a Component from the list of components.
It is passed to the rendered element as a React node: `ReactNode`
Prop values for this type have the shape of TypedValue in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropsType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNod' value
"""
type ReactNodeType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ReactNodeTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ReactNodeTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ReactNodeTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input ReactNodeTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ReactNodeTypeCreateInput {
  id: ID!
  kind: TypeKind! = ReactNodeType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ReactNodeTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input ReactNodeTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ReactNodeTypeEdge {
  cursor: String!
  node: ReactNodeType!
}

input ReactNodeTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ReactNodeTypeSort objects to sort ReactNodeTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ReactNodeTypeSort!]
}

input ReactNodeTypeOwnerAggregateInput {
  AND: [ReactNodeTypeOwnerAggregateInput!]
  OR: [ReactNodeTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ReactNodeTypeOwnerNodeAggregationWhereInput
}

input ReactNodeTypeOwnerNodeAggregationWhereInput {
  AND: [ReactNodeTypeOwnerNodeAggregationWhereInput!]
  OR: [ReactNodeTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input ReactNodeTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ReactNodeTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ReactNodeTypeSort object.
"""
input ReactNodeTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ReactNodeTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ReactNodeTypeUserOwnerAggregationSelection {
  count: Int!
  node: ReactNodeTypeUserOwnerNodeAggregateSelection
}

type ReactNodeTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ReactNodeTypeWhere {
  AND: [ReactNodeTypeWhere!]
  OR: [ReactNodeTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ReactNodeTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ReactNodeTypesConnection {
  edges: [ReactNodeTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking a Component from the list of components.
It is passed to the rendered element as a function that takes props as input
and returns a React element: '(props) => ReactNode'
Prop values for this type have the shape of TypedValue in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropsType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNod' value
"""
type RenderPropsType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): RenderPropsTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type RenderPropsTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input RenderPropsTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input RenderPropsTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input RenderPropsTypeCreateInput {
  id: ID!
  kind: TypeKind! = RenderPropsType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input RenderPropsTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input RenderPropsTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type RenderPropsTypeEdge {
  cursor: String!
  node: RenderPropsType!
}

input RenderPropsTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more RenderPropsTypeSort objects to sort RenderPropsTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [RenderPropsTypeSort!]
}

input RenderPropsTypeOwnerAggregateInput {
  AND: [RenderPropsTypeOwnerAggregateInput!]
  OR: [RenderPropsTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: RenderPropsTypeOwnerNodeAggregationWhereInput
}

input RenderPropsTypeOwnerNodeAggregationWhereInput {
  AND: [RenderPropsTypeOwnerNodeAggregationWhereInput!]
  OR: [RenderPropsTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input RenderPropsTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort RenderPropsTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one RenderPropsTypeSort object.
"""
input RenderPropsTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input RenderPropsTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type RenderPropsTypeUserOwnerAggregationSelection {
  count: Int!
  node: RenderPropsTypeUserOwnerNodeAggregateSelection
}

type RenderPropsTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input RenderPropsTypeWhere {
  AND: [RenderPropsTypeWhere!]
  OR: [RenderPropsTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: RenderPropsTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type RenderPropsTypesConnection {
  edges: [RenderPropsTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ResetDatabaseMutationResponse {
  success: Boolean
}

type ResetDatabaseMutationResponseAggregateSelection {
  count: Int!
}

input ResetDatabaseMutationResponseCreateInput {
  success: Boolean
}

type ResetDatabaseMutationResponseEdge {
  cursor: String!
  node: ResetDatabaseMutationResponse!
}

input ResetDatabaseMutationResponseOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ResetDatabaseMutationResponseSort objects to sort ResetDatabaseMutationResponses by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ResetDatabaseMutationResponseSort!]
}

"""
Fields to sort ResetDatabaseMutationResponses by. The order in which sorts are applied is not guaranteed when specifying many fields in one ResetDatabaseMutationResponseSort object.
"""
input ResetDatabaseMutationResponseSort {
  success: SortDirection
}

input ResetDatabaseMutationResponseUpdateInput {
  success: Boolean
}

input ResetDatabaseMutationResponseWhere {
  AND: [ResetDatabaseMutationResponseWhere!]
  OR: [ResetDatabaseMutationResponseWhere!]
  success: Boolean
  success_NOT: Boolean
}

type ResetDatabaseMutationResponsesConnection {
  edges: [ResetDatabaseMutationResponseEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Resource implements WithOwner {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ResourcePropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ResourceConfigConnectionSort!]
    where: ResourceConfigConnectionWhere
  ): ResourceConfigConnection!
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ResourceUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  type: ResourceType!
}

type ResourceAction implements ActionBase {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ResourceActionPropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ResourceActionConfigConnectionSort!]
    where: ResourceActionConfigConnectionWhere
  ): ResourceActionConfigConnection!
  errorAction(
    directed: Boolean = true
    options: ActionBaseOptions
    where: ActionBaseWhere
  ): ActionBase!
  errorActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ResourceActionErrorActionConnectionSort!]
    where: ResourceActionErrorActionConnectionWhere
  ): ResourceActionErrorActionConnection!
  id: ID!
  name: String!

  """
  Resource to fetch data from
  """
  resource(
    directed: Boolean = true
    options: ResourceOptions
    where: ResourceWhere
  ): Resource!
  resourceAggregate(
    directed: Boolean = true
    where: ResourceWhere
  ): ResourceActionResourceResourceAggregationSelection
  resourceConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ResourceActionResourceConnectionSort!]
    where: ResourceActionResourceConnectionWhere
  ): ResourceActionResourceConnection!
  runOnInit: Boolean!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): ResourceActionStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ActionBaseStoreConnectionSort!]
    where: ActionBaseStoreConnectionWhere
  ): ActionBaseStoreConnection!

  """
  Response handlers
  """
  successAction(
    directed: Boolean = true
    options: ActionBaseOptions
    where: ActionBaseWhere
  ): ActionBase!
  successActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ResourceActionSuccessActionConnectionSort!]
    where: ResourceActionSuccessActionConnectionWhere
  ): ResourceActionSuccessActionConnection!
  type: ActionKind!
}

type ResourceActionAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ResourceActionConfigAggregateInput {
  AND: [ResourceActionConfigAggregateInput!]
  OR: [ResourceActionConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceActionConfigNodeAggregationWhereInput
}

input ResourceActionConfigConnectFieldInput {
  where: PropConnectWhere
}

input ResourceActionConfigConnectOrCreateFieldInput {
  onCreate: ResourceActionConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ResourceActionConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ResourceActionConfigConnection {
  edges: [ResourceActionConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResourceActionConfigConnectionSort {
  node: PropSort
}

input ResourceActionConfigConnectionWhere {
  AND: [ResourceActionConfigConnectionWhere!]
  OR: [ResourceActionConfigConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input ResourceActionConfigCreateFieldInput {
  node: PropCreateInput!
}

input ResourceActionConfigDeleteFieldInput {
  where: ResourceActionConfigConnectionWhere
}

input ResourceActionConfigDisconnectFieldInput {
  where: ResourceActionConfigConnectionWhere
}

input ResourceActionConfigFieldInput {
  connect: ResourceActionConfigConnectFieldInput
  connectOrCreate: ResourceActionConfigConnectOrCreateFieldInput
  create: ResourceActionConfigCreateFieldInput
}

input ResourceActionConfigNodeAggregationWhereInput {
  AND: [ResourceActionConfigNodeAggregationWhereInput!]
  OR: [ResourceActionConfigNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type ResourceActionConfigRelationship {
  cursor: String!
  node: Prop!
}

input ResourceActionConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input ResourceActionConfigUpdateFieldInput {
  connect: ResourceActionConfigConnectFieldInput
  connectOrCreate: ResourceActionConfigConnectOrCreateFieldInput
  create: ResourceActionConfigCreateFieldInput
  delete: ResourceActionConfigDeleteFieldInput
  disconnect: ResourceActionConfigDisconnectFieldInput
  update: ResourceActionConfigUpdateConnectionInput
  where: ResourceActionConfigConnectionWhere
}

input ResourceActionConnectInput {
  config: ResourceActionConfigConnectFieldInput
  errorAction: ResourceActionErrorActionConnectFieldInput
  resource: ResourceActionResourceConnectFieldInput
  store: ActionBaseStoreConnectFieldInput
  successAction: ResourceActionSuccessActionConnectFieldInput
}

input ResourceActionConnectOrCreateInput {
  config: ResourceActionConfigConnectOrCreateFieldInput
  resource: ResourceActionResourceConnectOrCreateFieldInput
  store: ActionBaseStoreConnectOrCreateFieldInput
}

input ResourceActionConnectOrCreateWhere {
  node: ResourceActionUniqueWhere!
}

input ResourceActionConnectWhere {
  node: ResourceActionWhere!
}

input ResourceActionCreateInput {
  config: ResourceActionConfigFieldInput
  errorAction: ResourceActionErrorActionFieldInput
  id: ID!
  name: String!
  resource: ResourceActionResourceFieldInput
  runOnInit: Boolean! = false
  store: ActionBaseStoreFieldInput
  successAction: ResourceActionSuccessActionFieldInput
  type: ActionKind! = ResourceAction
}

input ResourceActionDeleteInput {
  config: ResourceActionConfigDeleteFieldInput
  errorAction: ResourceActionErrorActionDeleteFieldInput
  resource: ResourceActionResourceDeleteFieldInput
  store: ActionBaseStoreDeleteFieldInput
  successAction: ResourceActionSuccessActionDeleteFieldInput
}

input ResourceActionDisconnectInput {
  config: ResourceActionConfigDisconnectFieldInput
  errorAction: ResourceActionErrorActionDisconnectFieldInput
  resource: ResourceActionResourceDisconnectFieldInput
  store: ActionBaseStoreDisconnectFieldInput
  successAction: ResourceActionSuccessActionDisconnectFieldInput
}

type ResourceActionEdge {
  cursor: String!
  node: ResourceAction!
}

input ResourceActionErrorActionConnectFieldInput {
  connect: ActionBaseConnectInput
  where: ActionBaseConnectWhere
}

type ResourceActionErrorActionConnection {
  edges: [ResourceActionErrorActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResourceActionErrorActionConnectionSort {
  node: ActionBaseSort
}

input ResourceActionErrorActionConnectionWhere {
  AND: [ResourceActionErrorActionConnectionWhere!]
  OR: [ResourceActionErrorActionConnectionWhere!]
  node: ActionBaseWhere
  node_NOT: ActionBaseWhere
}

input ResourceActionErrorActionCreateFieldInput {
  node: ActionBaseCreateInput!
}

input ResourceActionErrorActionDeleteFieldInput {
  delete: ActionBaseDeleteInput
  where: ResourceActionErrorActionConnectionWhere
}

input ResourceActionErrorActionDisconnectFieldInput {
  disconnect: ActionBaseDisconnectInput
  where: ResourceActionErrorActionConnectionWhere
}

input ResourceActionErrorActionFieldInput {
  connect: ResourceActionErrorActionConnectFieldInput
  create: ResourceActionErrorActionCreateFieldInput
}

type ResourceActionErrorActionRelationship {
  cursor: String!
  node: ActionBase!
}

input ResourceActionErrorActionUpdateConnectionInput {
  node: ActionBaseUpdateInput
}

input ResourceActionErrorActionUpdateFieldInput {
  connect: ResourceActionErrorActionConnectFieldInput
  create: ResourceActionErrorActionCreateFieldInput
  delete: ResourceActionErrorActionDeleteFieldInput
  disconnect: ResourceActionErrorActionDisconnectFieldInput
  update: ResourceActionErrorActionUpdateConnectionInput
  where: ResourceActionErrorActionConnectionWhere
}

input ResourceActionOnCreateInput {
  id: ID!
  name: String!
  runOnInit: Boolean! = false
}

input ResourceActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ResourceActionSort objects to sort ResourceActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ResourceActionSort!]
}

type ResourceActionPropConfigAggregationSelection {
  count: Int!
  node: ResourceActionPropConfigNodeAggregateSelection
}

type ResourceActionPropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ResourceActionRelationInput {
  config: ResourceActionConfigCreateFieldInput
  errorAction: ResourceActionErrorActionCreateFieldInput
  resource: ResourceActionResourceCreateFieldInput
  store: ActionBaseStoreCreateFieldInput
  successAction: ResourceActionSuccessActionCreateFieldInput
}

input ResourceActionResourceAggregateInput {
  AND: [ResourceActionResourceAggregateInput!]
  OR: [ResourceActionResourceAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceActionResourceNodeAggregationWhereInput
}

input ResourceActionResourceConnectFieldInput {
  connect: ResourceConnectInput
  where: ResourceConnectWhere
}

input ResourceActionResourceConnectOrCreateFieldInput {
  onCreate: ResourceActionResourceConnectOrCreateFieldInputOnCreate!
  where: ResourceConnectOrCreateWhere!
}

input ResourceActionResourceConnectOrCreateFieldInputOnCreate {
  node: ResourceOnCreateInput!
}

type ResourceActionResourceConnection {
  edges: [ResourceActionResourceRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResourceActionResourceConnectionSort {
  node: ResourceSort
}

input ResourceActionResourceConnectionWhere {
  AND: [ResourceActionResourceConnectionWhere!]
  OR: [ResourceActionResourceConnectionWhere!]
  node: ResourceWhere
  node_NOT: ResourceWhere
}

input ResourceActionResourceCreateFieldInput {
  node: ResourceCreateInput!
}

input ResourceActionResourceDeleteFieldInput {
  delete: ResourceDeleteInput
  where: ResourceActionResourceConnectionWhere
}

input ResourceActionResourceDisconnectFieldInput {
  disconnect: ResourceDisconnectInput
  where: ResourceActionResourceConnectionWhere
}

input ResourceActionResourceFieldInput {
  connect: ResourceActionResourceConnectFieldInput
  connectOrCreate: ResourceActionResourceConnectOrCreateFieldInput
  create: ResourceActionResourceCreateFieldInput
}

input ResourceActionResourceNodeAggregationWhereInput {
  AND: [ResourceActionResourceNodeAggregationWhereInput!]
  OR: [ResourceActionResourceNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ResourceActionResourceRelationship {
  cursor: String!
  node: Resource!
}

type ResourceActionResourceResourceAggregationSelection {
  count: Int!
  node: ResourceActionResourceResourceNodeAggregateSelection
}

type ResourceActionResourceResourceNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ResourceActionResourceUpdateConnectionInput {
  node: ResourceUpdateInput
}

input ResourceActionResourceUpdateFieldInput {
  connect: ResourceActionResourceConnectFieldInput
  connectOrCreate: ResourceActionResourceConnectOrCreateFieldInput
  create: ResourceActionResourceCreateFieldInput
  delete: ResourceActionResourceDeleteFieldInput
  disconnect: ResourceActionResourceDisconnectFieldInput
  update: ResourceActionResourceUpdateConnectionInput
  where: ResourceActionResourceConnectionWhere
}

"""
Fields to sort ResourceActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one ResourceActionSort object.
"""
input ResourceActionSort {
  id: SortDirection
  name: SortDirection
  runOnInit: SortDirection
  type: SortDirection
}

input ResourceActionStoreAggregateInput {
  AND: [ResourceActionStoreAggregateInput!]
  OR: [ResourceActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceActionStoreNodeAggregationWhereInput
}

input ResourceActionStoreNodeAggregationWhereInput {
  AND: [ResourceActionStoreNodeAggregationWhereInput!]
  OR: [ResourceActionStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ResourceActionStoreStoreAggregationSelection {
  count: Int!
  node: ResourceActionStoreStoreNodeAggregateSelection
}

type ResourceActionStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ResourceActionSuccessActionConnectFieldInput {
  connect: ActionBaseConnectInput
  where: ActionBaseConnectWhere
}

type ResourceActionSuccessActionConnection {
  edges: [ResourceActionSuccessActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResourceActionSuccessActionConnectionSort {
  node: ActionBaseSort
}

input ResourceActionSuccessActionConnectionWhere {
  AND: [ResourceActionSuccessActionConnectionWhere!]
  OR: [ResourceActionSuccessActionConnectionWhere!]
  node: ActionBaseWhere
  node_NOT: ActionBaseWhere
}

input ResourceActionSuccessActionCreateFieldInput {
  node: ActionBaseCreateInput!
}

input ResourceActionSuccessActionDeleteFieldInput {
  delete: ActionBaseDeleteInput
  where: ResourceActionSuccessActionConnectionWhere
}

input ResourceActionSuccessActionDisconnectFieldInput {
  disconnect: ActionBaseDisconnectInput
  where: ResourceActionSuccessActionConnectionWhere
}

input ResourceActionSuccessActionFieldInput {
  connect: ResourceActionSuccessActionConnectFieldInput
  create: ResourceActionSuccessActionCreateFieldInput
}

type ResourceActionSuccessActionRelationship {
  cursor: String!
  node: ActionBase!
}

input ResourceActionSuccessActionUpdateConnectionInput {
  node: ActionBaseUpdateInput
}

input ResourceActionSuccessActionUpdateFieldInput {
  connect: ResourceActionSuccessActionConnectFieldInput
  create: ResourceActionSuccessActionCreateFieldInput
  delete: ResourceActionSuccessActionDeleteFieldInput
  disconnect: ResourceActionSuccessActionDisconnectFieldInput
  update: ResourceActionSuccessActionUpdateConnectionInput
  where: ResourceActionSuccessActionConnectionWhere
}

input ResourceActionUniqueWhere {
  id: ID
  name: String
}

input ResourceActionUpdateInput {
  config: ResourceActionConfigUpdateFieldInput
  errorAction: ResourceActionErrorActionUpdateFieldInput
  id: ID
  name: String
  resource: ResourceActionResourceUpdateFieldInput
  runOnInit: Boolean
  store: ActionBaseStoreUpdateFieldInput
  successAction: ResourceActionSuccessActionUpdateFieldInput
}

input ResourceActionWhere {
  AND: [ResourceActionWhere!]
  OR: [ResourceActionWhere!]
  config: PropWhere
  configAggregate: ResourceActionConfigAggregateInput
  configConnection: ResourceActionConfigConnectionWhere
  configConnection_NOT: ResourceActionConfigConnectionWhere
  config_NOT: PropWhere
  errorActionConnection: ResourceActionErrorActionConnectionWhere
  errorActionConnection_NOT: ResourceActionErrorActionConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  resource: ResourceWhere
  resourceAggregate: ResourceActionResourceAggregateInput
  resourceConnection: ResourceActionResourceConnectionWhere
  resourceConnection_NOT: ResourceActionResourceConnectionWhere
  resource_NOT: ResourceWhere
  runOnInit: Boolean
  runOnInit_NOT: Boolean
  store: StoreWhere
  storeAggregate: ResourceActionStoreAggregateInput
  storeConnection: ActionBaseStoreConnectionWhere
  storeConnection_NOT: ActionBaseStoreConnectionWhere
  store_NOT: StoreWhere
  successActionConnection: ResourceActionSuccessActionConnectionWhere
  successActionConnection_NOT: ResourceActionSuccessActionConnectionWhere
  type: ActionKind
  type_IN: [ActionKind!]
  type_NOT: ActionKind
  type_NOT_IN: [ActionKind!]
}

type ResourceActionsConnection {
  edges: [ResourceActionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ResourceAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ResourceConfigAggregateInput {
  AND: [ResourceConfigAggregateInput!]
  OR: [ResourceConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceConfigNodeAggregationWhereInput
}

input ResourceConfigConnectFieldInput {
  where: PropConnectWhere
}

input ResourceConfigConnectOrCreateFieldInput {
  onCreate: ResourceConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ResourceConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ResourceConfigConnection {
  edges: [ResourceConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResourceConfigConnectionSort {
  node: PropSort
}

input ResourceConfigConnectionWhere {
  AND: [ResourceConfigConnectionWhere!]
  OR: [ResourceConfigConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input ResourceConfigCreateFieldInput {
  node: PropCreateInput!
}

input ResourceConfigDeleteFieldInput {
  where: ResourceConfigConnectionWhere
}

input ResourceConfigDisconnectFieldInput {
  where: ResourceConfigConnectionWhere
}

input ResourceConfigFieldInput {
  connect: ResourceConfigConnectFieldInput
  connectOrCreate: ResourceConfigConnectOrCreateFieldInput
  create: ResourceConfigCreateFieldInput
}

input ResourceConfigNodeAggregationWhereInput {
  AND: [ResourceConfigNodeAggregationWhereInput!]
  OR: [ResourceConfigNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type ResourceConfigRelationship {
  cursor: String!
  node: Prop!
}

input ResourceConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input ResourceConfigUpdateFieldInput {
  connect: ResourceConfigConnectFieldInput
  connectOrCreate: ResourceConfigConnectOrCreateFieldInput
  create: ResourceConfigCreateFieldInput
  delete: ResourceConfigDeleteFieldInput
  disconnect: ResourceConfigDisconnectFieldInput
  update: ResourceConfigUpdateConnectionInput
  where: ResourceConfigConnectionWhere
}

input ResourceConnectInput {
  config: ResourceConfigConnectFieldInput
  owner: WithOwnerOwnerConnectFieldInput
}

input ResourceConnectOrCreateInput {
  config: ResourceConfigConnectOrCreateFieldInput
  owner: WithOwnerOwnerConnectOrCreateFieldInput
}

input ResourceConnectOrCreateWhere {
  node: ResourceUniqueWhere!
}

input ResourceConnectWhere {
  node: ResourceWhere!
}

input ResourceCreateInput {
  config: ResourceConfigFieldInput
  name: String!
  owner: WithOwnerOwnerFieldInput
  type: ResourceType!
}

input ResourceDeleteInput {
  config: ResourceConfigDeleteFieldInput
  owner: WithOwnerOwnerDeleteFieldInput
}

input ResourceDisconnectInput {
  config: ResourceConfigDisconnectFieldInput
  owner: WithOwnerOwnerDisconnectFieldInput
}

type ResourceEdge {
  cursor: String!
  node: Resource!
}

input ResourceOnCreateInput {
  name: String!
}

input ResourceOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ResourceSort objects to sort Resources by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ResourceSort!]
}

input ResourceOwnerAggregateInput {
  AND: [ResourceOwnerAggregateInput!]
  OR: [ResourceOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceOwnerNodeAggregationWhereInput
}

input ResourceOwnerNodeAggregationWhereInput {
  AND: [ResourceOwnerNodeAggregationWhereInput!]
  OR: [ResourceOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type ResourcePropConfigAggregationSelection {
  count: Int!
  node: ResourcePropConfigNodeAggregateSelection
}

type ResourcePropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ResourceRelationInput {
  config: ResourceConfigCreateFieldInput
  owner: WithOwnerOwnerCreateFieldInput
}

"""
Fields to sort Resources by. The order in which sorts are applied is not guaranteed when specifying many fields in one ResourceSort object.
"""
input ResourceSort {
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

enum ResourceType {
  GraphQL
  Rest
}

input ResourceUniqueWhere {
  id: ID
}

input ResourceUpdateInput {
  config: ResourceConfigUpdateFieldInput
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  type: ResourceType
}

type ResourceUserOwnerAggregationSelection {
  count: Int!
  node: ResourceUserOwnerNodeAggregateSelection
}

type ResourceUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ResourceWhere {
  AND: [ResourceWhere!]
  OR: [ResourceWhere!]
  config: PropWhere
  configAggregate: ResourceConfigAggregateInput
  configConnection: ResourceConfigConnectionWhere
  configConnection_NOT: ResourceConfigConnectionWhere
  config_NOT: PropWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ResourceOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  type: ResourceType
  type_IN: [ResourceType!]
  type_NOT: ResourceType
  type_NOT_IN: [ResourceType!]
}

type ResourcesConnection {
  edges: [ResourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum Role {
  Admin
  User
}

enum SortDirection {
  """
  Sort by field values in ascending order.
  """
  ASC

  """
  Sort by field values in descending order.
  """
  DESC
}

type Store {
  actions(
    directed: Boolean = true
    options: ActionBaseOptions
    where: ActionBaseWhere
  ): [ActionBase!]!
  actionsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StoreActionsConnectionSort!]
    where: StoreActionsConnectionWhere
  ): StoreActionsConnection!
  id: ID!
  name: String!
  state(directed: Boolean = true, options: PropOptions, where: PropWhere): Prop!
  stateAggregate(
    directed: Boolean = true
    where: PropWhere
  ): StorePropStateAggregationSelection
  stateApi(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  stateApiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): StoreInterfaceTypeStateApiAggregationSelection
  stateApiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StoreStateApiConnectionSort!]
    where: StoreStateApiConnectionWhere
  ): StoreStateApiConnection!
  stateConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StoreStateConnectionSort!]
    where: StoreStateConnectionWhere
  ): StoreStateConnection!
}

input StoreActionsConnectFieldInput {
  connect: ActionBaseConnectInput
  where: ActionBaseConnectWhere
}

type StoreActionsConnection {
  edges: [StoreActionsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreActionsConnectionSort {
  node: ActionBaseSort
}

input StoreActionsConnectionWhere {
  AND: [StoreActionsConnectionWhere!]
  OR: [StoreActionsConnectionWhere!]
  node: ActionBaseWhere
  node_NOT: ActionBaseWhere
}

input StoreActionsCreateFieldInput {
  node: ActionBaseCreateInput!
}

input StoreActionsDeleteFieldInput {
  delete: ActionBaseDeleteInput
  where: StoreActionsConnectionWhere
}

input StoreActionsDisconnectFieldInput {
  disconnect: ActionBaseDisconnectInput
  where: StoreActionsConnectionWhere
}

input StoreActionsFieldInput {
  connect: [StoreActionsConnectFieldInput!]
  create: [StoreActionsCreateFieldInput!]
}

type StoreActionsRelationship {
  cursor: String!
  node: ActionBase!
}

input StoreActionsUpdateConnectionInput {
  node: ActionBaseUpdateInput
}

input StoreActionsUpdateFieldInput {
  connect: [StoreActionsConnectFieldInput!]
  create: [StoreActionsCreateFieldInput!]
  delete: [StoreActionsDeleteFieldInput!]
  disconnect: [StoreActionsDisconnectFieldInput!]
  update: StoreActionsUpdateConnectionInput
  where: StoreActionsConnectionWhere
}

type StoreAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input StoreConnectInput {
  actions: [StoreActionsConnectFieldInput!]
  state: StoreStateConnectFieldInput
  stateApi: StoreStateApiConnectFieldInput
}

input StoreConnectOrCreateInput {
  state: StoreStateConnectOrCreateFieldInput
  stateApi: StoreStateApiConnectOrCreateFieldInput
}

input StoreConnectOrCreateWhere {
  node: StoreUniqueWhere!
}

input StoreConnectWhere {
  node: StoreWhere!
}

input StoreCreateInput {
  actions: StoreActionsFieldInput
  id: ID!
  name: String!
  state: StoreStateFieldInput
  stateApi: StoreStateApiFieldInput
}

input StoreDeleteInput {
  actions: [StoreActionsDeleteFieldInput!]
  state: StoreStateDeleteFieldInput
  stateApi: StoreStateApiDeleteFieldInput
}

input StoreDisconnectInput {
  actions: [StoreActionsDisconnectFieldInput!]
  state: StoreStateDisconnectFieldInput
  stateApi: StoreStateApiDisconnectFieldInput
}

type StoreEdge {
  cursor: String!
  node: Store!
}

type StoreInterfaceTypeStateApiAggregationSelection {
  count: Int!
  node: StoreInterfaceTypeStateApiNodeAggregateSelection
}

type StoreInterfaceTypeStateApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input StoreOnCreateInput {
  id: ID!
  name: String!
}

input StoreOptions {
  limit: Int
  offset: Int

  """
  Specify one or more StoreSort objects to sort Stores by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [StoreSort!]
}

type StorePropStateAggregationSelection {
  count: Int!
  node: StorePropStateNodeAggregateSelection
}

type StorePropStateNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input StoreRelationInput {
  actions: [StoreActionsCreateFieldInput!]
  state: StoreStateCreateFieldInput
  stateApi: StoreStateApiCreateFieldInput
}

"""
Fields to sort Stores by. The order in which sorts are applied is not guaranteed when specifying many fields in one StoreSort object.
"""
input StoreSort {
  id: SortDirection
  name: SortDirection
}

input StoreStateAggregateInput {
  AND: [StoreStateAggregateInput!]
  OR: [StoreStateAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: StoreStateNodeAggregationWhereInput
}

input StoreStateApiAggregateInput {
  AND: [StoreStateApiAggregateInput!]
  OR: [StoreStateApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: StoreStateApiNodeAggregationWhereInput
}

input StoreStateApiConnectFieldInput {
  connect: InterfaceTypeConnectInput
  where: InterfaceTypeConnectWhere
}

input StoreStateApiConnectOrCreateFieldInput {
  onCreate: StoreStateApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input StoreStateApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type StoreStateApiConnection {
  edges: [StoreStateApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreStateApiConnectionSort {
  node: InterfaceTypeSort
}

input StoreStateApiConnectionWhere {
  AND: [StoreStateApiConnectionWhere!]
  OR: [StoreStateApiConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input StoreStateApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input StoreStateApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: StoreStateApiConnectionWhere
}

input StoreStateApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: StoreStateApiConnectionWhere
}

input StoreStateApiFieldInput {
  connect: StoreStateApiConnectFieldInput
  connectOrCreate: StoreStateApiConnectOrCreateFieldInput
  create: StoreStateApiCreateFieldInput
}

input StoreStateApiNodeAggregationWhereInput {
  AND: [StoreStateApiNodeAggregationWhereInput!]
  OR: [StoreStateApiNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type StoreStateApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input StoreStateApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input StoreStateApiUpdateFieldInput {
  connect: StoreStateApiConnectFieldInput
  connectOrCreate: StoreStateApiConnectOrCreateFieldInput
  create: StoreStateApiCreateFieldInput
  delete: StoreStateApiDeleteFieldInput
  disconnect: StoreStateApiDisconnectFieldInput
  update: StoreStateApiUpdateConnectionInput
  where: StoreStateApiConnectionWhere
}

input StoreStateConnectFieldInput {
  where: PropConnectWhere
}

input StoreStateConnectOrCreateFieldInput {
  onCreate: StoreStateConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input StoreStateConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type StoreStateConnection {
  edges: [StoreStateRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreStateConnectionSort {
  node: PropSort
}

input StoreStateConnectionWhere {
  AND: [StoreStateConnectionWhere!]
  OR: [StoreStateConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input StoreStateCreateFieldInput {
  node: PropCreateInput!
}

input StoreStateDeleteFieldInput {
  where: StoreStateConnectionWhere
}

input StoreStateDisconnectFieldInput {
  where: StoreStateConnectionWhere
}

input StoreStateFieldInput {
  connect: StoreStateConnectFieldInput
  connectOrCreate: StoreStateConnectOrCreateFieldInput
  create: StoreStateCreateFieldInput
}

input StoreStateNodeAggregationWhereInput {
  AND: [StoreStateNodeAggregationWhereInput!]
  OR: [StoreStateNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type StoreStateRelationship {
  cursor: String!
  node: Prop!
}

input StoreStateUpdateConnectionInput {
  node: PropUpdateInput
}

input StoreStateUpdateFieldInput {
  connect: StoreStateConnectFieldInput
  connectOrCreate: StoreStateConnectOrCreateFieldInput
  create: StoreStateCreateFieldInput
  delete: StoreStateDeleteFieldInput
  disconnect: StoreStateDisconnectFieldInput
  update: StoreStateUpdateConnectionInput
  where: StoreStateConnectionWhere
}

input StoreUniqueWhere {
  id: ID
}

input StoreUpdateInput {
  actions: [StoreActionsUpdateFieldInput!]
  id: ID
  name: String
  state: StoreStateUpdateFieldInput
  stateApi: StoreStateApiUpdateFieldInput
}

input StoreWhere {
  AND: [StoreWhere!]
  OR: [StoreWhere!]
  actionsConnection_ALL: StoreActionsConnectionWhere
  actionsConnection_NONE: StoreActionsConnectionWhere
  actionsConnection_SINGLE: StoreActionsConnectionWhere
  actionsConnection_SOME: StoreActionsConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  state: PropWhere
  stateAggregate: StoreStateAggregateInput
  stateApi: InterfaceTypeWhere
  stateApiAggregate: StoreStateApiAggregateInput
  stateApiConnection: StoreStateApiConnectionWhere
  stateApiConnection_NOT: StoreStateApiConnectionWhere
  stateApi_NOT: InterfaceTypeWhere
  stateConnection: StoreStateConnectionWhere
  stateConnection_NOT: StoreStateConnectionWhere
  state_NOT: PropWhere
}

type StoresConnection {
  edges: [StoreEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StringAggregateSelectionNonNullable {
  longest: String!
  shortest: String!
}

type StringAggregateSelectionNullable {
  longest: String
  shortest: String
}

type Tag {
  children(
    directed: Boolean = true
    options: TagOptions
    where: TagWhere
  ): [Tag!]!
  childrenAggregate(
    directed: Boolean = true
    where: TagWhere
  ): TagTagChildrenAggregationSelection
  childrenConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagChildrenConnectionSort!]
    where: TagChildrenConnectionWhere
  ): TagChildrenConnection!
  id: ID!
  isRoot: Boolean
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): TagUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagOwnerConnectionSort!]
    where: TagOwnerConnectionWhere
  ): TagOwnerConnection!
  parent(directed: Boolean = true, options: TagOptions, where: TagWhere): Tag
  parentAggregate(
    directed: Boolean = true
    where: TagWhere
  ): TagTagParentAggregationSelection
  parentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagParentConnectionSort!]
    where: TagParentConnectionWhere
  ): TagParentConnection!
}

type TagAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TagChildrenAggregateInput {
  AND: [TagChildrenAggregateInput!]
  OR: [TagChildrenAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagChildrenNodeAggregationWhereInput
}

input TagChildrenConnectFieldInput {
  connect: [TagConnectInput!]
  where: TagConnectWhere
}

input TagChildrenConnectOrCreateFieldInput {
  onCreate: TagChildrenConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input TagChildrenConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type TagChildrenConnection {
  edges: [TagChildrenRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagChildrenConnectionSort {
  node: TagSort
}

input TagChildrenConnectionWhere {
  AND: [TagChildrenConnectionWhere!]
  OR: [TagChildrenConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input TagChildrenCreateFieldInput {
  node: TagCreateInput!
}

input TagChildrenDeleteFieldInput {
  delete: TagDeleteInput
  where: TagChildrenConnectionWhere
}

input TagChildrenDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: TagChildrenConnectionWhere
}

input TagChildrenFieldInput {
  connect: [TagChildrenConnectFieldInput!]
  connectOrCreate: [TagChildrenConnectOrCreateFieldInput!]
  create: [TagChildrenCreateFieldInput!]
}

input TagChildrenNodeAggregationWhereInput {
  AND: [TagChildrenNodeAggregationWhereInput!]
  OR: [TagChildrenNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type TagChildrenRelationship {
  cursor: String!
  node: Tag!
}

input TagChildrenUpdateConnectionInput {
  node: TagUpdateInput
}

input TagChildrenUpdateFieldInput {
  connect: [TagChildrenConnectFieldInput!]
  connectOrCreate: [TagChildrenConnectOrCreateFieldInput!]
  create: [TagChildrenCreateFieldInput!]
  delete: [TagChildrenDeleteFieldInput!]
  disconnect: [TagChildrenDisconnectFieldInput!]
  update: TagChildrenUpdateConnectionInput
  where: TagChildrenConnectionWhere
}

input TagConnectInput {
  children: [TagChildrenConnectFieldInput!]
  owner: TagOwnerConnectFieldInput
  parent: TagParentConnectFieldInput
}

input TagConnectOrCreateInput {
  children: [TagChildrenConnectOrCreateFieldInput!]
  owner: TagOwnerConnectOrCreateFieldInput
  parent: TagParentConnectOrCreateFieldInput
}

input TagConnectOrCreateWhere {
  node: TagUniqueWhere!
}

input TagConnectWhere {
  node: TagWhere!
}

input TagCreateInput {
  children: TagChildrenFieldInput
  name: String!
  owner: TagOwnerFieldInput
  parent: TagParentFieldInput
}

input TagDeleteInput {
  children: [TagChildrenDeleteFieldInput!]
  owner: TagOwnerDeleteFieldInput
  parent: TagParentDeleteFieldInput
}

input TagDisconnectInput {
  children: [TagChildrenDisconnectFieldInput!]
  owner: TagOwnerDisconnectFieldInput
  parent: TagParentDisconnectFieldInput
}

type TagEdge {
  cursor: String!
  node: Tag!
}

type TagGraph {
  descendants: [ID!]!
  id: ID!
  isRoot: Boolean!
  name: String!
}

type TagGraphOptions {
  limit: Int
  sort: Int
}

type TagGraphOptionsAggregateSelection {
  count: Int!
  limit: IntAggregateSelectionNullable!
  sort: IntAggregateSelectionNullable!
}

type TagGraphOptionsConnection {
  edges: [TagGraphOptionsEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagGraphOptionsCreateInput {
  limit: Int
  sort: Int
}

type TagGraphOptionsEdge {
  cursor: String!
  node: TagGraphOptions!
}

input TagGraphOptionsOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TagGraphOptionsSort objects to sort TagGraphOptions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TagGraphOptionsSort!]
}

"""
Fields to sort TagGraphOptions by. The order in which sorts are applied is not guaranteed when specifying many fields in one TagGraphOptionsSort object.
"""
input TagGraphOptionsSort {
  limit: SortDirection
  sort: SortDirection
}

input TagGraphOptionsUpdateInput {
  limit: Int
  sort: Int
}

input TagGraphOptionsWhere {
  AND: [TagGraphOptionsWhere!]
  OR: [TagGraphOptionsWhere!]
  limit: Int
  limit_GT: Int
  limit_GTE: Int
  limit_IN: [Int]
  limit_LT: Int
  limit_LTE: Int
  limit_NOT: Int
  limit_NOT_IN: [Int]
  sort: Int
  sort_GT: Int
  sort_GTE: Int
  sort_IN: [Int]
  sort_LT: Int
  sort_LTE: Int
  sort_NOT: Int
  sort_NOT_IN: [Int]
}

input TagOnCreateInput {
  name: String!
}

input TagOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TagSort objects to sort Tags by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TagSort!]
}

input TagOwnerAggregateInput {
  AND: [TagOwnerAggregateInput!]
  OR: [TagOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagOwnerNodeAggregationWhereInput
}

input TagOwnerConnectFieldInput {
  connect: UserConnectInput
  where: UserConnectWhere
}

input TagOwnerConnectOrCreateFieldInput {
  onCreate: TagOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input TagOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type TagOwnerConnection {
  edges: [TagOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagOwnerConnectionSort {
  node: UserSort
}

input TagOwnerConnectionWhere {
  AND: [TagOwnerConnectionWhere!]
  OR: [TagOwnerConnectionWhere!]
  node: UserWhere
  node_NOT: UserWhere
}

input TagOwnerCreateFieldInput {
  node: UserCreateInput!
}

input TagOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: TagOwnerConnectionWhere
}

input TagOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: TagOwnerConnectionWhere
}

input TagOwnerFieldInput {
  connect: TagOwnerConnectFieldInput
  connectOrCreate: TagOwnerConnectOrCreateFieldInput
  create: TagOwnerCreateFieldInput
}

input TagOwnerNodeAggregationWhereInput {
  AND: [TagOwnerNodeAggregationWhereInput!]
  OR: [TagOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type TagOwnerRelationship {
  cursor: String!
  node: User!
}

input TagOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input TagOwnerUpdateFieldInput {
  connect: TagOwnerConnectFieldInput
  connectOrCreate: TagOwnerConnectOrCreateFieldInput
  create: TagOwnerCreateFieldInput
  delete: TagOwnerDeleteFieldInput
  disconnect: TagOwnerDisconnectFieldInput
  update: TagOwnerUpdateConnectionInput
  where: TagOwnerConnectionWhere
}

input TagParentAggregateInput {
  AND: [TagParentAggregateInput!]
  OR: [TagParentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagParentNodeAggregationWhereInput
}

input TagParentConnectFieldInput {
  connect: TagConnectInput
  where: TagConnectWhere
}

input TagParentConnectOrCreateFieldInput {
  onCreate: TagParentConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input TagParentConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type TagParentConnection {
  edges: [TagParentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagParentConnectionSort {
  node: TagSort
}

input TagParentConnectionWhere {
  AND: [TagParentConnectionWhere!]
  OR: [TagParentConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input TagParentCreateFieldInput {
  node: TagCreateInput!
}

input TagParentDeleteFieldInput {
  delete: TagDeleteInput
  where: TagParentConnectionWhere
}

input TagParentDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: TagParentConnectionWhere
}

input TagParentFieldInput {
  connect: TagParentConnectFieldInput
  connectOrCreate: TagParentConnectOrCreateFieldInput
  create: TagParentCreateFieldInput
}

input TagParentNodeAggregationWhereInput {
  AND: [TagParentNodeAggregationWhereInput!]
  OR: [TagParentNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type TagParentRelationship {
  cursor: String!
  node: Tag!
}

input TagParentUpdateConnectionInput {
  node: TagUpdateInput
}

input TagParentUpdateFieldInput {
  connect: TagParentConnectFieldInput
  connectOrCreate: TagParentConnectOrCreateFieldInput
  create: TagParentCreateFieldInput
  delete: TagParentDeleteFieldInput
  disconnect: TagParentDisconnectFieldInput
  update: TagParentUpdateConnectionInput
  where: TagParentConnectionWhere
}

input TagRelationInput {
  children: [TagChildrenCreateFieldInput!]
  owner: TagOwnerCreateFieldInput
  parent: TagParentCreateFieldInput
}

"""
Fields to sort Tags by. The order in which sorts are applied is not guaranteed when specifying many fields in one TagSort object.
"""
input TagSort {
  id: SortDirection
  isRoot: SortDirection
  name: SortDirection
}

type TagTagChildrenAggregationSelection {
  count: Int!
  node: TagTagChildrenNodeAggregateSelection
}

type TagTagChildrenNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type TagTagParentAggregationSelection {
  count: Int!
  node: TagTagParentNodeAggregateSelection
}

type TagTagParentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TagUniqueWhere {
  id: ID
  name: String
}

input TagUpdateInput {
  children: [TagChildrenUpdateFieldInput!]
  name: String
  owner: TagOwnerUpdateFieldInput
  parent: TagParentUpdateFieldInput
}

type TagUserOwnerAggregationSelection {
  count: Int!
  node: TagUserOwnerNodeAggregateSelection
}

type TagUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input TagWhere {
  AND: [TagWhere!]
  OR: [TagWhere!]
  childrenAggregate: TagChildrenAggregateInput
  childrenConnection_ALL: TagChildrenConnectionWhere
  childrenConnection_NONE: TagChildrenConnectionWhere
  childrenConnection_SINGLE: TagChildrenConnectionWhere
  childrenConnection_SOME: TagChildrenConnectionWhere

  """
  Return Tags where all of the related Tags match this filter
  """
  children_ALL: TagWhere

  """
  Return Tags where none of the related Tags match this filter
  """
  children_NONE: TagWhere

  """
  Return Tags where one of the related Tags match this filter
  """
  children_SINGLE: TagWhere

  """
  Return Tags where some of the related Tags match this filter
  """
  children_SOME: TagWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: TagOwnerAggregateInput
  ownerConnection: TagOwnerConnectionWhere
  ownerConnection_NOT: TagOwnerConnectionWhere
  owner_NOT: UserWhere
  parent: TagWhere
  parentAggregate: TagParentAggregateInput
  parentConnection: TagParentConnectionWhere
  parentConnection_NOT: TagParentConnectionWhere
  parent_NOT: TagWhere
}

type TagsConnection {
  edges: [TagEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

input TypeBaseConnectInput {
  _on: TypeBaseImplementationsConnectInput
  owner: TypeBaseOwnerConnectFieldInput
}

input TypeBaseConnectWhere {
  node: TypeBaseWhere!
}

input TypeBaseCreateInput {
  ActionType: ActionTypeCreateInput
  AppType: AppTypeCreateInput
  ArrayType: ArrayTypeCreateInput
  ElementType: ElementTypeCreateInput
  EnumType: EnumTypeCreateInput
  InterfaceType: InterfaceTypeCreateInput
  LambdaType: LambdaTypeCreateInput
  MonacoType: MonacoTypeCreateInput
  PageType: PageTypeCreateInput
  PrimitiveType: PrimitiveTypeCreateInput
  ReactNodeType: ReactNodeTypeCreateInput
  RenderPropsType: RenderPropsTypeCreateInput
  UnionType: UnionTypeCreateInput
}

input TypeBaseDeleteInput {
  _on: TypeBaseImplementationsDeleteInput
  owner: TypeBaseOwnerDeleteFieldInput
}

input TypeBaseDisconnectInput {
  _on: TypeBaseImplementationsDisconnectInput
  owner: TypeBaseOwnerDisconnectFieldInput
}

input TypeBaseImplementationsConnectInput {
  ActionType: [ActionTypeConnectInput!]
  AppType: [AppTypeConnectInput!]
  ArrayType: [ArrayTypeConnectInput!]
  ElementType: [ElementTypeConnectInput!]
  EnumType: [EnumTypeConnectInput!]
  InterfaceType: [InterfaceTypeConnectInput!]
  LambdaType: [LambdaTypeConnectInput!]
  MonacoType: [MonacoTypeConnectInput!]
  PageType: [PageTypeConnectInput!]
  PrimitiveType: [PrimitiveTypeConnectInput!]
  ReactNodeType: [ReactNodeTypeConnectInput!]
  RenderPropsType: [RenderPropsTypeConnectInput!]
  UnionType: [UnionTypeConnectInput!]
}

input TypeBaseImplementationsDeleteInput {
  ActionType: [ActionTypeDeleteInput!]
  AppType: [AppTypeDeleteInput!]
  ArrayType: [ArrayTypeDeleteInput!]
  ElementType: [ElementTypeDeleteInput!]
  EnumType: [EnumTypeDeleteInput!]
  InterfaceType: [InterfaceTypeDeleteInput!]
  LambdaType: [LambdaTypeDeleteInput!]
  MonacoType: [MonacoTypeDeleteInput!]
  PageType: [PageTypeDeleteInput!]
  PrimitiveType: [PrimitiveTypeDeleteInput!]
  ReactNodeType: [ReactNodeTypeDeleteInput!]
  RenderPropsType: [RenderPropsTypeDeleteInput!]
  UnionType: [UnionTypeDeleteInput!]
}

input TypeBaseImplementationsDisconnectInput {
  ActionType: [ActionTypeDisconnectInput!]
  AppType: [AppTypeDisconnectInput!]
  ArrayType: [ArrayTypeDisconnectInput!]
  ElementType: [ElementTypeDisconnectInput!]
  EnumType: [EnumTypeDisconnectInput!]
  InterfaceType: [InterfaceTypeDisconnectInput!]
  LambdaType: [LambdaTypeDisconnectInput!]
  MonacoType: [MonacoTypeDisconnectInput!]
  PageType: [PageTypeDisconnectInput!]
  PrimitiveType: [PrimitiveTypeDisconnectInput!]
  ReactNodeType: [ReactNodeTypeDisconnectInput!]
  RenderPropsType: [RenderPropsTypeDisconnectInput!]
  UnionType: [UnionTypeDisconnectInput!]
}

input TypeBaseImplementationsUpdateInput {
  ActionType: ActionTypeUpdateInput
  AppType: AppTypeUpdateInput
  ArrayType: ArrayTypeUpdateInput
  ElementType: ElementTypeUpdateInput
  EnumType: EnumTypeUpdateInput
  InterfaceType: InterfaceTypeUpdateInput
  LambdaType: LambdaTypeUpdateInput
  MonacoType: MonacoTypeUpdateInput
  PageType: PageTypeUpdateInput
  PrimitiveType: PrimitiveTypeUpdateInput
  ReactNodeType: ReactNodeTypeUpdateInput
  RenderPropsType: RenderPropsTypeUpdateInput
  UnionType: UnionTypeUpdateInput
}

input TypeBaseImplementationsWhere {
  ActionType: ActionTypeWhere
  AppType: AppTypeWhere
  ArrayType: ArrayTypeWhere
  ElementType: ElementTypeWhere
  EnumType: EnumTypeWhere
  InterfaceType: InterfaceTypeWhere
  LambdaType: LambdaTypeWhere
  MonacoType: MonacoTypeWhere
  PageType: PageTypeWhere
  PrimitiveType: PrimitiveTypeWhere
  ReactNodeType: ReactNodeTypeWhere
  RenderPropsType: RenderPropsTypeWhere
  UnionType: UnionTypeWhere
}

input TypeBaseOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TypeBaseSort objects to sort TypeBases by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TypeBaseSort]
}

input TypeBaseOwnerAggregateInput {
  AND: [TypeBaseOwnerAggregateInput!]
  OR: [TypeBaseOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TypeBaseOwnerNodeAggregationWhereInput
}

input TypeBaseOwnerConnectFieldInput {
  connect: UserConnectInput
  where: UserConnectWhere
}

input TypeBaseOwnerConnectOrCreateFieldInput {
  onCreate: TypeBaseOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input TypeBaseOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type TypeBaseOwnerConnection {
  edges: [TypeBaseOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TypeBaseOwnerConnectionSort {
  node: UserSort
}

input TypeBaseOwnerConnectionWhere {
  AND: [TypeBaseOwnerConnectionWhere!]
  OR: [TypeBaseOwnerConnectionWhere!]
  node: UserWhere
  node_NOT: UserWhere
}

input TypeBaseOwnerCreateFieldInput {
  node: UserCreateInput!
}

input TypeBaseOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: TypeBaseOwnerConnectionWhere
}

input TypeBaseOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: TypeBaseOwnerConnectionWhere
}

input TypeBaseOwnerFieldInput {
  connect: TypeBaseOwnerConnectFieldInput
  connectOrCreate: TypeBaseOwnerConnectOrCreateFieldInput
  create: TypeBaseOwnerCreateFieldInput
}

input TypeBaseOwnerNodeAggregationWhereInput {
  AND: [TypeBaseOwnerNodeAggregationWhereInput!]
  OR: [TypeBaseOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type TypeBaseOwnerRelationship {
  cursor: String!
  node: User!
}

input TypeBaseOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input TypeBaseOwnerUpdateFieldInput {
  connect: TypeBaseOwnerConnectFieldInput
  connectOrCreate: TypeBaseOwnerConnectOrCreateFieldInput
  create: TypeBaseOwnerCreateFieldInput
  delete: TypeBaseOwnerDeleteFieldInput
  disconnect: TypeBaseOwnerDisconnectFieldInput
  update: TypeBaseOwnerUpdateConnectionInput
  where: TypeBaseOwnerConnectionWhere
}

"""
Fields to sort TypeBases by. The order in which sorts are applied is not guaranteed when specifying many fields in one TypeBaseSort object.
"""
input TypeBaseSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input TypeBaseUpdateInput {
  _on: TypeBaseImplementationsUpdateInput
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

input TypeBaseWhere {
  _on: TypeBaseImplementationsWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: TypeBaseOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

enum TypeKind {
  ActionType
  AppType
  ArrayType
  ElementType
  EnumType
  InterfaceType
  LambdaType
  MonacoType
  PageType
  PrimitiveType
  ReactNodeType
  RenderPropsType
  UnionType
}

type TypeReference {
  """
  The type of resource - Atom, InterfaceType, etc.
  """
  label: String!

  """
  The name of the resource referencing the type
  """
  name: String!
}

type TypeReferenceAggregateSelection {
  count: Int!
  label: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TypeReferenceCreateInput {
  label: String!
  name: String!
}

type TypeReferenceEdge {
  cursor: String!
  node: TypeReference!
}

input TypeReferenceOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TypeReferenceSort objects to sort TypeReferences by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TypeReferenceSort!]
}

"""
Fields to sort TypeReferences by. The order in which sorts are applied is not guaranteed when specifying many fields in one TypeReferenceSort object.
"""
input TypeReferenceSort {
  label: SortDirection
  name: SortDirection
}

input TypeReferenceUpdateInput {
  label: String
  name: String
}

input TypeReferenceWhere {
  AND: [TypeReferenceWhere!]
  OR: [TypeReferenceWhere!]
  label: String
  label_CONTAINS: String
  label_ENDS_WITH: String
  label_IN: [String!]
  label_NOT: String
  label_NOT_CONTAINS: String
  label_NOT_ENDS_WITH: String
  label_NOT_IN: [String!]
  label_NOT_STARTS_WITH: String
  label_STARTS_WITH: String
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
}

type TypeReferencesConnection {
  edges: [TypeReferenceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking one of a set of types
"""
type UnionType implements TypeBase & WithDescendants {
  descendantTypesIds: [ID!]!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): UnionTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
  typesOfUnionType(
    directed: Boolean = true
    options: TypeBaseOptions
    where: TypeBaseWhere
  ): [TypeBase!]!
  typesOfUnionTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UnionTypeTypesOfUnionTypeConnectionSort!]
    where: UnionTypeTypesOfUnionTypeConnectionWhere
  ): UnionTypeTypesOfUnionTypeConnection!
}

type UnionTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UnionTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
  typesOfUnionType: [UnionTypeTypesOfUnionTypeConnectFieldInput!]
}

input UnionTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input UnionTypeCreateInput {
  id: ID!
  kind: TypeKind! = UnionType
  name: String!
  owner: TypeBaseOwnerFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeFieldInput
}

input UnionTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
  typesOfUnionType: [UnionTypeTypesOfUnionTypeDeleteFieldInput!]
}

input UnionTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
  typesOfUnionType: [UnionTypeTypesOfUnionTypeDisconnectFieldInput!]
}

type UnionTypeEdge {
  cursor: String!
  node: UnionType!
}

input UnionTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more UnionTypeSort objects to sort UnionTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [UnionTypeSort!]
}

input UnionTypeOwnerAggregateInput {
  AND: [UnionTypeOwnerAggregateInput!]
  OR: [UnionTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UnionTypeOwnerNodeAggregationWhereInput
}

input UnionTypeOwnerNodeAggregationWhereInput {
  AND: [UnionTypeOwnerNodeAggregationWhereInput!]
  OR: [UnionTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
}

input UnionTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
  typesOfUnionType: [UnionTypeTypesOfUnionTypeCreateFieldInput!]
}

"""
Fields to sort UnionTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one UnionTypeSort object.
"""
input UnionTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input UnionTypeTypesOfUnionTypeConnectFieldInput {
  connect: TypeBaseConnectInput
  where: TypeBaseConnectWhere
}

type UnionTypeTypesOfUnionTypeConnection {
  edges: [UnionTypeTypesOfUnionTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UnionTypeTypesOfUnionTypeConnectionSort {
  node: TypeBaseSort
}

input UnionTypeTypesOfUnionTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeConnectionWhere!]
  node: TypeBaseWhere
  node_NOT: TypeBaseWhere
}

input UnionTypeTypesOfUnionTypeCreateFieldInput {
  node: TypeBaseCreateInput!
}

input UnionTypeTypesOfUnionTypeDeleteFieldInput {
  delete: TypeBaseDeleteInput
  where: UnionTypeTypesOfUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeDisconnectFieldInput {
  disconnect: TypeBaseDisconnectInput
  where: UnionTypeTypesOfUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeConnectFieldInput!]
  create: [UnionTypeTypesOfUnionTypeCreateFieldInput!]
}

type UnionTypeTypesOfUnionTypeRelationship {
  cursor: String!
  node: TypeBase!
}

input UnionTypeTypesOfUnionTypeUpdateConnectionInput {
  node: TypeBaseUpdateInput
}

input UnionTypeTypesOfUnionTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeConnectFieldInput!]
  create: [UnionTypeTypesOfUnionTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeConnectionWhere
}

input UnionTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
  typesOfUnionType: [UnionTypeTypesOfUnionTypeUpdateFieldInput!]
}

type UnionTypeUserOwnerAggregationSelection {
  count: Int!
  node: UnionTypeUserOwnerNodeAggregateSelection
}

type UnionTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input UnionTypeWhere {
  AND: [UnionTypeWhere!]
  OR: [UnionTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: UnionTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
  typesOfUnionTypeConnection_ALL: UnionTypeTypesOfUnionTypeConnectionWhere
  typesOfUnionTypeConnection_NONE: UnionTypeTypesOfUnionTypeConnectionWhere
  typesOfUnionTypeConnection_SINGLE: UnionTypeTypesOfUnionTypeConnectionWhere
  typesOfUnionTypeConnection_SOME: UnionTypeTypesOfUnionTypeConnectionWhere
}

type UnionTypesConnection {
  edges: [UnionTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UpdateActionTypesMutationResponse {
  actionTypes: [ActionType!]!
  info: UpdateInfo!
}

type UpdateAppTypesMutationResponse {
  appTypes: [AppType!]!
  info: UpdateInfo!
}

type UpdateAppsMutationResponse {
  apps: [App!]!
  info: UpdateInfo!
}

type UpdateArrayTypesMutationResponse {
  arrayTypes: [ArrayType!]!
  info: UpdateInfo!
}

type UpdateAtomsMutationResponse {
  atoms: [Atom!]!
  info: UpdateInfo!
}

type UpdateComponentsMutationResponse {
  components: [Component!]!
  info: UpdateInfo!
}

type UpdateCreateInfosMutationResponse {
  createInfos: [CreateInfo!]!
  info: UpdateInfo!
}

type UpdateCustomActionsMutationResponse {
  customActions: [CustomAction!]!
  info: UpdateInfo!
}

type UpdateElementTypesMutationResponse {
  elementTypes: [ElementType!]!
  info: UpdateInfo!
}

type UpdateElementsMutationResponse {
  elements: [Element!]!
  info: UpdateInfo!
}

type UpdateEnumTypeValuesMutationResponse {
  enumTypeValues: [EnumTypeValue!]!
  info: UpdateInfo!
}

type UpdateEnumTypesMutationResponse {
  enumTypes: [EnumType!]!
  info: UpdateInfo!
}

type UpdateHooksMutationResponse {
  hooks: [Hook!]!
  info: UpdateInfo!
}

type UpdateInfo {
  bookmark: String
  nodesCreated: Int!
  nodesDeleted: Int!
  relationshipsCreated: Int!
  relationshipsDeleted: Int!
}

type UpdateInterfaceTypesMutationResponse {
  info: UpdateInfo!
  interfaceTypes: [InterfaceType!]!
}

type UpdateLambdaTypesMutationResponse {
  info: UpdateInfo!
  lambdaTypes: [LambdaType!]!
}

type UpdateMonacoTypesMutationResponse {
  info: UpdateInfo!
  monacoTypes: [MonacoType!]!
}

type UpdatePageTypesMutationResponse {
  info: UpdateInfo!
  pageTypes: [PageType!]!
}

type UpdatePagesMutationResponse {
  info: UpdateInfo!
  pages: [Page!]!
}

type UpdatePipelineActionsMutationResponse {
  info: UpdateInfo!
  pipelineActions: [PipelineAction!]!
}

type UpdatePrimitiveTypesMutationResponse {
  info: UpdateInfo!
  primitiveTypes: [PrimitiveType!]!
}

type UpdatePropMapBindingsMutationResponse {
  info: UpdateInfo!
  propMapBindings: [PropMapBinding!]!
}

type UpdatePropsMutationResponse {
  info: UpdateInfo!
  props: [Prop!]!
}

type UpdateReactNodeTypesMutationResponse {
  info: UpdateInfo!
  reactNodeTypes: [ReactNodeType!]!
}

type UpdateRenderPropsTypesMutationResponse {
  info: UpdateInfo!
  renderPropsTypes: [RenderPropsType!]!
}

type UpdateResetDatabaseMutationResponsesMutationResponse {
  info: UpdateInfo!
  resetDatabaseMutationResponses: [ResetDatabaseMutationResponse!]!
}

type UpdateResourceActionsMutationResponse {
  info: UpdateInfo!
  resourceActions: [ResourceAction!]!
}

type UpdateResourcesMutationResponse {
  info: UpdateInfo!
  resources: [Resource!]!
}

type UpdateStoresMutationResponse {
  info: UpdateInfo!
  stores: [Store!]!
}

type UpdateTagGraphOptionsMutationResponse {
  info: UpdateInfo!
  tagGraphOptions: [TagGraphOptions!]!
}

type UpdateTagsMutationResponse {
  info: UpdateInfo!
  tags: [Tag!]!
}

type UpdateTypeReferencesMutationResponse {
  info: UpdateInfo!
  typeReferences: [TypeReference!]!
}

type UpdateUnionTypesMutationResponse {
  info: UpdateInfo!
  unionTypes: [UnionType!]!
}

type User {
  apps(directed: Boolean = true, options: AppOptions, where: AppWhere): [App!]!
  appsAggregate(
    directed: Boolean = true
    where: AppWhere
  ): UserAppAppsAggregationSelection
  appsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserAppsConnectionSort!]
    where: UserAppsConnectionWhere
  ): UserAppsConnection!
  auth0Id: String!
  components(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): [Component!]!
  componentsAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): UserComponentComponentsAggregationSelection
  componentsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserComponentsConnectionSort!]
    where: UserComponentsConnectionWhere
  ): UserComponentsConnection!
  elements(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): [Element!]!
  elementsAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): UserElementElementsAggregationSelection
  elementsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserElementsConnectionSort!]
    where: UserElementsConnectionWhere
  ): UserElementsConnection!
  email: String!
  id: ID!
  roles: [Role!]
  tags(directed: Boolean = true, options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(
    directed: Boolean = true
    where: TagWhere
  ): UserTagTagsAggregationSelection
  tagsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserTagsConnectionSort!]
    where: UserTagsConnectionWhere
  ): UserTagsConnection!
  types(
    directed: Boolean = true
    options: TypeBaseOptions
    where: TypeBaseWhere
  ): [TypeBase!]!
  typesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserTypesConnectionSort!]
    where: UserTypesConnectionWhere
  ): UserTypesConnection!
}

type UserAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  count: Int!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

type UserAppAppsAggregationSelection {
  count: Int!
  node: UserAppAppsNodeAggregateSelection
}

type UserAppAppsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserAppsAggregateInput {
  AND: [UserAppsAggregateInput!]
  OR: [UserAppsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserAppsNodeAggregationWhereInput
}

input UserAppsConnectFieldInput {
  connect: [AppConnectInput!]
  where: AppConnectWhere
}

input UserAppsConnectOrCreateFieldInput {
  onCreate: UserAppsConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input UserAppsConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type UserAppsConnection {
  edges: [UserAppsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserAppsConnectionSort {
  node: AppSort
}

input UserAppsConnectionWhere {
  AND: [UserAppsConnectionWhere!]
  OR: [UserAppsConnectionWhere!]
  node: AppWhere
  node_NOT: AppWhere
}

input UserAppsCreateFieldInput {
  node: AppCreateInput!
}

input UserAppsDeleteFieldInput {
  delete: AppDeleteInput
  where: UserAppsConnectionWhere
}

input UserAppsDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: UserAppsConnectionWhere
}

input UserAppsFieldInput {
  connect: [UserAppsConnectFieldInput!]
  connectOrCreate: [UserAppsConnectOrCreateFieldInput!]
  create: [UserAppsCreateFieldInput!]
}

input UserAppsNodeAggregationWhereInput {
  AND: [UserAppsNodeAggregationWhereInput!]
  OR: [UserAppsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type UserAppsRelationship {
  cursor: String!
  node: App!
}

input UserAppsUpdateConnectionInput {
  node: AppUpdateInput
}

input UserAppsUpdateFieldInput {
  connect: [UserAppsConnectFieldInput!]
  connectOrCreate: [UserAppsConnectOrCreateFieldInput!]
  create: [UserAppsCreateFieldInput!]
  delete: [UserAppsDeleteFieldInput!]
  disconnect: [UserAppsDisconnectFieldInput!]
  update: UserAppsUpdateConnectionInput
  where: UserAppsConnectionWhere
}

type UserComponentComponentsAggregationSelection {
  count: Int!
  node: UserComponentComponentsNodeAggregateSelection
}

type UserComponentComponentsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserComponentsAggregateInput {
  AND: [UserComponentsAggregateInput!]
  OR: [UserComponentsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserComponentsNodeAggregationWhereInput
}

input UserComponentsConnectFieldInput {
  connect: [ComponentConnectInput!]
  where: ComponentConnectWhere
}

input UserComponentsConnectOrCreateFieldInput {
  onCreate: UserComponentsConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input UserComponentsConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type UserComponentsConnection {
  edges: [UserComponentsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserComponentsConnectionSort {
  node: ComponentSort
}

input UserComponentsConnectionWhere {
  AND: [UserComponentsConnectionWhere!]
  OR: [UserComponentsConnectionWhere!]
  node: ComponentWhere
  node_NOT: ComponentWhere
}

input UserComponentsCreateFieldInput {
  node: ComponentCreateInput!
}

input UserComponentsDeleteFieldInput {
  delete: ComponentDeleteInput
  where: UserComponentsConnectionWhere
}

input UserComponentsDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: UserComponentsConnectionWhere
}

input UserComponentsFieldInput {
  connect: [UserComponentsConnectFieldInput!]
  connectOrCreate: [UserComponentsConnectOrCreateFieldInput!]
  create: [UserComponentsCreateFieldInput!]
}

input UserComponentsNodeAggregationWhereInput {
  AND: [UserComponentsNodeAggregationWhereInput!]
  OR: [UserComponentsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type UserComponentsRelationship {
  cursor: String!
  node: Component!
}

input UserComponentsUpdateConnectionInput {
  node: ComponentUpdateInput
}

input UserComponentsUpdateFieldInput {
  connect: [UserComponentsConnectFieldInput!]
  connectOrCreate: [UserComponentsConnectOrCreateFieldInput!]
  create: [UserComponentsCreateFieldInput!]
  delete: [UserComponentsDeleteFieldInput!]
  disconnect: [UserComponentsDisconnectFieldInput!]
  update: UserComponentsUpdateConnectionInput
  where: UserComponentsConnectionWhere
}

input UserConnectInput {
  apps: [UserAppsConnectFieldInput!]
  components: [UserComponentsConnectFieldInput!]
  elements: [UserElementsConnectFieldInput!]
  tags: [UserTagsConnectFieldInput!]
  types: [UserTypesConnectFieldInput!]
}

input UserConnectOrCreateWhere {
  node: UserUniqueWhere!
}

input UserConnectWhere {
  node: UserWhere!
}

input UserCreateInput {
  apps: UserAppsFieldInput
  auth0Id: String!
  components: UserComponentsFieldInput
  elements: UserElementsFieldInput
  email: String!
  roles: [Role!]
  tags: UserTagsFieldInput
  types: UserTypesFieldInput
}

input UserDeleteInput {
  apps: [UserAppsDeleteFieldInput!]
  components: [UserComponentsDeleteFieldInput!]
  elements: [UserElementsDeleteFieldInput!]
  tags: [UserTagsDeleteFieldInput!]
  types: [UserTypesDeleteFieldInput!]
}

input UserDisconnectInput {
  apps: [UserAppsDisconnectFieldInput!]
  components: [UserComponentsDisconnectFieldInput!]
  elements: [UserElementsDisconnectFieldInput!]
  tags: [UserTagsDisconnectFieldInput!]
  types: [UserTypesDisconnectFieldInput!]
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserElementElementsAggregationSelection {
  count: Int!
  node: UserElementElementsNodeAggregateSelection
}

type UserElementElementsNodeAggregateSelection {
  css: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input UserElementsAggregateInput {
  AND: [UserElementsAggregateInput!]
  OR: [UserElementsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserElementsNodeAggregationWhereInput
}

input UserElementsConnectFieldInput {
  connect: [ElementConnectInput!]
  where: ElementConnectWhere
}

input UserElementsConnectOrCreateFieldInput {
  onCreate: UserElementsConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input UserElementsConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type UserElementsConnection {
  edges: [UserElementsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserElementsConnectionSort {
  node: ElementSort
}

input UserElementsConnectionWhere {
  AND: [UserElementsConnectionWhere!]
  OR: [UserElementsConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input UserElementsCreateFieldInput {
  node: ElementCreateInput!
}

input UserElementsDeleteFieldInput {
  delete: ElementDeleteInput
  where: UserElementsConnectionWhere
}

input UserElementsDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: UserElementsConnectionWhere
}

input UserElementsFieldInput {
  connect: [UserElementsConnectFieldInput!]
  connectOrCreate: [UserElementsConnectOrCreateFieldInput!]
  create: [UserElementsCreateFieldInput!]
}

input UserElementsNodeAggregationWhereInput {
  AND: [UserElementsNodeAggregationWhereInput!]
  OR: [UserElementsNodeAggregationWhereInput!]
  css_AVERAGE_EQUAL: Float
  css_AVERAGE_GT: Float
  css_AVERAGE_GTE: Float
  css_AVERAGE_LT: Float
  css_AVERAGE_LTE: Float
  css_EQUAL: String
  css_GT: Int
  css_GTE: Int
  css_LONGEST_EQUAL: Int
  css_LONGEST_GT: Int
  css_LONGEST_GTE: Int
  css_LONGEST_LT: Int
  css_LONGEST_LTE: Int
  css_LT: Int
  css_LTE: Int
  css_SHORTEST_EQUAL: Int
  css_SHORTEST_GT: Int
  css_SHORTEST_GTE: Int
  css_SHORTEST_LT: Int
  css_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type UserElementsRelationship {
  cursor: String!
  node: Element!
}

input UserElementsUpdateConnectionInput {
  node: ElementUpdateInput
}

input UserElementsUpdateFieldInput {
  connect: [UserElementsConnectFieldInput!]
  connectOrCreate: [UserElementsConnectOrCreateFieldInput!]
  create: [UserElementsCreateFieldInput!]
  delete: [UserElementsDeleteFieldInput!]
  disconnect: [UserElementsDisconnectFieldInput!]
  update: UserElementsUpdateConnectionInput
  where: UserElementsConnectionWhere
}

input UserOnCreateInput {
  auth0Id: String!
  email: String!
}

input UserOptions {
  limit: Int
  offset: Int

  """
  Specify one or more UserSort objects to sort Users by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [UserSort!]
}

"""
Fields to sort Users by. The order in which sorts are applied is not guaranteed when specifying many fields in one UserSort object.
"""
input UserSort {
  auth0Id: SortDirection
  email: SortDirection
  id: SortDirection
}

type UserTagTagsAggregationSelection {
  count: Int!
  node: UserTagTagsNodeAggregateSelection
}

type UserTagTagsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserTagsAggregateInput {
  AND: [UserTagsAggregateInput!]
  OR: [UserTagsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserTagsNodeAggregationWhereInput
}

input UserTagsConnectFieldInput {
  connect: [TagConnectInput!]
  where: TagConnectWhere
}

input UserTagsConnectOrCreateFieldInput {
  onCreate: UserTagsConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input UserTagsConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type UserTagsConnection {
  edges: [UserTagsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserTagsConnectionSort {
  node: TagSort
}

input UserTagsConnectionWhere {
  AND: [UserTagsConnectionWhere!]
  OR: [UserTagsConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input UserTagsCreateFieldInput {
  node: TagCreateInput!
}

input UserTagsDeleteFieldInput {
  delete: TagDeleteInput
  where: UserTagsConnectionWhere
}

input UserTagsDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: UserTagsConnectionWhere
}

input UserTagsFieldInput {
  connect: [UserTagsConnectFieldInput!]
  connectOrCreate: [UserTagsConnectOrCreateFieldInput!]
  create: [UserTagsCreateFieldInput!]
}

input UserTagsNodeAggregationWhereInput {
  AND: [UserTagsNodeAggregationWhereInput!]
  OR: [UserTagsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type UserTagsRelationship {
  cursor: String!
  node: Tag!
}

input UserTagsUpdateConnectionInput {
  node: TagUpdateInput
}

input UserTagsUpdateFieldInput {
  connect: [UserTagsConnectFieldInput!]
  connectOrCreate: [UserTagsConnectOrCreateFieldInput!]
  create: [UserTagsCreateFieldInput!]
  delete: [UserTagsDeleteFieldInput!]
  disconnect: [UserTagsDisconnectFieldInput!]
  update: UserTagsUpdateConnectionInput
  where: UserTagsConnectionWhere
}

input UserTypesConnectFieldInput {
  connect: TypeBaseConnectInput
  where: TypeBaseConnectWhere
}

type UserTypesConnection {
  edges: [UserTypesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserTypesConnectionSort {
  node: TypeBaseSort
}

input UserTypesConnectionWhere {
  AND: [UserTypesConnectionWhere!]
  OR: [UserTypesConnectionWhere!]
  node: TypeBaseWhere
  node_NOT: TypeBaseWhere
}

input UserTypesCreateFieldInput {
  node: TypeBaseCreateInput!
}

input UserTypesDeleteFieldInput {
  delete: TypeBaseDeleteInput
  where: UserTypesConnectionWhere
}

input UserTypesDisconnectFieldInput {
  disconnect: TypeBaseDisconnectInput
  where: UserTypesConnectionWhere
}

input UserTypesFieldInput {
  connect: [UserTypesConnectFieldInput!]
  create: [UserTypesCreateFieldInput!]
}

type UserTypesRelationship {
  cursor: String!
  node: TypeBase!
}

input UserTypesUpdateConnectionInput {
  node: TypeBaseUpdateInput
}

input UserTypesUpdateFieldInput {
  connect: [UserTypesConnectFieldInput!]
  create: [UserTypesCreateFieldInput!]
  delete: [UserTypesDeleteFieldInput!]
  disconnect: [UserTypesDisconnectFieldInput!]
  update: UserTypesUpdateConnectionInput
  where: UserTypesConnectionWhere
}

input UserUniqueWhere {
  auth0Id: String
  id: ID
}

input UserUpdateInput {
  apps: [UserAppsUpdateFieldInput!]
  auth0Id: String
  components: [UserComponentsUpdateFieldInput!]
  elements: [UserElementsUpdateFieldInput!]
  email: String
  roles: [Role!]
  tags: [UserTagsUpdateFieldInput!]
  types: [UserTypesUpdateFieldInput!]
}

input UserWhere {
  AND: [UserWhere!]
  OR: [UserWhere!]
  appsAggregate: UserAppsAggregateInput
  appsConnection_ALL: UserAppsConnectionWhere
  appsConnection_NONE: UserAppsConnectionWhere
  appsConnection_SINGLE: UserAppsConnectionWhere
  appsConnection_SOME: UserAppsConnectionWhere

  """
  Return Users where all of the related Apps match this filter
  """
  apps_ALL: AppWhere

  """
  Return Users where none of the related Apps match this filter
  """
  apps_NONE: AppWhere

  """
  Return Users where one of the related Apps match this filter
  """
  apps_SINGLE: AppWhere

  """
  Return Users where some of the related Apps match this filter
  """
  apps_SOME: AppWhere
  auth0Id: String
  auth0Id_CONTAINS: String
  auth0Id_ENDS_WITH: String
  auth0Id_IN: [String!]
  auth0Id_NOT: String
  auth0Id_NOT_CONTAINS: String
  auth0Id_NOT_ENDS_WITH: String
  auth0Id_NOT_IN: [String!]
  auth0Id_NOT_STARTS_WITH: String
  auth0Id_STARTS_WITH: String
  componentsAggregate: UserComponentsAggregateInput
  componentsConnection_ALL: UserComponentsConnectionWhere
  componentsConnection_NONE: UserComponentsConnectionWhere
  componentsConnection_SINGLE: UserComponentsConnectionWhere
  componentsConnection_SOME: UserComponentsConnectionWhere

  """
  Return Users where all of the related Components match this filter
  """
  components_ALL: ComponentWhere

  """
  Return Users where none of the related Components match this filter
  """
  components_NONE: ComponentWhere

  """
  Return Users where one of the related Components match this filter
  """
  components_SINGLE: ComponentWhere

  """
  Return Users where some of the related Components match this filter
  """
  components_SOME: ComponentWhere
  elementsAggregate: UserElementsAggregateInput
  elementsConnection_ALL: UserElementsConnectionWhere
  elementsConnection_NONE: UserElementsConnectionWhere
  elementsConnection_SINGLE: UserElementsConnectionWhere
  elementsConnection_SOME: UserElementsConnectionWhere

  """
  Return Users where all of the related Elements match this filter
  """
  elements_ALL: ElementWhere

  """
  Return Users where none of the related Elements match this filter
  """
  elements_NONE: ElementWhere

  """
  Return Users where one of the related Elements match this filter
  """
  elements_SINGLE: ElementWhere

  """
  Return Users where some of the related Elements match this filter
  """
  elements_SOME: ElementWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String!]
  email_NOT: String
  email_NOT_CONTAINS: String
  email_NOT_ENDS_WITH: String
  email_NOT_IN: [String!]
  email_NOT_STARTS_WITH: String
  email_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  roles: [Role!]
  roles_INCLUDES: Role
  roles_NOT: [Role!]
  roles_NOT_INCLUDES: Role
  tagsAggregate: UserTagsAggregateInput
  tagsConnection_ALL: UserTagsConnectionWhere
  tagsConnection_NONE: UserTagsConnectionWhere
  tagsConnection_SINGLE: UserTagsConnectionWhere
  tagsConnection_SOME: UserTagsConnectionWhere

  """
  Return Users where all of the related Tags match this filter
  """
  tags_ALL: TagWhere

  """
  Return Users where none of the related Tags match this filter
  """
  tags_NONE: TagWhere

  """
  Return Users where one of the related Tags match this filter
  """
  tags_SINGLE: TagWhere

  """
  Return Users where some of the related Tags match this filter
  """
  tags_SOME: TagWhere
  typesConnection_ALL: UserTypesConnectionWhere
  typesConnection_NONE: UserTypesConnectionWhere
  typesConnection_SINGLE: UserTypesConnectionWhere
  typesConnection_SOME: UserTypesConnectionWhere
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface WithDescendants {
  descendantTypesIds: [ID!]!
}

interface WithOwner {
  owner: User!
  ownerConnection: WithOwnerOwnerConnection!
}

input WithOwnerOwnerConnectFieldInput {
  connect: UserConnectInput
  where: UserConnectWhere
}

input WithOwnerOwnerConnectOrCreateFieldInput {
  onCreate: WithOwnerOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input WithOwnerOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type WithOwnerOwnerConnection {
  edges: [WithOwnerOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input WithOwnerOwnerConnectionSort {
  node: UserSort
}

input WithOwnerOwnerConnectionWhere {
  AND: [WithOwnerOwnerConnectionWhere!]
  OR: [WithOwnerOwnerConnectionWhere!]
  node: UserWhere
  node_NOT: UserWhere
}

input WithOwnerOwnerCreateFieldInput {
  node: UserCreateInput!
}

input WithOwnerOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: WithOwnerOwnerConnectionWhere
}

input WithOwnerOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: WithOwnerOwnerConnectionWhere
}

input WithOwnerOwnerFieldInput {
  connect: WithOwnerOwnerConnectFieldInput
  connectOrCreate: WithOwnerOwnerConnectOrCreateFieldInput
  create: WithOwnerOwnerCreateFieldInput
}

type WithOwnerOwnerRelationship {
  cursor: String!
  node: User!
}

input WithOwnerOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input WithOwnerOwnerUpdateFieldInput {
  connect: WithOwnerOwnerConnectFieldInput
  connectOrCreate: WithOwnerOwnerConnectOrCreateFieldInput
  create: WithOwnerOwnerCreateFieldInput
  delete: WithOwnerOwnerDeleteFieldInput
  disconnect: WithOwnerOwnerDisconnectFieldInput
  update: WithOwnerOwnerUpdateConnectionInput
  where: WithOwnerOwnerConnectionWhere
}
