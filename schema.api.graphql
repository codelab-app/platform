interface ActionBase {
  id: ID!
  name: String!
  store: Store!
  storeConnection: ActionBaseStoreConnection!
  type: ActionKind!
}

input ActionBaseStoreConnectFieldInput {
  connect: StoreConnectInput
  where: StoreConnectWhere
}

input ActionBaseStoreConnectOrCreateFieldInput {
  onCreate: ActionBaseStoreConnectOrCreateFieldInputOnCreate!
  where: StoreConnectOrCreateWhere!
}

input ActionBaseStoreConnectOrCreateFieldInputOnCreate {
  node: StoreOnCreateInput!
}

type ActionBaseStoreConnection {
  edges: [ActionBaseStoreRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ActionBaseStoreConnectionSort {
  node: StoreSort
}

input ActionBaseStoreConnectionWhere {
  AND: [ActionBaseStoreConnectionWhere!]
  OR: [ActionBaseStoreConnectionWhere!]
  node: StoreWhere
  node_NOT: StoreWhere
}

input ActionBaseStoreCreateFieldInput {
  node: StoreCreateInput!
}

input ActionBaseStoreDeleteFieldInput {
  delete: StoreDeleteInput
  where: ActionBaseStoreConnectionWhere
}

input ActionBaseStoreDisconnectFieldInput {
  disconnect: StoreDisconnectInput
  where: ActionBaseStoreConnectionWhere
}

input ActionBaseStoreFieldInput {
  connect: ActionBaseStoreConnectFieldInput
  connectOrCreate: ActionBaseStoreConnectOrCreateFieldInput
  create: ActionBaseStoreCreateFieldInput
}

type ActionBaseStoreRelationship {
  cursor: String!
  node: Store!
}

input ActionBaseStoreUpdateConnectionInput {
  node: StoreUpdateInput
}

input ActionBaseStoreUpdateFieldInput {
  connect: ActionBaseStoreConnectFieldInput
  connectOrCreate: ActionBaseStoreConnectOrCreateFieldInput
  create: ActionBaseStoreCreateFieldInput
  delete: ActionBaseStoreDeleteFieldInput
  disconnect: ActionBaseStoreDisconnectFieldInput
  update: ActionBaseStoreUpdateConnectionInput
  where: ActionBaseStoreConnectionWhere
}

enum ActionKind {
  """
  Action responsible for fetching data from a resource
  """
  ApiAction

  """
  Action with custom code
  """
  CodeAction
}

"""
Allows picking a action from the list of actions
"""
type ActionType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ActionTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ActionTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ActionTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input ActionTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ActionTypeConnectOrCreateWhere {
  node: ActionTypeUniqueWhere!
}

input ActionTypeConnectWhere {
  node: ActionTypeWhere!
}

input ActionTypeCreateInput {
  id: ID!
  kind: TypeKind! = ActionType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ActionTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input ActionTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ActionTypeEdge {
  cursor: String!
  node: ActionType!
}

input ActionTypeOnCreateInput {
  id: ID!
  name: String!
}

input ActionTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ActionTypeSort objects to sort ActionTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ActionTypeSort!]
}

input ActionTypeOwnerAggregateInput {
  AND: [ActionTypeOwnerAggregateInput!]
  OR: [ActionTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ActionTypeOwnerEdgeAggregationWhereInput
  node: ActionTypeOwnerNodeAggregationWhereInput
}

input ActionTypeOwnerEdgeAggregationWhereInput {
  AND: [ActionTypeOwnerEdgeAggregationWhereInput!]
  OR: [ActionTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input ActionTypeOwnerNodeAggregationWhereInput {
  AND: [ActionTypeOwnerNodeAggregationWhereInput!]
  OR: [ActionTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input ActionTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ActionTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ActionTypeSort object.
"""
input ActionTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ActionTypeUniqueWhere {
  id: ID
}

input ActionTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ActionTypeUserOwnerAggregationSelection {
  count: Int!
  edge: ActionTypeUserOwnerEdgeAggregateSelection
  node: ActionTypeUserOwnerNodeAggregateSelection
}

type ActionTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type ActionTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ActionTypeWhere {
  AND: [ActionTypeWhere!]
  OR: [ActionTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ActionTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ActionTypesConnection {
  edges: [ActionTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

union AnyAction = ApiAction | CodeAction

input AnyActionWhere {
  ApiAction: ApiActionWhere
  CodeAction: CodeActionWhere
}

union AnyType =
    ActionType
  | AppType
  | ArrayType
  | CodeMirrorType
  | ElementType
  | EnumType
  | InterfaceType
  | LambdaType
  | PageType
  | PrimitiveType
  | ReactNodeType
  | RenderPropsType
  | UnionType

input AnyTypeWhere {
  ActionType: ActionTypeWhere
  AppType: AppTypeWhere
  ArrayType: ArrayTypeWhere
  CodeMirrorType: CodeMirrorTypeWhere
  ElementType: ElementTypeWhere
  EnumType: EnumTypeWhere
  InterfaceType: InterfaceTypeWhere
  LambdaType: LambdaTypeWhere
  PageType: PageTypeWhere
  PrimitiveType: PrimitiveTypeWhere
  ReactNodeType: ReactNodeTypeWhere
  RenderPropsType: RenderPropsTypeWhere
  UnionType: UnionTypeWhere
}

type ApiAction implements ActionBase {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ApiActionPropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ApiActionConfigConnectionSort!]
    where: ApiActionConfigConnectionWhere
  ): ApiActionConfigConnection!
  errorAction(
    directed: Boolean = true
    options: QueryOptions
    where: AnyActionWhere
  ): AnyAction!
  errorActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: ApiActionErrorActionConnectionWhere
  ): ApiActionErrorActionConnection!
  id: ID!
  name: String!

  """
  Resource to fetch data from
  """
  resource(
    directed: Boolean = true
    options: ResourceOptions
    where: ResourceWhere
  ): Resource!
  resourceAggregate(
    directed: Boolean = true
    where: ResourceWhere
  ): ApiActionResourceResourceAggregationSelection
  resourceConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ApiActionResourceConnectionSort!]
    where: ApiActionResourceConnectionWhere
  ): ApiActionResourceConnection!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): ApiActionStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ActionBaseStoreConnectionSort!]
    where: ActionBaseStoreConnectionWhere
  ): ActionBaseStoreConnection!

  """
  Response handlers
  """
  successAction(
    directed: Boolean = true
    options: QueryOptions
    where: AnyActionWhere
  ): AnyAction!
  successActionConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: ApiActionSuccessActionConnectionWhere
  ): ApiActionSuccessActionConnection!
  type: ActionKind!
}

type ApiActionAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ApiActionConfigAggregateInput {
  AND: [ApiActionConfigAggregateInput!]
  OR: [ApiActionConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ApiActionConfigNodeAggregationWhereInput
}

input ApiActionConfigConnectFieldInput {
  where: PropConnectWhere
}

input ApiActionConfigConnectOrCreateFieldInput {
  onCreate: ApiActionConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ApiActionConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ApiActionConfigConnection {
  edges: [ApiActionConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionConfigConnectionSort {
  node: PropSort
}

input ApiActionConfigConnectionWhere {
  AND: [ApiActionConfigConnectionWhere!]
  OR: [ApiActionConfigConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input ApiActionConfigCreateFieldInput {
  node: PropCreateInput!
}

input ApiActionConfigDeleteFieldInput {
  where: ApiActionConfigConnectionWhere
}

input ApiActionConfigDisconnectFieldInput {
  where: ApiActionConfigConnectionWhere
}

input ApiActionConfigFieldInput {
  connect: ApiActionConfigConnectFieldInput
  connectOrCreate: ApiActionConfigConnectOrCreateFieldInput
  create: ApiActionConfigCreateFieldInput
}

input ApiActionConfigNodeAggregationWhereInput {
  AND: [ApiActionConfigNodeAggregationWhereInput!]
  OR: [ApiActionConfigNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type ApiActionConfigRelationship {
  cursor: String!
  node: Prop!
}

input ApiActionConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input ApiActionConfigUpdateFieldInput {
  connect: ApiActionConfigConnectFieldInput
  connectOrCreate: ApiActionConfigConnectOrCreateFieldInput
  create: ApiActionConfigCreateFieldInput
  delete: ApiActionConfigDeleteFieldInput
  disconnect: ApiActionConfigDisconnectFieldInput
  update: ApiActionConfigUpdateConnectionInput
  where: ApiActionConfigConnectionWhere
}

input ApiActionConnectInput {
  config: ApiActionConfigConnectFieldInput
  errorAction: ApiActionErrorActionConnectInput
  resource: ApiActionResourceConnectFieldInput
  store: ActionBaseStoreConnectFieldInput
  successAction: ApiActionSuccessActionConnectInput
}

input ApiActionConnectOrCreateInput {
  config: ApiActionConfigConnectOrCreateFieldInput
  errorAction: ApiActionErrorActionConnectOrCreateInput
  resource: ApiActionResourceConnectOrCreateFieldInput
  store: ActionBaseStoreConnectOrCreateFieldInput
  successAction: ApiActionSuccessActionConnectOrCreateInput
}

input ApiActionConnectOrCreateWhere {
  node: ApiActionUniqueWhere!
}

input ApiActionConnectWhere {
  node: ApiActionWhere!
}

input ApiActionCreateInput {
  config: ApiActionConfigFieldInput
  errorAction: ApiActionErrorActionCreateInput
  id: ID!
  name: String!
  resource: ApiActionResourceFieldInput
  store: ActionBaseStoreFieldInput
  successAction: ApiActionSuccessActionCreateInput
  type: ActionKind! = ApiAction
}

input ApiActionDeleteInput {
  config: ApiActionConfigDeleteFieldInput
  errorAction: ApiActionErrorActionDeleteInput
  resource: ApiActionResourceDeleteFieldInput
  store: ActionBaseStoreDeleteFieldInput
  successAction: ApiActionSuccessActionDeleteInput
}

input ApiActionDisconnectInput {
  config: ApiActionConfigDisconnectFieldInput
  errorAction: ApiActionErrorActionDisconnectInput
  resource: ApiActionResourceDisconnectFieldInput
  store: ActionBaseStoreDisconnectFieldInput
  successAction: ApiActionSuccessActionDisconnectInput
}

type ApiActionEdge {
  cursor: String!
  node: ApiAction!
}

input ApiActionErrorActionApiActionConnectFieldInput {
  connect: ApiActionConnectInput
  where: ApiActionConnectWhere
}

input ApiActionErrorActionApiActionConnectOrCreateFieldInput {
  onCreate: ApiActionErrorActionApiActionConnectOrCreateFieldInputOnCreate!
  where: ApiActionConnectOrCreateWhere!
}

input ApiActionErrorActionApiActionConnectOrCreateFieldInputOnCreate {
  node: ApiActionOnCreateInput!
}

input ApiActionErrorActionApiActionConnectionWhere {
  AND: [ApiActionErrorActionApiActionConnectionWhere!]
  OR: [ApiActionErrorActionApiActionConnectionWhere!]
  node: ApiActionWhere
  node_NOT: ApiActionWhere
}

input ApiActionErrorActionApiActionCreateFieldInput {
  node: ApiActionCreateInput!
}

input ApiActionErrorActionApiActionDeleteFieldInput {
  delete: ApiActionDeleteInput
  where: ApiActionErrorActionApiActionConnectionWhere
}

input ApiActionErrorActionApiActionDisconnectFieldInput {
  disconnect: ApiActionDisconnectInput
  where: ApiActionErrorActionApiActionConnectionWhere
}

input ApiActionErrorActionApiActionFieldInput {
  connect: ApiActionErrorActionApiActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionApiActionConnectOrCreateFieldInput
  create: ApiActionErrorActionApiActionCreateFieldInput
}

input ApiActionErrorActionApiActionUpdateConnectionInput {
  node: ApiActionUpdateInput
}

input ApiActionErrorActionApiActionUpdateFieldInput {
  connect: ApiActionErrorActionApiActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionApiActionConnectOrCreateFieldInput
  create: ApiActionErrorActionApiActionCreateFieldInput
  delete: ApiActionErrorActionApiActionDeleteFieldInput
  disconnect: ApiActionErrorActionApiActionDisconnectFieldInput
  update: ApiActionErrorActionApiActionUpdateConnectionInput
  where: ApiActionErrorActionApiActionConnectionWhere
}

input ApiActionErrorActionCodeActionConnectFieldInput {
  connect: CodeActionConnectInput
  where: CodeActionConnectWhere
}

input ApiActionErrorActionCodeActionConnectOrCreateFieldInput {
  onCreate: ApiActionErrorActionCodeActionConnectOrCreateFieldInputOnCreate!
  where: CodeActionConnectOrCreateWhere!
}

input ApiActionErrorActionCodeActionConnectOrCreateFieldInputOnCreate {
  node: CodeActionOnCreateInput!
}

input ApiActionErrorActionCodeActionConnectionWhere {
  AND: [ApiActionErrorActionCodeActionConnectionWhere!]
  OR: [ApiActionErrorActionCodeActionConnectionWhere!]
  node: CodeActionWhere
  node_NOT: CodeActionWhere
}

input ApiActionErrorActionCodeActionCreateFieldInput {
  node: CodeActionCreateInput!
}

input ApiActionErrorActionCodeActionDeleteFieldInput {
  delete: CodeActionDeleteInput
  where: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionCodeActionDisconnectFieldInput {
  disconnect: CodeActionDisconnectInput
  where: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionCodeActionFieldInput {
  connect: ApiActionErrorActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionCodeActionConnectOrCreateFieldInput
  create: ApiActionErrorActionCodeActionCreateFieldInput
}

input ApiActionErrorActionCodeActionUpdateConnectionInput {
  node: CodeActionUpdateInput
}

input ApiActionErrorActionCodeActionUpdateFieldInput {
  connect: ApiActionErrorActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionErrorActionCodeActionConnectOrCreateFieldInput
  create: ApiActionErrorActionCodeActionCreateFieldInput
  delete: ApiActionErrorActionCodeActionDeleteFieldInput
  disconnect: ApiActionErrorActionCodeActionDisconnectFieldInput
  update: ApiActionErrorActionCodeActionUpdateConnectionInput
  where: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionConnectInput {
  ApiAction: ApiActionErrorActionApiActionConnectFieldInput
  CodeAction: ApiActionErrorActionCodeActionConnectFieldInput
}

input ApiActionErrorActionConnectOrCreateInput {
  ApiAction: ApiActionErrorActionApiActionConnectOrCreateFieldInput
  CodeAction: ApiActionErrorActionCodeActionConnectOrCreateFieldInput
}

type ApiActionErrorActionConnection {
  edges: [ApiActionErrorActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionErrorActionConnectionWhere {
  ApiAction: ApiActionErrorActionApiActionConnectionWhere
  CodeAction: ApiActionErrorActionCodeActionConnectionWhere
}

input ApiActionErrorActionCreateFieldInput {
  ApiAction: [ApiActionErrorActionApiActionCreateFieldInput!]
  CodeAction: [ApiActionErrorActionCodeActionCreateFieldInput!]
}

input ApiActionErrorActionCreateInput {
  ApiAction: ApiActionErrorActionApiActionFieldInput
  CodeAction: ApiActionErrorActionCodeActionFieldInput
}

input ApiActionErrorActionDeleteInput {
  ApiAction: ApiActionErrorActionApiActionDeleteFieldInput
  CodeAction: ApiActionErrorActionCodeActionDeleteFieldInput
}

input ApiActionErrorActionDisconnectInput {
  ApiAction: ApiActionErrorActionApiActionDisconnectFieldInput
  CodeAction: ApiActionErrorActionCodeActionDisconnectFieldInput
}

type ApiActionErrorActionRelationship {
  cursor: String!
  node: AnyAction!
}

input ApiActionErrorActionUpdateInput {
  ApiAction: ApiActionErrorActionApiActionUpdateFieldInput
  CodeAction: ApiActionErrorActionCodeActionUpdateFieldInput
}

input ApiActionOnCreateInput {
  id: ID!
  name: String!
}

input ApiActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ApiActionSort objects to sort ApiActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ApiActionSort!]
}

type ApiActionPropConfigAggregationSelection {
  count: Int!
  node: ApiActionPropConfigNodeAggregateSelection
}

type ApiActionPropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ApiActionRelationInput {
  config: ApiActionConfigCreateFieldInput
  errorAction: ApiActionErrorActionCreateFieldInput
  resource: ApiActionResourceCreateFieldInput
  store: ActionBaseStoreCreateFieldInput
  successAction: ApiActionSuccessActionCreateFieldInput
}

input ApiActionResourceAggregateInput {
  AND: [ApiActionResourceAggregateInput!]
  OR: [ApiActionResourceAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ApiActionResourceNodeAggregationWhereInput
}

input ApiActionResourceConnectFieldInput {
  connect: ResourceConnectInput
  where: ResourceConnectWhere
}

input ApiActionResourceConnectOrCreateFieldInput {
  onCreate: ApiActionResourceConnectOrCreateFieldInputOnCreate!
  where: ResourceConnectOrCreateWhere!
}

input ApiActionResourceConnectOrCreateFieldInputOnCreate {
  node: ResourceOnCreateInput!
}

type ApiActionResourceConnection {
  edges: [ApiActionResourceRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionResourceConnectionSort {
  node: ResourceSort
}

input ApiActionResourceConnectionWhere {
  AND: [ApiActionResourceConnectionWhere!]
  OR: [ApiActionResourceConnectionWhere!]
  node: ResourceWhere
  node_NOT: ResourceWhere
}

input ApiActionResourceCreateFieldInput {
  node: ResourceCreateInput!
}

input ApiActionResourceDeleteFieldInput {
  delete: ResourceDeleteInput
  where: ApiActionResourceConnectionWhere
}

input ApiActionResourceDisconnectFieldInput {
  disconnect: ResourceDisconnectInput
  where: ApiActionResourceConnectionWhere
}

input ApiActionResourceFieldInput {
  connect: ApiActionResourceConnectFieldInput
  connectOrCreate: ApiActionResourceConnectOrCreateFieldInput
  create: ApiActionResourceCreateFieldInput
}

input ApiActionResourceNodeAggregationWhereInput {
  AND: [ApiActionResourceNodeAggregationWhereInput!]
  OR: [ApiActionResourceNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ApiActionResourceRelationship {
  cursor: String!
  node: Resource!
}

type ApiActionResourceResourceAggregationSelection {
  count: Int!
  node: ApiActionResourceResourceNodeAggregateSelection
}

type ApiActionResourceResourceNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ApiActionResourceUpdateConnectionInput {
  node: ResourceUpdateInput
}

input ApiActionResourceUpdateFieldInput {
  connect: ApiActionResourceConnectFieldInput
  connectOrCreate: ApiActionResourceConnectOrCreateFieldInput
  create: ApiActionResourceCreateFieldInput
  delete: ApiActionResourceDeleteFieldInput
  disconnect: ApiActionResourceDisconnectFieldInput
  update: ApiActionResourceUpdateConnectionInput
  where: ApiActionResourceConnectionWhere
}

"""
Fields to sort ApiActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one ApiActionSort object.
"""
input ApiActionSort {
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

input ApiActionStoreAggregateInput {
  AND: [ApiActionStoreAggregateInput!]
  OR: [ApiActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ApiActionStoreNodeAggregationWhereInput
}

input ApiActionStoreNodeAggregationWhereInput {
  AND: [ApiActionStoreNodeAggregationWhereInput!]
  OR: [ApiActionStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ApiActionStoreStoreAggregationSelection {
  count: Int!
  node: ApiActionStoreStoreNodeAggregateSelection
}

type ApiActionStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ApiActionSuccessActionApiActionConnectFieldInput {
  connect: ApiActionConnectInput
  where: ApiActionConnectWhere
}

input ApiActionSuccessActionApiActionConnectOrCreateFieldInput {
  onCreate: ApiActionSuccessActionApiActionConnectOrCreateFieldInputOnCreate!
  where: ApiActionConnectOrCreateWhere!
}

input ApiActionSuccessActionApiActionConnectOrCreateFieldInputOnCreate {
  node: ApiActionOnCreateInput!
}

input ApiActionSuccessActionApiActionConnectionWhere {
  AND: [ApiActionSuccessActionApiActionConnectionWhere!]
  OR: [ApiActionSuccessActionApiActionConnectionWhere!]
  node: ApiActionWhere
  node_NOT: ApiActionWhere
}

input ApiActionSuccessActionApiActionCreateFieldInput {
  node: ApiActionCreateInput!
}

input ApiActionSuccessActionApiActionDeleteFieldInput {
  delete: ApiActionDeleteInput
  where: ApiActionSuccessActionApiActionConnectionWhere
}

input ApiActionSuccessActionApiActionDisconnectFieldInput {
  disconnect: ApiActionDisconnectInput
  where: ApiActionSuccessActionApiActionConnectionWhere
}

input ApiActionSuccessActionApiActionFieldInput {
  connect: ApiActionSuccessActionApiActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionApiActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionApiActionCreateFieldInput
}

input ApiActionSuccessActionApiActionUpdateConnectionInput {
  node: ApiActionUpdateInput
}

input ApiActionSuccessActionApiActionUpdateFieldInput {
  connect: ApiActionSuccessActionApiActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionApiActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionApiActionCreateFieldInput
  delete: ApiActionSuccessActionApiActionDeleteFieldInput
  disconnect: ApiActionSuccessActionApiActionDisconnectFieldInput
  update: ApiActionSuccessActionApiActionUpdateConnectionInput
  where: ApiActionSuccessActionApiActionConnectionWhere
}

input ApiActionSuccessActionCodeActionConnectFieldInput {
  connect: CodeActionConnectInput
  where: CodeActionConnectWhere
}

input ApiActionSuccessActionCodeActionConnectOrCreateFieldInput {
  onCreate: ApiActionSuccessActionCodeActionConnectOrCreateFieldInputOnCreate!
  where: CodeActionConnectOrCreateWhere!
}

input ApiActionSuccessActionCodeActionConnectOrCreateFieldInputOnCreate {
  node: CodeActionOnCreateInput!
}

input ApiActionSuccessActionCodeActionConnectionWhere {
  AND: [ApiActionSuccessActionCodeActionConnectionWhere!]
  OR: [ApiActionSuccessActionCodeActionConnectionWhere!]
  node: CodeActionWhere
  node_NOT: CodeActionWhere
}

input ApiActionSuccessActionCodeActionCreateFieldInput {
  node: CodeActionCreateInput!
}

input ApiActionSuccessActionCodeActionDeleteFieldInput {
  delete: CodeActionDeleteInput
  where: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionCodeActionDisconnectFieldInput {
  disconnect: CodeActionDisconnectInput
  where: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionCodeActionFieldInput {
  connect: ApiActionSuccessActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionCodeActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionCodeActionCreateFieldInput
}

input ApiActionSuccessActionCodeActionUpdateConnectionInput {
  node: CodeActionUpdateInput
}

input ApiActionSuccessActionCodeActionUpdateFieldInput {
  connect: ApiActionSuccessActionCodeActionConnectFieldInput
  connectOrCreate: ApiActionSuccessActionCodeActionConnectOrCreateFieldInput
  create: ApiActionSuccessActionCodeActionCreateFieldInput
  delete: ApiActionSuccessActionCodeActionDeleteFieldInput
  disconnect: ApiActionSuccessActionCodeActionDisconnectFieldInput
  update: ApiActionSuccessActionCodeActionUpdateConnectionInput
  where: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionConnectInput {
  ApiAction: ApiActionSuccessActionApiActionConnectFieldInput
  CodeAction: ApiActionSuccessActionCodeActionConnectFieldInput
}

input ApiActionSuccessActionConnectOrCreateInput {
  ApiAction: ApiActionSuccessActionApiActionConnectOrCreateFieldInput
  CodeAction: ApiActionSuccessActionCodeActionConnectOrCreateFieldInput
}

type ApiActionSuccessActionConnection {
  edges: [ApiActionSuccessActionRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApiActionSuccessActionConnectionWhere {
  ApiAction: ApiActionSuccessActionApiActionConnectionWhere
  CodeAction: ApiActionSuccessActionCodeActionConnectionWhere
}

input ApiActionSuccessActionCreateFieldInput {
  ApiAction: [ApiActionSuccessActionApiActionCreateFieldInput!]
  CodeAction: [ApiActionSuccessActionCodeActionCreateFieldInput!]
}

input ApiActionSuccessActionCreateInput {
  ApiAction: ApiActionSuccessActionApiActionFieldInput
  CodeAction: ApiActionSuccessActionCodeActionFieldInput
}

input ApiActionSuccessActionDeleteInput {
  ApiAction: ApiActionSuccessActionApiActionDeleteFieldInput
  CodeAction: ApiActionSuccessActionCodeActionDeleteFieldInput
}

input ApiActionSuccessActionDisconnectInput {
  ApiAction: ApiActionSuccessActionApiActionDisconnectFieldInput
  CodeAction: ApiActionSuccessActionCodeActionDisconnectFieldInput
}

type ApiActionSuccessActionRelationship {
  cursor: String!
  node: AnyAction!
}

input ApiActionSuccessActionUpdateInput {
  ApiAction: ApiActionSuccessActionApiActionUpdateFieldInput
  CodeAction: ApiActionSuccessActionCodeActionUpdateFieldInput
}

input ApiActionUniqueWhere {
  id: ID
}

input ApiActionUpdateInput {
  config: ApiActionConfigUpdateFieldInput
  errorAction: ApiActionErrorActionUpdateInput
  id: ID
  name: String
  resource: ApiActionResourceUpdateFieldInput
  store: ActionBaseStoreUpdateFieldInput
  successAction: ApiActionSuccessActionUpdateInput
}

input ApiActionWhere {
  AND: [ApiActionWhere!]
  OR: [ApiActionWhere!]
  config: PropWhere
  configAggregate: ApiActionConfigAggregateInput
  configConnection: ApiActionConfigConnectionWhere
  configConnection_NOT: ApiActionConfigConnectionWhere
  config_NOT: PropWhere
  errorActionConnection: ApiActionErrorActionConnectionWhere
  errorActionConnection_NOT: ApiActionErrorActionConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  resource: ResourceWhere
  resourceAggregate: ApiActionResourceAggregateInput
  resourceConnection: ApiActionResourceConnectionWhere
  resourceConnection_NOT: ApiActionResourceConnectionWhere
  resource_NOT: ResourceWhere
  store: StoreWhere
  storeAggregate: ApiActionStoreAggregateInput
  storeConnection: ActionBaseStoreConnectionWhere
  storeConnection_NOT: ActionBaseStoreConnectionWhere
  store_NOT: StoreWhere
  successActionConnection: ApiActionSuccessActionConnectionWhere
  successActionConnection_NOT: ApiActionSuccessActionConnectionWhere
  type: ActionKind
  type_IN: [ActionKind!]
  type_NOT: ActionKind
  type_NOT_IN: [ActionKind!]
}

type ApiActionsConnection {
  edges: [ApiActionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type App implements WithOwner {
  domains(
    directed: Boolean = true
    options: DomainOptions
    where: DomainWhere
  ): [Domain!]!
  domainsAggregate(
    directed: Boolean = true
    where: DomainWhere
  ): AppDomainDomainsAggregationSelection
  domainsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppDomainsConnectionSort!]
    where: AppDomainsConnectionWhere
  ): AppDomainsConnection!
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): AppUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  pages(
    directed: Boolean = true
    options: PageOptions
    where: PageWhere
  ): [Page!]!
  pagesAggregate(
    directed: Boolean = true
    where: PageWhere
  ): AppPagePagesAggregationSelection
  pagesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppPagesConnectionSort!]
    where: AppPagesConnectionWhere
  ): AppPagesConnection!
  slug: String!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): AppStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AppStoreConnectionSort!]
    where: AppStoreConnectionWhere
  ): AppStoreConnection!
}

type AppAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

input AppConnectInput {
  domains: [AppDomainsConnectFieldInput!]
  owner: WithOwnerOwnerConnectFieldInput
  pages: [AppPagesConnectFieldInput!]
  store: AppStoreConnectFieldInput
}

input AppConnectOrCreateInput {
  domains: [AppDomainsConnectOrCreateFieldInput!]
  owner: WithOwnerOwnerConnectOrCreateFieldInput
  pages: [AppPagesConnectOrCreateFieldInput!]
  store: AppStoreConnectOrCreateFieldInput
}

input AppConnectOrCreateWhere {
  node: AppUniqueWhere!
}

input AppConnectWhere {
  node: AppWhere!
}

input AppCreateInput {
  domains: AppDomainsFieldInput
  id: ID!
  name: String!
  owner: WithOwnerOwnerFieldInput
  pages: AppPagesFieldInput
  slug: String!
  store: AppStoreFieldInput
}

input AppDeleteInput {
  domains: [AppDomainsDeleteFieldInput!]
  owner: WithOwnerOwnerDeleteFieldInput
  pages: [AppPagesDeleteFieldInput!]
  store: AppStoreDeleteFieldInput
}

input AppDisconnectInput {
  domains: [AppDomainsDisconnectFieldInput!]
  owner: WithOwnerOwnerDisconnectFieldInput
  pages: [AppPagesDisconnectFieldInput!]
  store: AppStoreDisconnectFieldInput
}

type AppDomainDomainsAggregationSelection {
  count: Int!
  node: AppDomainDomainsNodeAggregateSelection
}

type AppDomainDomainsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppDomainsAggregateInput {
  AND: [AppDomainsAggregateInput!]
  OR: [AppDomainsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppDomainsNodeAggregationWhereInput
}

input AppDomainsConnectFieldInput {
  connect: [DomainConnectInput!]
  where: DomainConnectWhere
}

input AppDomainsConnectOrCreateFieldInput {
  onCreate: AppDomainsConnectOrCreateFieldInputOnCreate!
  where: DomainConnectOrCreateWhere!
}

input AppDomainsConnectOrCreateFieldInputOnCreate {
  node: DomainOnCreateInput!
}

type AppDomainsConnection {
  edges: [AppDomainsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppDomainsConnectionSort {
  node: DomainSort
}

input AppDomainsConnectionWhere {
  AND: [AppDomainsConnectionWhere!]
  OR: [AppDomainsConnectionWhere!]
  node: DomainWhere
  node_NOT: DomainWhere
}

input AppDomainsCreateFieldInput {
  node: DomainCreateInput!
}

input AppDomainsDeleteFieldInput {
  delete: DomainDeleteInput
  where: AppDomainsConnectionWhere
}

input AppDomainsDisconnectFieldInput {
  disconnect: DomainDisconnectInput
  where: AppDomainsConnectionWhere
}

input AppDomainsFieldInput {
  connect: [AppDomainsConnectFieldInput!]
  connectOrCreate: [AppDomainsConnectOrCreateFieldInput!]
  create: [AppDomainsCreateFieldInput!]
}

input AppDomainsNodeAggregationWhereInput {
  AND: [AppDomainsNodeAggregationWhereInput!]
  OR: [AppDomainsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AppDomainsRelationship {
  cursor: String!
  node: Domain!
}

input AppDomainsUpdateConnectionInput {
  node: DomainUpdateInput
}

input AppDomainsUpdateFieldInput {
  connect: [AppDomainsConnectFieldInput!]
  connectOrCreate: [AppDomainsConnectOrCreateFieldInput!]
  create: [AppDomainsCreateFieldInput!]
  delete: [AppDomainsDeleteFieldInput!]
  disconnect: [AppDomainsDisconnectFieldInput!]
  update: AppDomainsUpdateConnectionInput
  where: AppDomainsConnectionWhere
}

type AppEdge {
  cursor: String!
  node: App!
}

input AppOnCreateInput {
  id: ID!
  name: String!
  slug: String!
}

input AppOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AppSort objects to sort Apps by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AppSort!]
}

input AppOwnerAggregateInput {
  AND: [AppOwnerAggregateInput!]
  OR: [AppOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppOwnerNodeAggregationWhereInput
}

input AppOwnerNodeAggregationWhereInput {
  AND: [AppOwnerNodeAggregationWhereInput!]
  OR: [AppOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

type AppPagePagesAggregationSelection {
  count: Int!
  node: AppPagePagesNodeAggregateSelection
}

type AppPagePagesNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

input AppPagesAggregateInput {
  AND: [AppPagesAggregateInput!]
  OR: [AppPagesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppPagesNodeAggregationWhereInput
}

input AppPagesConnectFieldInput {
  connect: [PageConnectInput!]
  where: PageConnectWhere
}

input AppPagesConnectOrCreateFieldInput {
  onCreate: AppPagesConnectOrCreateFieldInputOnCreate!
  where: PageConnectOrCreateWhere!
}

input AppPagesConnectOrCreateFieldInputOnCreate {
  node: PageOnCreateInput!
}

type AppPagesConnection {
  edges: [AppPagesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppPagesConnectionSort {
  node: PageSort
}

input AppPagesConnectionWhere {
  AND: [AppPagesConnectionWhere!]
  OR: [AppPagesConnectionWhere!]
  node: PageWhere
  node_NOT: PageWhere
}

input AppPagesCreateFieldInput {
  node: PageCreateInput!
}

input AppPagesDeleteFieldInput {
  delete: PageDeleteInput
  where: AppPagesConnectionWhere
}

input AppPagesDisconnectFieldInput {
  disconnect: PageDisconnectInput
  where: AppPagesConnectionWhere
}

input AppPagesFieldInput {
  connect: [AppPagesConnectFieldInput!]
  connectOrCreate: [AppPagesConnectOrCreateFieldInput!]
  create: [AppPagesCreateFieldInput!]
}

input AppPagesNodeAggregationWhereInput {
  AND: [AppPagesNodeAggregationWhereInput!]
  OR: [AppPagesNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  slug_AVERAGE_EQUAL: Float
  slug_AVERAGE_GT: Float
  slug_AVERAGE_GTE: Float
  slug_AVERAGE_LT: Float
  slug_AVERAGE_LTE: Float
  slug_EQUAL: String
  slug_GT: Int
  slug_GTE: Int
  slug_LONGEST_EQUAL: Int
  slug_LONGEST_GT: Int
  slug_LONGEST_GTE: Int
  slug_LONGEST_LT: Int
  slug_LONGEST_LTE: Int
  slug_LT: Int
  slug_LTE: Int
  slug_SHORTEST_EQUAL: Int
  slug_SHORTEST_GT: Int
  slug_SHORTEST_GTE: Int
  slug_SHORTEST_LT: Int
  slug_SHORTEST_LTE: Int
}

type AppPagesRelationship {
  cursor: String!
  node: Page!
}

input AppPagesUpdateConnectionInput {
  node: PageUpdateInput
}

input AppPagesUpdateFieldInput {
  connect: [AppPagesConnectFieldInput!]
  connectOrCreate: [AppPagesConnectOrCreateFieldInput!]
  create: [AppPagesCreateFieldInput!]
  delete: [AppPagesDeleteFieldInput!]
  disconnect: [AppPagesDisconnectFieldInput!]
  update: AppPagesUpdateConnectionInput
  where: AppPagesConnectionWhere
}

input AppRelationInput {
  domains: [AppDomainsCreateFieldInput!]
  owner: WithOwnerOwnerCreateFieldInput
  pages: [AppPagesCreateFieldInput!]
  store: AppStoreCreateFieldInput
}

"""
Fields to sort Apps by. The order in which sorts are applied is not guaranteed when specifying many fields in one AppSort object.
"""
input AppSort {
  id: SortDirection
  name: SortDirection
  slug: SortDirection
}

input AppStoreAggregateInput {
  AND: [AppStoreAggregateInput!]
  OR: [AppStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AppStoreNodeAggregationWhereInput
}

input AppStoreConnectFieldInput {
  connect: StoreConnectInput
  where: StoreConnectWhere
}

input AppStoreConnectOrCreateFieldInput {
  onCreate: AppStoreConnectOrCreateFieldInputOnCreate!
  where: StoreConnectOrCreateWhere!
}

input AppStoreConnectOrCreateFieldInputOnCreate {
  node: StoreOnCreateInput!
}

type AppStoreConnection {
  edges: [AppStoreRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppStoreConnectionSort {
  node: StoreSort
}

input AppStoreConnectionWhere {
  AND: [AppStoreConnectionWhere!]
  OR: [AppStoreConnectionWhere!]
  node: StoreWhere
  node_NOT: StoreWhere
}

input AppStoreCreateFieldInput {
  node: StoreCreateInput!
}

input AppStoreDeleteFieldInput {
  delete: StoreDeleteInput
  where: AppStoreConnectionWhere
}

input AppStoreDisconnectFieldInput {
  disconnect: StoreDisconnectInput
  where: AppStoreConnectionWhere
}

input AppStoreFieldInput {
  connect: AppStoreConnectFieldInput
  connectOrCreate: AppStoreConnectOrCreateFieldInput
  create: AppStoreCreateFieldInput
}

input AppStoreNodeAggregationWhereInput {
  AND: [AppStoreNodeAggregationWhereInput!]
  OR: [AppStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AppStoreRelationship {
  cursor: String!
  node: Store!
}

type AppStoreStoreAggregationSelection {
  count: Int!
  node: AppStoreStoreNodeAggregateSelection
}

type AppStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppStoreUpdateConnectionInput {
  node: StoreUpdateInput
}

input AppStoreUpdateFieldInput {
  connect: AppStoreConnectFieldInput
  connectOrCreate: AppStoreConnectOrCreateFieldInput
  create: AppStoreCreateFieldInput
  delete: AppStoreDeleteFieldInput
  disconnect: AppStoreDisconnectFieldInput
  update: AppStoreUpdateConnectionInput
  where: AppStoreConnectionWhere
}

"""
Allows picking a app from the list of apps
"""
type AppType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): AppTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type AppTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AppTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input AppTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input AppTypeConnectOrCreateWhere {
  node: AppTypeUniqueWhere!
}

input AppTypeConnectWhere {
  node: AppTypeWhere!
}

input AppTypeCreateInput {
  id: ID!
  kind: TypeKind! = AppType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input AppTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input AppTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type AppTypeEdge {
  cursor: String!
  node: AppType!
}

input AppTypeOnCreateInput {
  id: ID!
  name: String!
}

input AppTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AppTypeSort objects to sort AppTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AppTypeSort!]
}

input AppTypeOwnerAggregateInput {
  AND: [AppTypeOwnerAggregateInput!]
  OR: [AppTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: AppTypeOwnerEdgeAggregationWhereInput
  node: AppTypeOwnerNodeAggregationWhereInput
}

input AppTypeOwnerEdgeAggregationWhereInput {
  AND: [AppTypeOwnerEdgeAggregationWhereInput!]
  OR: [AppTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input AppTypeOwnerNodeAggregationWhereInput {
  AND: [AppTypeOwnerNodeAggregationWhereInput!]
  OR: [AppTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input AppTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort AppTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one AppTypeSort object.
"""
input AppTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input AppTypeUniqueWhere {
  id: ID
}

input AppTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type AppTypeUserOwnerAggregationSelection {
  count: Int!
  edge: AppTypeUserOwnerEdgeAggregateSelection
  node: AppTypeUserOwnerNodeAggregateSelection
}

type AppTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type AppTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input AppTypeWhere {
  AND: [AppTypeWhere!]
  OR: [AppTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: AppTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type AppTypesConnection {
  edges: [AppTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppUniqueWhere {
  id: ID
}

input AppUpdateInput {
  domains: [AppDomainsUpdateFieldInput!]
  id: ID
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  pages: [AppPagesUpdateFieldInput!]
  slug: String
  store: AppStoreUpdateFieldInput
}

type AppUserOwnerAggregationSelection {
  count: Int!
  node: AppUserOwnerNodeAggregateSelection
}

type AppUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input AppWhere {
  AND: [AppWhere!]
  OR: [AppWhere!]
  domainsAggregate: AppDomainsAggregateInput
  domainsConnection_ALL: AppDomainsConnectionWhere
  domainsConnection_NONE: AppDomainsConnectionWhere
  domainsConnection_SINGLE: AppDomainsConnectionWhere
  domainsConnection_SOME: AppDomainsConnectionWhere

  """
  Return Apps where all of the related Domains match this filter
  """
  domains_ALL: DomainWhere

  """
  Return Apps where none of the related Domains match this filter
  """
  domains_NONE: DomainWhere

  """
  Return Apps where one of the related Domains match this filter
  """
  domains_SINGLE: DomainWhere

  """
  Return Apps where some of the related Domains match this filter
  """
  domains_SOME: DomainWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: AppOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  pagesAggregate: AppPagesAggregateInput
  pagesConnection_ALL: AppPagesConnectionWhere
  pagesConnection_NONE: AppPagesConnectionWhere
  pagesConnection_SINGLE: AppPagesConnectionWhere
  pagesConnection_SOME: AppPagesConnectionWhere

  """
  Return Apps where all of the related Pages match this filter
  """
  pages_ALL: PageWhere

  """
  Return Apps where none of the related Pages match this filter
  """
  pages_NONE: PageWhere

  """
  Return Apps where one of the related Pages match this filter
  """
  pages_SINGLE: PageWhere

  """
  Return Apps where some of the related Pages match this filter
  """
  pages_SOME: PageWhere
  slug: String
  slug_CONTAINS: String
  slug_ENDS_WITH: String
  slug_IN: [String!]
  slug_NOT: String
  slug_NOT_CONTAINS: String
  slug_NOT_ENDS_WITH: String
  slug_NOT_IN: [String!]
  slug_NOT_STARTS_WITH: String
  slug_STARTS_WITH: String
  store: StoreWhere
  storeAggregate: AppStoreAggregateInput
  storeConnection: AppStoreConnectionWhere
  storeConnection_NOT: AppStoreConnectionWhere
  store_NOT: StoreWhere
}

type AppsConnection {
  edges: [AppEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
ArrayType Allows defining a variable number of items of a given type.
Contains a reference to another type which is the array item type.
"""
type ArrayType implements TypeBase & WithDescendants {
  descendantTypesIds: [ID!]!
  id: ID!
  itemType(
    directed: Boolean = true
    options: QueryOptions
    where: AnyTypeWhere
  ): AnyType!
  itemTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: ArrayTypeItemTypeConnectionWhere
  ): ArrayTypeItemTypeConnection!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ArrayTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ArrayTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ArrayTypeConnectInput {
  itemType: ArrayTypeItemTypeConnectInput
  owner: TypeBaseOwnerConnectFieldInput
}

input ArrayTypeConnectOrCreateInput {
  itemType: ArrayTypeItemTypeConnectOrCreateInput
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ArrayTypeConnectOrCreateWhere {
  node: ArrayTypeUniqueWhere!
}

input ArrayTypeConnectWhere {
  node: ArrayTypeWhere!
}

input ArrayTypeCreateInput {
  id: ID!
  itemType: ArrayTypeItemTypeCreateInput
  kind: TypeKind! = ArrayType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ArrayTypeDeleteInput {
  itemType: ArrayTypeItemTypeDeleteInput
  owner: TypeBaseOwnerDeleteFieldInput
}

input ArrayTypeDisconnectInput {
  itemType: ArrayTypeItemTypeDisconnectInput
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ArrayTypeEdge {
  cursor: String!
  node: ArrayType!
}

input ArrayTypeItemTypeActionTypeConnectFieldInput {
  connect: ActionTypeConnectInput
  where: ActionTypeConnectWhere
}

input ArrayTypeItemTypeActionTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeActionTypeConnectOrCreateFieldInputOnCreate!
  where: ActionTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeActionTypeConnectOrCreateFieldInputOnCreate {
  node: ActionTypeOnCreateInput!
}

input ArrayTypeItemTypeActionTypeConnectionWhere {
  AND: [ArrayTypeItemTypeActionTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeActionTypeConnectionWhere!]
  node: ActionTypeWhere
  node_NOT: ActionTypeWhere
}

input ArrayTypeItemTypeActionTypeCreateFieldInput {
  node: ActionTypeCreateInput!
}

input ArrayTypeItemTypeActionTypeDeleteFieldInput {
  delete: ActionTypeDeleteInput
  where: ArrayTypeItemTypeActionTypeConnectionWhere
}

input ArrayTypeItemTypeActionTypeDisconnectFieldInput {
  disconnect: ActionTypeDisconnectInput
  where: ArrayTypeItemTypeActionTypeConnectionWhere
}

input ArrayTypeItemTypeActionTypeFieldInput {
  connect: ArrayTypeItemTypeActionTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeActionTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeActionTypeCreateFieldInput
}

input ArrayTypeItemTypeActionTypeUpdateConnectionInput {
  node: ActionTypeUpdateInput
}

input ArrayTypeItemTypeActionTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeActionTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeActionTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeActionTypeCreateFieldInput
  delete: ArrayTypeItemTypeActionTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeActionTypeDisconnectFieldInput
  update: ArrayTypeItemTypeActionTypeUpdateConnectionInput
  where: ArrayTypeItemTypeActionTypeConnectionWhere
}

input ArrayTypeItemTypeAppTypeConnectFieldInput {
  connect: AppTypeConnectInput
  where: AppTypeConnectWhere
}

input ArrayTypeItemTypeAppTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeAppTypeConnectOrCreateFieldInputOnCreate!
  where: AppTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeAppTypeConnectOrCreateFieldInputOnCreate {
  node: AppTypeOnCreateInput!
}

input ArrayTypeItemTypeAppTypeConnectionWhere {
  AND: [ArrayTypeItemTypeAppTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeAppTypeConnectionWhere!]
  node: AppTypeWhere
  node_NOT: AppTypeWhere
}

input ArrayTypeItemTypeAppTypeCreateFieldInput {
  node: AppTypeCreateInput!
}

input ArrayTypeItemTypeAppTypeDeleteFieldInput {
  delete: AppTypeDeleteInput
  where: ArrayTypeItemTypeAppTypeConnectionWhere
}

input ArrayTypeItemTypeAppTypeDisconnectFieldInput {
  disconnect: AppTypeDisconnectInput
  where: ArrayTypeItemTypeAppTypeConnectionWhere
}

input ArrayTypeItemTypeAppTypeFieldInput {
  connect: ArrayTypeItemTypeAppTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeAppTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeAppTypeCreateFieldInput
}

input ArrayTypeItemTypeAppTypeUpdateConnectionInput {
  node: AppTypeUpdateInput
}

input ArrayTypeItemTypeAppTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeAppTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeAppTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeAppTypeCreateFieldInput
  delete: ArrayTypeItemTypeAppTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeAppTypeDisconnectFieldInput
  update: ArrayTypeItemTypeAppTypeUpdateConnectionInput
  where: ArrayTypeItemTypeAppTypeConnectionWhere
}

input ArrayTypeItemTypeArrayTypeConnectFieldInput {
  connect: ArrayTypeConnectInput
  where: ArrayTypeConnectWhere
}

input ArrayTypeItemTypeArrayTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeArrayTypeConnectOrCreateFieldInputOnCreate!
  where: ArrayTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeArrayTypeConnectOrCreateFieldInputOnCreate {
  node: ArrayTypeOnCreateInput!
}

input ArrayTypeItemTypeArrayTypeConnectionWhere {
  AND: [ArrayTypeItemTypeArrayTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeArrayTypeConnectionWhere!]
  node: ArrayTypeWhere
  node_NOT: ArrayTypeWhere
}

input ArrayTypeItemTypeArrayTypeCreateFieldInput {
  node: ArrayTypeCreateInput!
}

input ArrayTypeItemTypeArrayTypeDeleteFieldInput {
  delete: ArrayTypeDeleteInput
  where: ArrayTypeItemTypeArrayTypeConnectionWhere
}

input ArrayTypeItemTypeArrayTypeDisconnectFieldInput {
  disconnect: ArrayTypeDisconnectInput
  where: ArrayTypeItemTypeArrayTypeConnectionWhere
}

input ArrayTypeItemTypeArrayTypeFieldInput {
  connect: ArrayTypeItemTypeArrayTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeArrayTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeArrayTypeCreateFieldInput
}

input ArrayTypeItemTypeArrayTypeUpdateConnectionInput {
  node: ArrayTypeUpdateInput
}

input ArrayTypeItemTypeArrayTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeArrayTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeArrayTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeArrayTypeCreateFieldInput
  delete: ArrayTypeItemTypeArrayTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeArrayTypeDisconnectFieldInput
  update: ArrayTypeItemTypeArrayTypeUpdateConnectionInput
  where: ArrayTypeItemTypeArrayTypeConnectionWhere
}

input ArrayTypeItemTypeCodeMirrorTypeConnectFieldInput {
  connect: CodeMirrorTypeConnectInput
  where: CodeMirrorTypeConnectWhere
}

input ArrayTypeItemTypeCodeMirrorTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeCodeMirrorTypeConnectOrCreateFieldInputOnCreate!
  where: CodeMirrorTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeCodeMirrorTypeConnectOrCreateFieldInputOnCreate {
  node: CodeMirrorTypeOnCreateInput!
}

input ArrayTypeItemTypeCodeMirrorTypeConnectionWhere {
  AND: [ArrayTypeItemTypeCodeMirrorTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeCodeMirrorTypeConnectionWhere!]
  node: CodeMirrorTypeWhere
  node_NOT: CodeMirrorTypeWhere
}

input ArrayTypeItemTypeCodeMirrorTypeCreateFieldInput {
  node: CodeMirrorTypeCreateInput!
}

input ArrayTypeItemTypeCodeMirrorTypeDeleteFieldInput {
  delete: CodeMirrorTypeDeleteInput
  where: ArrayTypeItemTypeCodeMirrorTypeConnectionWhere
}

input ArrayTypeItemTypeCodeMirrorTypeDisconnectFieldInput {
  disconnect: CodeMirrorTypeDisconnectInput
  where: ArrayTypeItemTypeCodeMirrorTypeConnectionWhere
}

input ArrayTypeItemTypeCodeMirrorTypeFieldInput {
  connect: ArrayTypeItemTypeCodeMirrorTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeCodeMirrorTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeCodeMirrorTypeCreateFieldInput
}

input ArrayTypeItemTypeCodeMirrorTypeUpdateConnectionInput {
  node: CodeMirrorTypeUpdateInput
}

input ArrayTypeItemTypeCodeMirrorTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeCodeMirrorTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeCodeMirrorTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeCodeMirrorTypeCreateFieldInput
  delete: ArrayTypeItemTypeCodeMirrorTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeCodeMirrorTypeDisconnectFieldInput
  update: ArrayTypeItemTypeCodeMirrorTypeUpdateConnectionInput
  where: ArrayTypeItemTypeCodeMirrorTypeConnectionWhere
}

input ArrayTypeItemTypeConnectInput {
  ActionType: ArrayTypeItemTypeActionTypeConnectFieldInput
  AppType: ArrayTypeItemTypeAppTypeConnectFieldInput
  ArrayType: ArrayTypeItemTypeArrayTypeConnectFieldInput
  CodeMirrorType: ArrayTypeItemTypeCodeMirrorTypeConnectFieldInput
  ElementType: ArrayTypeItemTypeElementTypeConnectFieldInput
  EnumType: ArrayTypeItemTypeEnumTypeConnectFieldInput
  InterfaceType: ArrayTypeItemTypeInterfaceTypeConnectFieldInput
  LambdaType: ArrayTypeItemTypeLambdaTypeConnectFieldInput
  PageType: ArrayTypeItemTypePageTypeConnectFieldInput
  PrimitiveType: ArrayTypeItemTypePrimitiveTypeConnectFieldInput
  ReactNodeType: ArrayTypeItemTypeReactNodeTypeConnectFieldInput
  RenderPropsType: ArrayTypeItemTypeRenderPropsTypeConnectFieldInput
  UnionType: ArrayTypeItemTypeUnionTypeConnectFieldInput
}

input ArrayTypeItemTypeConnectOrCreateInput {
  ActionType: ArrayTypeItemTypeActionTypeConnectOrCreateFieldInput
  AppType: ArrayTypeItemTypeAppTypeConnectOrCreateFieldInput
  ArrayType: ArrayTypeItemTypeArrayTypeConnectOrCreateFieldInput
  CodeMirrorType: ArrayTypeItemTypeCodeMirrorTypeConnectOrCreateFieldInput
  ElementType: ArrayTypeItemTypeElementTypeConnectOrCreateFieldInput
  EnumType: ArrayTypeItemTypeEnumTypeConnectOrCreateFieldInput
  InterfaceType: ArrayTypeItemTypeInterfaceTypeConnectOrCreateFieldInput
  LambdaType: ArrayTypeItemTypeLambdaTypeConnectOrCreateFieldInput
  PageType: ArrayTypeItemTypePageTypeConnectOrCreateFieldInput
  PrimitiveType: ArrayTypeItemTypePrimitiveTypeConnectOrCreateFieldInput
  ReactNodeType: ArrayTypeItemTypeReactNodeTypeConnectOrCreateFieldInput
  RenderPropsType: ArrayTypeItemTypeRenderPropsTypeConnectOrCreateFieldInput
  UnionType: ArrayTypeItemTypeUnionTypeConnectOrCreateFieldInput
}

type ArrayTypeItemTypeConnection {
  edges: [ArrayTypeItemTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ArrayTypeItemTypeConnectionWhere {
  ActionType: ArrayTypeItemTypeActionTypeConnectionWhere
  AppType: ArrayTypeItemTypeAppTypeConnectionWhere
  ArrayType: ArrayTypeItemTypeArrayTypeConnectionWhere
  CodeMirrorType: ArrayTypeItemTypeCodeMirrorTypeConnectionWhere
  ElementType: ArrayTypeItemTypeElementTypeConnectionWhere
  EnumType: ArrayTypeItemTypeEnumTypeConnectionWhere
  InterfaceType: ArrayTypeItemTypeInterfaceTypeConnectionWhere
  LambdaType: ArrayTypeItemTypeLambdaTypeConnectionWhere
  PageType: ArrayTypeItemTypePageTypeConnectionWhere
  PrimitiveType: ArrayTypeItemTypePrimitiveTypeConnectionWhere
  ReactNodeType: ArrayTypeItemTypeReactNodeTypeConnectionWhere
  RenderPropsType: ArrayTypeItemTypeRenderPropsTypeConnectionWhere
  UnionType: ArrayTypeItemTypeUnionTypeConnectionWhere
}

input ArrayTypeItemTypeCreateFieldInput {
  ActionType: [ArrayTypeItemTypeActionTypeCreateFieldInput!]
  AppType: [ArrayTypeItemTypeAppTypeCreateFieldInput!]
  ArrayType: [ArrayTypeItemTypeArrayTypeCreateFieldInput!]
  CodeMirrorType: [ArrayTypeItemTypeCodeMirrorTypeCreateFieldInput!]
  ElementType: [ArrayTypeItemTypeElementTypeCreateFieldInput!]
  EnumType: [ArrayTypeItemTypeEnumTypeCreateFieldInput!]
  InterfaceType: [ArrayTypeItemTypeInterfaceTypeCreateFieldInput!]
  LambdaType: [ArrayTypeItemTypeLambdaTypeCreateFieldInput!]
  PageType: [ArrayTypeItemTypePageTypeCreateFieldInput!]
  PrimitiveType: [ArrayTypeItemTypePrimitiveTypeCreateFieldInput!]
  ReactNodeType: [ArrayTypeItemTypeReactNodeTypeCreateFieldInput!]
  RenderPropsType: [ArrayTypeItemTypeRenderPropsTypeCreateFieldInput!]
  UnionType: [ArrayTypeItemTypeUnionTypeCreateFieldInput!]
}

input ArrayTypeItemTypeCreateInput {
  ActionType: ArrayTypeItemTypeActionTypeFieldInput
  AppType: ArrayTypeItemTypeAppTypeFieldInput
  ArrayType: ArrayTypeItemTypeArrayTypeFieldInput
  CodeMirrorType: ArrayTypeItemTypeCodeMirrorTypeFieldInput
  ElementType: ArrayTypeItemTypeElementTypeFieldInput
  EnumType: ArrayTypeItemTypeEnumTypeFieldInput
  InterfaceType: ArrayTypeItemTypeInterfaceTypeFieldInput
  LambdaType: ArrayTypeItemTypeLambdaTypeFieldInput
  PageType: ArrayTypeItemTypePageTypeFieldInput
  PrimitiveType: ArrayTypeItemTypePrimitiveTypeFieldInput
  ReactNodeType: ArrayTypeItemTypeReactNodeTypeFieldInput
  RenderPropsType: ArrayTypeItemTypeRenderPropsTypeFieldInput
  UnionType: ArrayTypeItemTypeUnionTypeFieldInput
}

input ArrayTypeItemTypeDeleteInput {
  ActionType: ArrayTypeItemTypeActionTypeDeleteFieldInput
  AppType: ArrayTypeItemTypeAppTypeDeleteFieldInput
  ArrayType: ArrayTypeItemTypeArrayTypeDeleteFieldInput
  CodeMirrorType: ArrayTypeItemTypeCodeMirrorTypeDeleteFieldInput
  ElementType: ArrayTypeItemTypeElementTypeDeleteFieldInput
  EnumType: ArrayTypeItemTypeEnumTypeDeleteFieldInput
  InterfaceType: ArrayTypeItemTypeInterfaceTypeDeleteFieldInput
  LambdaType: ArrayTypeItemTypeLambdaTypeDeleteFieldInput
  PageType: ArrayTypeItemTypePageTypeDeleteFieldInput
  PrimitiveType: ArrayTypeItemTypePrimitiveTypeDeleteFieldInput
  ReactNodeType: ArrayTypeItemTypeReactNodeTypeDeleteFieldInput
  RenderPropsType: ArrayTypeItemTypeRenderPropsTypeDeleteFieldInput
  UnionType: ArrayTypeItemTypeUnionTypeDeleteFieldInput
}

input ArrayTypeItemTypeDisconnectInput {
  ActionType: ArrayTypeItemTypeActionTypeDisconnectFieldInput
  AppType: ArrayTypeItemTypeAppTypeDisconnectFieldInput
  ArrayType: ArrayTypeItemTypeArrayTypeDisconnectFieldInput
  CodeMirrorType: ArrayTypeItemTypeCodeMirrorTypeDisconnectFieldInput
  ElementType: ArrayTypeItemTypeElementTypeDisconnectFieldInput
  EnumType: ArrayTypeItemTypeEnumTypeDisconnectFieldInput
  InterfaceType: ArrayTypeItemTypeInterfaceTypeDisconnectFieldInput
  LambdaType: ArrayTypeItemTypeLambdaTypeDisconnectFieldInput
  PageType: ArrayTypeItemTypePageTypeDisconnectFieldInput
  PrimitiveType: ArrayTypeItemTypePrimitiveTypeDisconnectFieldInput
  ReactNodeType: ArrayTypeItemTypeReactNodeTypeDisconnectFieldInput
  RenderPropsType: ArrayTypeItemTypeRenderPropsTypeDisconnectFieldInput
  UnionType: ArrayTypeItemTypeUnionTypeDisconnectFieldInput
}

input ArrayTypeItemTypeElementTypeConnectFieldInput {
  connect: ElementTypeConnectInput
  where: ElementTypeConnectWhere
}

input ArrayTypeItemTypeElementTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeElementTypeConnectOrCreateFieldInputOnCreate!
  where: ElementTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeElementTypeConnectOrCreateFieldInputOnCreate {
  node: ElementTypeOnCreateInput!
}

input ArrayTypeItemTypeElementTypeConnectionWhere {
  AND: [ArrayTypeItemTypeElementTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeElementTypeConnectionWhere!]
  node: ElementTypeWhere
  node_NOT: ElementTypeWhere
}

input ArrayTypeItemTypeElementTypeCreateFieldInput {
  node: ElementTypeCreateInput!
}

input ArrayTypeItemTypeElementTypeDeleteFieldInput {
  delete: ElementTypeDeleteInput
  where: ArrayTypeItemTypeElementTypeConnectionWhere
}

input ArrayTypeItemTypeElementTypeDisconnectFieldInput {
  disconnect: ElementTypeDisconnectInput
  where: ArrayTypeItemTypeElementTypeConnectionWhere
}

input ArrayTypeItemTypeElementTypeFieldInput {
  connect: ArrayTypeItemTypeElementTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeElementTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeElementTypeCreateFieldInput
}

input ArrayTypeItemTypeElementTypeUpdateConnectionInput {
  node: ElementTypeUpdateInput
}

input ArrayTypeItemTypeElementTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeElementTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeElementTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeElementTypeCreateFieldInput
  delete: ArrayTypeItemTypeElementTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeElementTypeDisconnectFieldInput
  update: ArrayTypeItemTypeElementTypeUpdateConnectionInput
  where: ArrayTypeItemTypeElementTypeConnectionWhere
}

input ArrayTypeItemTypeEnumTypeConnectFieldInput {
  connect: EnumTypeConnectInput
  where: EnumTypeConnectWhere
}

input ArrayTypeItemTypeEnumTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeEnumTypeConnectOrCreateFieldInputOnCreate!
  where: EnumTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeEnumTypeConnectOrCreateFieldInputOnCreate {
  node: EnumTypeOnCreateInput!
}

input ArrayTypeItemTypeEnumTypeConnectionWhere {
  AND: [ArrayTypeItemTypeEnumTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeEnumTypeConnectionWhere!]
  node: EnumTypeWhere
  node_NOT: EnumTypeWhere
}

input ArrayTypeItemTypeEnumTypeCreateFieldInput {
  node: EnumTypeCreateInput!
}

input ArrayTypeItemTypeEnumTypeDeleteFieldInput {
  delete: EnumTypeDeleteInput
  where: ArrayTypeItemTypeEnumTypeConnectionWhere
}

input ArrayTypeItemTypeEnumTypeDisconnectFieldInput {
  disconnect: EnumTypeDisconnectInput
  where: ArrayTypeItemTypeEnumTypeConnectionWhere
}

input ArrayTypeItemTypeEnumTypeFieldInput {
  connect: ArrayTypeItemTypeEnumTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeEnumTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeEnumTypeCreateFieldInput
}

input ArrayTypeItemTypeEnumTypeUpdateConnectionInput {
  node: EnumTypeUpdateInput
}

input ArrayTypeItemTypeEnumTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeEnumTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeEnumTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeEnumTypeCreateFieldInput
  delete: ArrayTypeItemTypeEnumTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeEnumTypeDisconnectFieldInput
  update: ArrayTypeItemTypeEnumTypeUpdateConnectionInput
  where: ArrayTypeItemTypeEnumTypeConnectionWhere
}

input ArrayTypeItemTypeInterfaceTypeConnectFieldInput {
  connect: InterfaceTypeConnectInput
  where: InterfaceTypeConnectWhere
}

input ArrayTypeItemTypeInterfaceTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeInterfaceTypeConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeInterfaceTypeConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

input ArrayTypeItemTypeInterfaceTypeConnectionWhere {
  AND: [ArrayTypeItemTypeInterfaceTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeInterfaceTypeConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input ArrayTypeItemTypeInterfaceTypeCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input ArrayTypeItemTypeInterfaceTypeDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: ArrayTypeItemTypeInterfaceTypeConnectionWhere
}

input ArrayTypeItemTypeInterfaceTypeDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: ArrayTypeItemTypeInterfaceTypeConnectionWhere
}

input ArrayTypeItemTypeInterfaceTypeFieldInput {
  connect: ArrayTypeItemTypeInterfaceTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeInterfaceTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeInterfaceTypeCreateFieldInput
}

input ArrayTypeItemTypeInterfaceTypeUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input ArrayTypeItemTypeInterfaceTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeInterfaceTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeInterfaceTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeInterfaceTypeCreateFieldInput
  delete: ArrayTypeItemTypeInterfaceTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeInterfaceTypeDisconnectFieldInput
  update: ArrayTypeItemTypeInterfaceTypeUpdateConnectionInput
  where: ArrayTypeItemTypeInterfaceTypeConnectionWhere
}

input ArrayTypeItemTypeLambdaTypeConnectFieldInput {
  connect: LambdaTypeConnectInput
  where: LambdaTypeConnectWhere
}

input ArrayTypeItemTypeLambdaTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeLambdaTypeConnectOrCreateFieldInputOnCreate!
  where: LambdaTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeLambdaTypeConnectOrCreateFieldInputOnCreate {
  node: LambdaTypeOnCreateInput!
}

input ArrayTypeItemTypeLambdaTypeConnectionWhere {
  AND: [ArrayTypeItemTypeLambdaTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeLambdaTypeConnectionWhere!]
  node: LambdaTypeWhere
  node_NOT: LambdaTypeWhere
}

input ArrayTypeItemTypeLambdaTypeCreateFieldInput {
  node: LambdaTypeCreateInput!
}

input ArrayTypeItemTypeLambdaTypeDeleteFieldInput {
  delete: LambdaTypeDeleteInput
  where: ArrayTypeItemTypeLambdaTypeConnectionWhere
}

input ArrayTypeItemTypeLambdaTypeDisconnectFieldInput {
  disconnect: LambdaTypeDisconnectInput
  where: ArrayTypeItemTypeLambdaTypeConnectionWhere
}

input ArrayTypeItemTypeLambdaTypeFieldInput {
  connect: ArrayTypeItemTypeLambdaTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeLambdaTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeLambdaTypeCreateFieldInput
}

input ArrayTypeItemTypeLambdaTypeUpdateConnectionInput {
  node: LambdaTypeUpdateInput
}

input ArrayTypeItemTypeLambdaTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeLambdaTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeLambdaTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeLambdaTypeCreateFieldInput
  delete: ArrayTypeItemTypeLambdaTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeLambdaTypeDisconnectFieldInput
  update: ArrayTypeItemTypeLambdaTypeUpdateConnectionInput
  where: ArrayTypeItemTypeLambdaTypeConnectionWhere
}

input ArrayTypeItemTypePageTypeConnectFieldInput {
  connect: PageTypeConnectInput
  where: PageTypeConnectWhere
}

input ArrayTypeItemTypePageTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypePageTypeConnectOrCreateFieldInputOnCreate!
  where: PageTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypePageTypeConnectOrCreateFieldInputOnCreate {
  node: PageTypeOnCreateInput!
}

input ArrayTypeItemTypePageTypeConnectionWhere {
  AND: [ArrayTypeItemTypePageTypeConnectionWhere!]
  OR: [ArrayTypeItemTypePageTypeConnectionWhere!]
  node: PageTypeWhere
  node_NOT: PageTypeWhere
}

input ArrayTypeItemTypePageTypeCreateFieldInput {
  node: PageTypeCreateInput!
}

input ArrayTypeItemTypePageTypeDeleteFieldInput {
  delete: PageTypeDeleteInput
  where: ArrayTypeItemTypePageTypeConnectionWhere
}

input ArrayTypeItemTypePageTypeDisconnectFieldInput {
  disconnect: PageTypeDisconnectInput
  where: ArrayTypeItemTypePageTypeConnectionWhere
}

input ArrayTypeItemTypePageTypeFieldInput {
  connect: ArrayTypeItemTypePageTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypePageTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypePageTypeCreateFieldInput
}

input ArrayTypeItemTypePageTypeUpdateConnectionInput {
  node: PageTypeUpdateInput
}

input ArrayTypeItemTypePageTypeUpdateFieldInput {
  connect: ArrayTypeItemTypePageTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypePageTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypePageTypeCreateFieldInput
  delete: ArrayTypeItemTypePageTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypePageTypeDisconnectFieldInput
  update: ArrayTypeItemTypePageTypeUpdateConnectionInput
  where: ArrayTypeItemTypePageTypeConnectionWhere
}

input ArrayTypeItemTypePrimitiveTypeConnectFieldInput {
  connect: PrimitiveTypeConnectInput
  where: PrimitiveTypeConnectWhere
}

input ArrayTypeItemTypePrimitiveTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypePrimitiveTypeConnectOrCreateFieldInputOnCreate!
  where: PrimitiveTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypePrimitiveTypeConnectOrCreateFieldInputOnCreate {
  node: PrimitiveTypeOnCreateInput!
}

input ArrayTypeItemTypePrimitiveTypeConnectionWhere {
  AND: [ArrayTypeItemTypePrimitiveTypeConnectionWhere!]
  OR: [ArrayTypeItemTypePrimitiveTypeConnectionWhere!]
  node: PrimitiveTypeWhere
  node_NOT: PrimitiveTypeWhere
}

input ArrayTypeItemTypePrimitiveTypeCreateFieldInput {
  node: PrimitiveTypeCreateInput!
}

input ArrayTypeItemTypePrimitiveTypeDeleteFieldInput {
  delete: PrimitiveTypeDeleteInput
  where: ArrayTypeItemTypePrimitiveTypeConnectionWhere
}

input ArrayTypeItemTypePrimitiveTypeDisconnectFieldInput {
  disconnect: PrimitiveTypeDisconnectInput
  where: ArrayTypeItemTypePrimitiveTypeConnectionWhere
}

input ArrayTypeItemTypePrimitiveTypeFieldInput {
  connect: ArrayTypeItemTypePrimitiveTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypePrimitiveTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypePrimitiveTypeCreateFieldInput
}

input ArrayTypeItemTypePrimitiveTypeUpdateConnectionInput {
  node: PrimitiveTypeUpdateInput
}

input ArrayTypeItemTypePrimitiveTypeUpdateFieldInput {
  connect: ArrayTypeItemTypePrimitiveTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypePrimitiveTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypePrimitiveTypeCreateFieldInput
  delete: ArrayTypeItemTypePrimitiveTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypePrimitiveTypeDisconnectFieldInput
  update: ArrayTypeItemTypePrimitiveTypeUpdateConnectionInput
  where: ArrayTypeItemTypePrimitiveTypeConnectionWhere
}

input ArrayTypeItemTypeReactNodeTypeConnectFieldInput {
  connect: ReactNodeTypeConnectInput
  where: ReactNodeTypeConnectWhere
}

input ArrayTypeItemTypeReactNodeTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeReactNodeTypeConnectOrCreateFieldInputOnCreate!
  where: ReactNodeTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeReactNodeTypeConnectOrCreateFieldInputOnCreate {
  node: ReactNodeTypeOnCreateInput!
}

input ArrayTypeItemTypeReactNodeTypeConnectionWhere {
  AND: [ArrayTypeItemTypeReactNodeTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeReactNodeTypeConnectionWhere!]
  node: ReactNodeTypeWhere
  node_NOT: ReactNodeTypeWhere
}

input ArrayTypeItemTypeReactNodeTypeCreateFieldInput {
  node: ReactNodeTypeCreateInput!
}

input ArrayTypeItemTypeReactNodeTypeDeleteFieldInput {
  delete: ReactNodeTypeDeleteInput
  where: ArrayTypeItemTypeReactNodeTypeConnectionWhere
}

input ArrayTypeItemTypeReactNodeTypeDisconnectFieldInput {
  disconnect: ReactNodeTypeDisconnectInput
  where: ArrayTypeItemTypeReactNodeTypeConnectionWhere
}

input ArrayTypeItemTypeReactNodeTypeFieldInput {
  connect: ArrayTypeItemTypeReactNodeTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeReactNodeTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeReactNodeTypeCreateFieldInput
}

input ArrayTypeItemTypeReactNodeTypeUpdateConnectionInput {
  node: ReactNodeTypeUpdateInput
}

input ArrayTypeItemTypeReactNodeTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeReactNodeTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeReactNodeTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeReactNodeTypeCreateFieldInput
  delete: ArrayTypeItemTypeReactNodeTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeReactNodeTypeDisconnectFieldInput
  update: ArrayTypeItemTypeReactNodeTypeUpdateConnectionInput
  where: ArrayTypeItemTypeReactNodeTypeConnectionWhere
}

type ArrayTypeItemTypeRelationship {
  cursor: String!
  node: AnyType!
}

input ArrayTypeItemTypeRenderPropsTypeConnectFieldInput {
  connect: RenderPropsTypeConnectInput
  where: RenderPropsTypeConnectWhere
}

input ArrayTypeItemTypeRenderPropsTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeRenderPropsTypeConnectOrCreateFieldInputOnCreate!
  where: RenderPropsTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeRenderPropsTypeConnectOrCreateFieldInputOnCreate {
  node: RenderPropsTypeOnCreateInput!
}

input ArrayTypeItemTypeRenderPropsTypeConnectionWhere {
  AND: [ArrayTypeItemTypeRenderPropsTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeRenderPropsTypeConnectionWhere!]
  node: RenderPropsTypeWhere
  node_NOT: RenderPropsTypeWhere
}

input ArrayTypeItemTypeRenderPropsTypeCreateFieldInput {
  node: RenderPropsTypeCreateInput!
}

input ArrayTypeItemTypeRenderPropsTypeDeleteFieldInput {
  delete: RenderPropsTypeDeleteInput
  where: ArrayTypeItemTypeRenderPropsTypeConnectionWhere
}

input ArrayTypeItemTypeRenderPropsTypeDisconnectFieldInput {
  disconnect: RenderPropsTypeDisconnectInput
  where: ArrayTypeItemTypeRenderPropsTypeConnectionWhere
}

input ArrayTypeItemTypeRenderPropsTypeFieldInput {
  connect: ArrayTypeItemTypeRenderPropsTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeRenderPropsTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeRenderPropsTypeCreateFieldInput
}

input ArrayTypeItemTypeRenderPropsTypeUpdateConnectionInput {
  node: RenderPropsTypeUpdateInput
}

input ArrayTypeItemTypeRenderPropsTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeRenderPropsTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeRenderPropsTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeRenderPropsTypeCreateFieldInput
  delete: ArrayTypeItemTypeRenderPropsTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeRenderPropsTypeDisconnectFieldInput
  update: ArrayTypeItemTypeRenderPropsTypeUpdateConnectionInput
  where: ArrayTypeItemTypeRenderPropsTypeConnectionWhere
}

input ArrayTypeItemTypeUnionTypeConnectFieldInput {
  connect: UnionTypeConnectInput
  where: UnionTypeConnectWhere
}

input ArrayTypeItemTypeUnionTypeConnectOrCreateFieldInput {
  onCreate: ArrayTypeItemTypeUnionTypeConnectOrCreateFieldInputOnCreate!
  where: UnionTypeConnectOrCreateWhere!
}

input ArrayTypeItemTypeUnionTypeConnectOrCreateFieldInputOnCreate {
  node: UnionTypeOnCreateInput!
}

input ArrayTypeItemTypeUnionTypeConnectionWhere {
  AND: [ArrayTypeItemTypeUnionTypeConnectionWhere!]
  OR: [ArrayTypeItemTypeUnionTypeConnectionWhere!]
  node: UnionTypeWhere
  node_NOT: UnionTypeWhere
}

input ArrayTypeItemTypeUnionTypeCreateFieldInput {
  node: UnionTypeCreateInput!
}

input ArrayTypeItemTypeUnionTypeDeleteFieldInput {
  delete: UnionTypeDeleteInput
  where: ArrayTypeItemTypeUnionTypeConnectionWhere
}

input ArrayTypeItemTypeUnionTypeDisconnectFieldInput {
  disconnect: UnionTypeDisconnectInput
  where: ArrayTypeItemTypeUnionTypeConnectionWhere
}

input ArrayTypeItemTypeUnionTypeFieldInput {
  connect: ArrayTypeItemTypeUnionTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeUnionTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeUnionTypeCreateFieldInput
}

input ArrayTypeItemTypeUnionTypeUpdateConnectionInput {
  node: UnionTypeUpdateInput
}

input ArrayTypeItemTypeUnionTypeUpdateFieldInput {
  connect: ArrayTypeItemTypeUnionTypeConnectFieldInput
  connectOrCreate: ArrayTypeItemTypeUnionTypeConnectOrCreateFieldInput
  create: ArrayTypeItemTypeUnionTypeCreateFieldInput
  delete: ArrayTypeItemTypeUnionTypeDeleteFieldInput
  disconnect: ArrayTypeItemTypeUnionTypeDisconnectFieldInput
  update: ArrayTypeItemTypeUnionTypeUpdateConnectionInput
  where: ArrayTypeItemTypeUnionTypeConnectionWhere
}

input ArrayTypeItemTypeUpdateInput {
  ActionType: ArrayTypeItemTypeActionTypeUpdateFieldInput
  AppType: ArrayTypeItemTypeAppTypeUpdateFieldInput
  ArrayType: ArrayTypeItemTypeArrayTypeUpdateFieldInput
  CodeMirrorType: ArrayTypeItemTypeCodeMirrorTypeUpdateFieldInput
  ElementType: ArrayTypeItemTypeElementTypeUpdateFieldInput
  EnumType: ArrayTypeItemTypeEnumTypeUpdateFieldInput
  InterfaceType: ArrayTypeItemTypeInterfaceTypeUpdateFieldInput
  LambdaType: ArrayTypeItemTypeLambdaTypeUpdateFieldInput
  PageType: ArrayTypeItemTypePageTypeUpdateFieldInput
  PrimitiveType: ArrayTypeItemTypePrimitiveTypeUpdateFieldInput
  ReactNodeType: ArrayTypeItemTypeReactNodeTypeUpdateFieldInput
  RenderPropsType: ArrayTypeItemTypeRenderPropsTypeUpdateFieldInput
  UnionType: ArrayTypeItemTypeUnionTypeUpdateFieldInput
}

input ArrayTypeOnCreateInput {
  id: ID!
  name: String!
}

input ArrayTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ArrayTypeSort objects to sort ArrayTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ArrayTypeSort!]
}

input ArrayTypeOwnerAggregateInput {
  AND: [ArrayTypeOwnerAggregateInput!]
  OR: [ArrayTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ArrayTypeOwnerEdgeAggregationWhereInput
  node: ArrayTypeOwnerNodeAggregationWhereInput
}

input ArrayTypeOwnerEdgeAggregationWhereInput {
  AND: [ArrayTypeOwnerEdgeAggregationWhereInput!]
  OR: [ArrayTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input ArrayTypeOwnerNodeAggregationWhereInput {
  AND: [ArrayTypeOwnerNodeAggregationWhereInput!]
  OR: [ArrayTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input ArrayTypeRelationInput {
  itemType: ArrayTypeItemTypeCreateFieldInput
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ArrayTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ArrayTypeSort object.
"""
input ArrayTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ArrayTypeUniqueWhere {
  id: ID
}

input ArrayTypeUpdateInput {
  id: ID
  itemType: ArrayTypeItemTypeUpdateInput
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ArrayTypeUserOwnerAggregationSelection {
  count: Int!
  edge: ArrayTypeUserOwnerEdgeAggregateSelection
  node: ArrayTypeUserOwnerNodeAggregateSelection
}

type ArrayTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type ArrayTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ArrayTypeWhere {
  AND: [ArrayTypeWhere!]
  OR: [ArrayTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  itemTypeConnection: ArrayTypeItemTypeConnectionWhere
  itemTypeConnection_NOT: ArrayTypeItemTypeConnectionWhere
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ArrayTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ArrayTypesConnection {
  edges: [ArrayTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Atom {
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): AtomInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomApiConnectionSort!]
    where: AtomApiConnectionWhere
  ): AtomApiConnection!
  icon: String
  id: ID!
  name: String!
  tags(directed: Boolean = true, options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(
    directed: Boolean = true
    where: TagWhere
  ): AtomTagTagsAggregationSelection
  tagsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [AtomTagsConnectionSort!]
    where: AtomTagsConnectionWhere
  ): AtomTagsConnection!
  type: AtomType!
}

type AtomAggregateSelection {
  count: Int!
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomApiAggregateInput {
  AND: [AtomApiAggregateInput!]
  OR: [AtomApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomApiNodeAggregationWhereInput
}

input AtomApiConnectFieldInput {
  connect: InterfaceTypeConnectInput
  where: InterfaceTypeConnectWhere
}

input AtomApiConnectOrCreateFieldInput {
  onCreate: AtomApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input AtomApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type AtomApiConnection {
  edges: [AtomApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomApiConnectionSort {
  node: InterfaceTypeSort
}

input AtomApiConnectionWhere {
  AND: [AtomApiConnectionWhere!]
  OR: [AtomApiConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input AtomApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input AtomApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: AtomApiConnectionWhere
}

input AtomApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: AtomApiConnectionWhere
}

input AtomApiFieldInput {
  connect: AtomApiConnectFieldInput
  connectOrCreate: AtomApiConnectOrCreateFieldInput
  create: AtomApiCreateFieldInput
}

input AtomApiNodeAggregationWhereInput {
  AND: [AtomApiNodeAggregationWhereInput!]
  OR: [AtomApiNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AtomApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input AtomApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input AtomApiUpdateFieldInput {
  connect: AtomApiConnectFieldInput
  connectOrCreate: AtomApiConnectOrCreateFieldInput
  create: AtomApiCreateFieldInput
  delete: AtomApiDeleteFieldInput
  disconnect: AtomApiDisconnectFieldInput
  update: AtomApiUpdateConnectionInput
  where: AtomApiConnectionWhere
}

input AtomConnectInput {
  api: AtomApiConnectFieldInput
  tags: [AtomTagsConnectFieldInput!]
}

input AtomConnectOrCreateInput {
  api: AtomApiConnectOrCreateFieldInput
  tags: [AtomTagsConnectOrCreateFieldInput!]
}

input AtomConnectOrCreateWhere {
  node: AtomUniqueWhere!
}

input AtomConnectWhere {
  node: AtomWhere!
}

input AtomCreateInput {
  api: AtomApiFieldInput
  icon: String
  id: ID!
  name: String!
  tags: AtomTagsFieldInput
  type: AtomType!
}

input AtomDeleteInput {
  api: AtomApiDeleteFieldInput
  tags: [AtomTagsDeleteFieldInput!]
}

input AtomDisconnectInput {
  api: AtomApiDisconnectFieldInput
  tags: [AtomTagsDisconnectFieldInput!]
}

type AtomEdge {
  cursor: String!
  node: Atom!
}

type AtomInterfaceTypeApiAggregationSelection {
  count: Int!
  node: AtomInterfaceTypeApiNodeAggregateSelection
}

type AtomInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomOnCreateInput {
  icon: String
  id: ID!
  name: String!
}

input AtomOptions {
  limit: Int
  offset: Int

  """
  Specify one or more AtomSort objects to sort Atoms by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [AtomSort!]
}

input AtomRelationInput {
  api: AtomApiCreateFieldInput
  tags: [AtomTagsCreateFieldInput!]
}

"""
Fields to sort Atoms by. The order in which sorts are applied is not guaranteed when specifying many fields in one AtomSort object.
"""
input AtomSort {
  icon: SortDirection
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

type AtomTagTagsAggregationSelection {
  count: Int!
  node: AtomTagTagsNodeAggregateSelection
}

type AtomTagTagsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input AtomTagsAggregateInput {
  AND: [AtomTagsAggregateInput!]
  OR: [AtomTagsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: AtomTagsNodeAggregationWhereInput
}

input AtomTagsConnectFieldInput {
  connect: [TagConnectInput!]
  where: TagConnectWhere
}

input AtomTagsConnectOrCreateFieldInput {
  onCreate: AtomTagsConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input AtomTagsConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type AtomTagsConnection {
  edges: [AtomTagsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AtomTagsConnectionSort {
  node: TagSort
}

input AtomTagsConnectionWhere {
  AND: [AtomTagsConnectionWhere!]
  OR: [AtomTagsConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input AtomTagsCreateFieldInput {
  node: TagCreateInput!
}

input AtomTagsDeleteFieldInput {
  delete: TagDeleteInput
  where: AtomTagsConnectionWhere
}

input AtomTagsDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: AtomTagsConnectionWhere
}

input AtomTagsFieldInput {
  connect: [AtomTagsConnectFieldInput!]
  connectOrCreate: [AtomTagsConnectOrCreateFieldInput!]
  create: [AtomTagsCreateFieldInput!]
}

input AtomTagsNodeAggregationWhereInput {
  AND: [AtomTagsNodeAggregationWhereInput!]
  OR: [AtomTagsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type AtomTagsRelationship {
  cursor: String!
  node: Tag!
}

input AtomTagsUpdateConnectionInput {
  node: TagUpdateInput
}

input AtomTagsUpdateFieldInput {
  connect: [AtomTagsConnectFieldInput!]
  connectOrCreate: [AtomTagsConnectOrCreateFieldInput!]
  create: [AtomTagsCreateFieldInput!]
  delete: [AtomTagsDeleteFieldInput!]
  disconnect: [AtomTagsDisconnectFieldInput!]
  update: AtomTagsUpdateConnectionInput
  where: AtomTagsConnectionWhere
}

enum AtomType {
  AntDesignAffix
  AntDesignAlert
  AntDesignAnchor
  AntDesignAnchorLink
  AntDesignAutoComplete
  AntDesignAvatar
  AntDesignBackTop
  AntDesignBadge
  AntDesignBreadcrumb
  AntDesignBreadcrumbItem
  AntDesignButton
  AntDesignCalendar
  AntDesignCard
  AntDesignCardGrid
  AntDesignCardMeta
  AntDesignCarousel
  AntDesignCascader
  AntDesignCheckbox
  AntDesignCollapse
  AntDesignCollapsePanel
  AntDesignComment
  AntDesignConfigProvider
  AntDesignDatePicker
  AntDesignDescriptions
  AntDesignDescriptionsItem
  AntDesignDivider
  AntDesignDrawer
  AntDesignDropdown
  AntDesignEmpty
  AntDesignForm
  AntDesignFormItem
  AntDesignFormItemHook
  AntDesignFormList
  AntDesignGridCol
  AntDesignGridRow
  AntDesignIcon
  AntDesignImage
  AntDesignInput
  AntDesignInputNumber
  AntDesignLayout
  AntDesignLayoutContent
  AntDesignLayoutFooter
  AntDesignLayoutHeader
  AntDesignLayoutSider
  AntDesignList
  AntDesignListItem
  AntDesignListItemMeta
  AntDesignMapper
  AntDesignMentions
  AntDesignMentionsOption
  AntDesignMenu
  AntDesignMenuItem
  AntDesignMenuItemGroup
  AntDesignMenuSubMenu
  AntDesignModal
  AntDesignPageContainer
  AntDesignPageHeader
  AntDesignPagination
  AntDesignPopconfirm
  AntDesignPopover
  AntDesignProgress
  AntDesignProvider
  AntDesignRadio
  AntDesignRadioGroup
  AntDesignRate
  AntDesignRenderComponent
  AntDesignRenderContainer
  AntDesignResult
  AntDesignRglContainer
  AntDesignRglItem
  AntDesignRglResponsiveContainer
  AntDesignSelect
  AntDesignSelectOption
  AntDesignSkeleton
  AntDesignSlider
  AntDesignSpace
  AntDesignSpin
  AntDesignStatistic
  AntDesignSteps
  AntDesignStepsStep
  AntDesignSwitch
  AntDesignTable
  AntDesignTabs
  AntDesignTabsTabPane
  AntDesignTag
  AntDesignTimePicker
  AntDesignTimeline
  AntDesignTimelineItem
  AntDesignTooltip
  AntDesignTransfer
  AntDesignTree
  AntDesignTreeNode
  AntDesignTreeSelect
  AntDesignTypography
  AntDesignTypographyParagraph
  AntDesignTypographyText
  AntDesignTypographyTitle
  AntDesignUpload
  HookGraphqlMutation
  HookGraphqlQuery
  HookQueryConfig
  HookQueryLambda
  HookQueryPage
  HookQueryPages
  HookRecoilState
  HookRouter
  HtmlA
  HtmlArea
  HtmlAside
  HtmlAudio
  HtmlBase
  HtmlBr
  HtmlButton
  HtmlCanvas
  HtmlCode
  HtmlDList
  HtmlData
  HtmlDatalist
  HtmlDetails
  HtmlDialog
  HtmlDiv
  HtmlEm
  HtmlEmbed
  HtmlFieldset
  HtmlFont
  HtmlFooter
  HtmlForm
  HtmlFrame
  HtmlFrameset
  HtmlH1
  HtmlH2
  HtmlH3
  HtmlH4
  HtmlH5
  HtmlH6
  HtmlHead
  HtmlHeader
  HtmlHr
  HtmlI
  HtmlIframe
  HtmlImage
  HtmlInput
  HtmlLabel
  HtmlLegend
  HtmlLi
  HtmlLink
  HtmlMain
  HtmlMap
  HtmlMeta
  HtmlMeter
  HtmlNav
  HtmlOList
  HtmlObject
  HtmlOptgroup
  HtmlOption
  HtmlOutput
  HtmlP
  HtmlParam
  HtmlPicture
  HtmlPre
  HtmlProgress
  HtmlQuote
  HtmlS
  HtmlSection
  HtmlSelect
  HtmlSmall
  HtmlSource
  HtmlSpan
  HtmlStrong
  HtmlStyle
  HtmlSub
  HtmlSup
  HtmlTable
  HtmlTableCaption
  HtmlTableCell
  HtmlTableCol
  HtmlTableRow
  HtmlTemplate
  HtmlTextarea
  HtmlTime
  HtmlTitle
  HtmlTrack
  HtmlUList
  HtmlVideo
  MuiAccordion
  MuiAccordionActions
  MuiAccordionDetails
  MuiAccordionSummary
  MuiAlert
  MuiAlertTitle
  MuiAppBar
  MuiAutocomplete
  MuiAvatar
  MuiAvatarGroup
  MuiBackdrop
  MuiBadge
  MuiBadgeUnstyled
  MuiBottomNavigation
  MuiBottomNavigationAction
  MuiBox
  MuiBreadcrumbs
  MuiButton
  MuiButtonBase
  MuiButtonGroup
  MuiButtonUnstyled
  MuiCalendarPicker
  MuiCalendarPickerSkeleton
  MuiCard
  MuiCardActionArea
  MuiCardActions
  MuiCardContent
  MuiCardHeader
  MuiCardMedia
  MuiCheckbox
  MuiChip
  MuiCircularProgress
  MuiClickAwayListener
  MuiClockPicker
  MuiCollapse
  MuiContainer
  MuiCssBaseline
  MuiDataGrid
  MuiDatePicker
  MuiDateRangePicker
  MuiDateRangePickerDay
  MuiDateTimePicker
  MuiDesktopDatePicker
  MuiDesktopDateRangePicker
  MuiDesktopDateTimePicker
  MuiDesktopTimePicker
  MuiDialog
  MuiDialogActions
  MuiDialogContent
  MuiDialogContentText
  MuiDialogTitle
  MuiDivider
  MuiDrawer
  MuiFab
  MuiFade
  MuiFilledInput
  MuiFormControl
  MuiFormControlLabel
  MuiFormControlUnstyled
  MuiFormGroup
  MuiFormHelperText
  MuiFormLabel
  MuiGlobalStyles
  MuiGrid
  MuiGridColDef
  MuiGrow
  MuiHidden
  MuiIcon
  MuiIconButton
  MuiImageList
  MuiImageListItem
  MuiImageListItemBar
  MuiInput
  MuiInputAdornment
  MuiInputBase
  MuiInputLabel
  MuiLinearProgress
  MuiLink
  MuiList
  MuiListItem
  MuiListItemAvatar
  MuiListItemButton
  MuiListItemIcon
  MuiListItemSecondaryAction
  MuiListItemText
  MuiListSubheader
  MuiLoadingButton
  MuiMasonry
  MuiMasonryItem
  MuiMenu
  MuiMenuItem
  MuiMenuList
  MuiMobileDatePicker
  MuiMobileDateRangePicker
  MuiMobileDateTimePicker
  MuiMobileStepper
  MuiMobileTimePicker
  MuiModal
  MuiModalUnstyled
  MuiMonthPicker
  MuiNativeSelect
  MuiNoSsr
  MuiOutlinedInput
  MuiPagination
  MuiPaginationItem
  MuiPaper
  MuiPickersDay
  MuiPopover
  MuiPopper
  MuiPortal
  MuiRadio
  MuiRadioGroup
  MuiRating
  MuiScopedCssBaseline
  MuiSelect
  MuiSkeleton
  MuiSlide
  MuiSlider
  MuiSliderUnstyled
  MuiSnackbar
  MuiSnackbarContent
  MuiSpeedDial
  MuiSpeedDialAction
  MuiSpeedDialIcon
  MuiStack
  MuiStaticDatePicker
  MuiStaticDateRangePicker
  MuiStaticDateTimePicker
  MuiStaticTimePicker
  MuiStep
  MuiStepButton
  MuiStepConnector
  MuiStepContent
  MuiStepIcon
  MuiStepLabel
  MuiStepper
  MuiSvgIcon
  MuiSwipeableDrawer
  MuiSwitch
  MuiSwitchUnstyled
  MuiTab
  MuiTabContext
  MuiTabList
  MuiTabPanel
  MuiTabScrollButton
  MuiTable
  MuiTableBody
  MuiTableCell
  MuiTableContainer
  MuiTableFooter
  MuiTableHead
  MuiTablePagination
  MuiTableRow
  MuiTableSortLabel
  MuiTabs
  MuiTextField
  MuiTextareaAutosize
  MuiTimePicker
  MuiTimeline
  MuiTimelineConnector
  MuiTimelineContent
  MuiTimelineDot
  MuiTimelineItem
  MuiTimelineOppositeContent
  MuiTimelineSeparator
  MuiToggleButton
  MuiToggleButtonGroup
  MuiToolbar
  MuiTooltip
  MuiTreeItem
  MuiTreeView
  MuiTypography
  MuiUnstableTrapFocus
  MuiYearPicker
  MuiZoom
  Query
  ReactFragment
  Script
  State
  Text
  TextList
}

input AtomUniqueWhere {
  id: ID
  name: String
  type: AtomType
}

input AtomUpdateInput {
  api: AtomApiUpdateFieldInput
  icon: String
  id: ID
  name: String
  tags: [AtomTagsUpdateFieldInput!]
  type: AtomType
}

input AtomWhere {
  AND: [AtomWhere!]
  OR: [AtomWhere!]
  api: InterfaceTypeWhere
  apiAggregate: AtomApiAggregateInput
  apiConnection: AtomApiConnectionWhere
  apiConnection_NOT: AtomApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  icon: String
  icon_CONTAINS: String
  icon_ENDS_WITH: String
  icon_IN: [String]
  icon_NOT: String
  icon_NOT_CONTAINS: String
  icon_NOT_ENDS_WITH: String
  icon_NOT_IN: [String]
  icon_NOT_STARTS_WITH: String
  icon_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  tagsAggregate: AtomTagsAggregateInput
  tagsConnection_ALL: AtomTagsConnectionWhere
  tagsConnection_NONE: AtomTagsConnectionWhere
  tagsConnection_SINGLE: AtomTagsConnectionWhere
  tagsConnection_SOME: AtomTagsConnectionWhere

  """
  Return Atoms where all of the related Tags match this filter
  """
  tags_ALL: TagWhere

  """
  Return Atoms where none of the related Tags match this filter
  """
  tags_NONE: TagWhere

  """
  Return Atoms where one of the related Tags match this filter
  """
  tags_SINGLE: TagWhere

  """
  Return Atoms where some of the related Tags match this filter
  """
  tags_SOME: TagWhere
  type: AtomType
  type_IN: [AtomType!]
  type_NOT: AtomType
  type_NOT_IN: [AtomType!]
}

type AtomsConnection {
  edges: [AtomEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CodeAction implements ActionBase {
  """
  Code to run when action is triggered
  """
  code: String!
  id: ID!
  name: String!
  store(
    directed: Boolean = true
    options: StoreOptions
    where: StoreWhere
  ): Store!
  storeAggregate(
    directed: Boolean = true
    where: StoreWhere
  ): CodeActionStoreStoreAggregationSelection
  storeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ActionBaseStoreConnectionSort!]
    where: ActionBaseStoreConnectionWhere
  ): ActionBaseStoreConnection!
  type: ActionKind!
}

type CodeActionAggregateSelection {
  code: StringAggregateSelectionNonNullable!
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CodeActionConnectInput {
  store: ActionBaseStoreConnectFieldInput
}

input CodeActionConnectOrCreateInput {
  store: ActionBaseStoreConnectOrCreateFieldInput
}

input CodeActionConnectOrCreateWhere {
  node: CodeActionUniqueWhere!
}

input CodeActionConnectWhere {
  node: CodeActionWhere!
}

input CodeActionCreateInput {
  code: String!
  id: ID!
  name: String!
  store: ActionBaseStoreFieldInput
  type: ActionKind! = CodeAction
}

input CodeActionDeleteInput {
  store: ActionBaseStoreDeleteFieldInput
}

input CodeActionDisconnectInput {
  store: ActionBaseStoreDisconnectFieldInput
}

type CodeActionEdge {
  cursor: String!
  node: CodeAction!
}

input CodeActionOnCreateInput {
  code: String!
  id: ID!
  name: String!
}

input CodeActionOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CodeActionSort objects to sort CodeActions by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CodeActionSort!]
}

input CodeActionRelationInput {
  store: ActionBaseStoreCreateFieldInput
}

"""
Fields to sort CodeActions by. The order in which sorts are applied is not guaranteed when specifying many fields in one CodeActionSort object.
"""
input CodeActionSort {
  code: SortDirection
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

input CodeActionStoreAggregateInput {
  AND: [CodeActionStoreAggregateInput!]
  OR: [CodeActionStoreAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: CodeActionStoreNodeAggregationWhereInput
}

input CodeActionStoreNodeAggregationWhereInput {
  AND: [CodeActionStoreNodeAggregationWhereInput!]
  OR: [CodeActionStoreNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type CodeActionStoreStoreAggregationSelection {
  count: Int!
  node: CodeActionStoreStoreNodeAggregateSelection
}

type CodeActionStoreStoreNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CodeActionUniqueWhere {
  id: ID
}

input CodeActionUpdateInput {
  code: String
  id: ID
  name: String
  store: ActionBaseStoreUpdateFieldInput
}

input CodeActionWhere {
  AND: [CodeActionWhere!]
  OR: [CodeActionWhere!]
  code: String
  code_CONTAINS: String
  code_ENDS_WITH: String
  code_IN: [String!]
  code_NOT: String
  code_NOT_CONTAINS: String
  code_NOT_ENDS_WITH: String
  code_NOT_IN: [String!]
  code_NOT_STARTS_WITH: String
  code_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  store: StoreWhere
  storeAggregate: CodeActionStoreAggregateInput
  storeConnection: ActionBaseStoreConnectionWhere
  storeConnection_NOT: ActionBaseStoreConnectionWhere
  store_NOT: StoreWhere
  type: ActionKind
  type_IN: [ActionKind!]
  type_NOT: ActionKind
  type_NOT_IN: [ActionKind!]
}

type CodeActionsConnection {
  edges: [CodeActionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum CodeMirrorLanguage {
  Css
  CssInJs
  Graphql
  Javascript
  Json
  Typescript
}

"""
Allows editing the value using a code mirror editor
"""
type CodeMirrorType implements TypeBase {
  id: ID!
  kind: TypeKind!
  language: CodeMirrorLanguage!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): CodeMirrorTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type CodeMirrorTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input CodeMirrorTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input CodeMirrorTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input CodeMirrorTypeConnectOrCreateWhere {
  node: CodeMirrorTypeUniqueWhere!
}

input CodeMirrorTypeConnectWhere {
  node: CodeMirrorTypeWhere!
}

input CodeMirrorTypeCreateInput {
  id: ID!
  kind: TypeKind! = CodeMirrorType
  language: CodeMirrorLanguage!
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input CodeMirrorTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input CodeMirrorTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type CodeMirrorTypeEdge {
  cursor: String!
  node: CodeMirrorType!
}

input CodeMirrorTypeOnCreateInput {
  id: ID!
  name: String!
}

input CodeMirrorTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CodeMirrorTypeSort objects to sort CodeMirrorTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CodeMirrorTypeSort!]
}

input CodeMirrorTypeOwnerAggregateInput {
  AND: [CodeMirrorTypeOwnerAggregateInput!]
  OR: [CodeMirrorTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: CodeMirrorTypeOwnerEdgeAggregationWhereInput
  node: CodeMirrorTypeOwnerNodeAggregationWhereInput
}

input CodeMirrorTypeOwnerEdgeAggregationWhereInput {
  AND: [CodeMirrorTypeOwnerEdgeAggregationWhereInput!]
  OR: [CodeMirrorTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input CodeMirrorTypeOwnerNodeAggregationWhereInput {
  AND: [CodeMirrorTypeOwnerNodeAggregationWhereInput!]
  OR: [CodeMirrorTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input CodeMirrorTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort CodeMirrorTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one CodeMirrorTypeSort object.
"""
input CodeMirrorTypeSort {
  id: SortDirection
  kind: SortDirection
  language: SortDirection
  name: SortDirection
}

input CodeMirrorTypeUniqueWhere {
  id: ID
}

input CodeMirrorTypeUpdateInput {
  id: ID
  language: CodeMirrorLanguage
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type CodeMirrorTypeUserOwnerAggregationSelection {
  count: Int!
  edge: CodeMirrorTypeUserOwnerEdgeAggregateSelection
  node: CodeMirrorTypeUserOwnerNodeAggregateSelection
}

type CodeMirrorTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type CodeMirrorTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input CodeMirrorTypeWhere {
  AND: [CodeMirrorTypeWhere!]
  OR: [CodeMirrorTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  language: CodeMirrorLanguage
  language_IN: [CodeMirrorLanguage!]
  language_NOT: CodeMirrorLanguage
  language_NOT_IN: [CodeMirrorLanguage!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: CodeMirrorTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type CodeMirrorTypesConnection {
  edges: [CodeMirrorTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Component implements WithOwner {
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): ComponentInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentApiConnectionSort!]
    where: ComponentApiConnectionWhere
  ): ComponentApiConnection!
  descendantComponentIds: [ID!]!
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ComponentUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  rootElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  rootElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ComponentElementRootElementAggregationSelection
  rootElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ComponentRootElementConnectionSort!]
    where: ComponentRootElementConnectionWhere
  ): ComponentRootElementConnection!
}

type ComponentAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ComponentApiAggregateInput {
  AND: [ComponentApiAggregateInput!]
  OR: [ComponentApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentApiNodeAggregationWhereInput
}

input ComponentApiConnectFieldInput {
  connect: InterfaceTypeConnectInput
  where: InterfaceTypeConnectWhere
}

input ComponentApiConnectOrCreateFieldInput {
  onCreate: ComponentApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input ComponentApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type ComponentApiConnection {
  edges: [ComponentApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentApiConnectionSort {
  node: InterfaceTypeSort
}

input ComponentApiConnectionWhere {
  AND: [ComponentApiConnectionWhere!]
  OR: [ComponentApiConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input ComponentApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input ComponentApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: ComponentApiConnectionWhere
}

input ComponentApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: ComponentApiConnectionWhere
}

input ComponentApiFieldInput {
  connect: ComponentApiConnectFieldInput
  connectOrCreate: ComponentApiConnectOrCreateFieldInput
  create: ComponentApiCreateFieldInput
}

input ComponentApiNodeAggregationWhereInput {
  AND: [ComponentApiNodeAggregationWhereInput!]
  OR: [ComponentApiNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ComponentApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input ComponentApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input ComponentApiUpdateFieldInput {
  connect: ComponentApiConnectFieldInput
  connectOrCreate: ComponentApiConnectOrCreateFieldInput
  create: ComponentApiCreateFieldInput
  delete: ComponentApiDeleteFieldInput
  disconnect: ComponentApiDisconnectFieldInput
  update: ComponentApiUpdateConnectionInput
  where: ComponentApiConnectionWhere
}

input ComponentConnectInput {
  api: ComponentApiConnectFieldInput
  owner: WithOwnerOwnerConnectFieldInput
  rootElement: ComponentRootElementConnectFieldInput
}

input ComponentConnectOrCreateInput {
  api: ComponentApiConnectOrCreateFieldInput
  owner: WithOwnerOwnerConnectOrCreateFieldInput
  rootElement: ComponentRootElementConnectOrCreateFieldInput
}

input ComponentConnectOrCreateWhere {
  node: ComponentUniqueWhere!
}

input ComponentConnectWhere {
  node: ComponentWhere!
}

input ComponentCreateInput {
  api: ComponentApiFieldInput
  id: ID!
  name: String!
  owner: WithOwnerOwnerFieldInput
  rootElement: ComponentRootElementFieldInput
}

input ComponentDeleteInput {
  api: ComponentApiDeleteFieldInput
  owner: WithOwnerOwnerDeleteFieldInput
  rootElement: ComponentRootElementDeleteFieldInput
}

input ComponentDisconnectInput {
  api: ComponentApiDisconnectFieldInput
  owner: WithOwnerOwnerDisconnectFieldInput
  rootElement: ComponentRootElementDisconnectFieldInput
}

type ComponentEdge {
  cursor: String!
  node: Component!
}

type ComponentElementRootElementAggregationSelection {
  count: Int!
  node: ComponentElementRootElementNodeAggregateSelection
}

type ComponentElementRootElementNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ComponentInterfaceTypeApiAggregationSelection {
  count: Int!
  node: ComponentInterfaceTypeApiNodeAggregateSelection
}

type ComponentInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ComponentOnCreateInput {
  id: ID!
  name: String!
}

input ComponentOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ComponentSort objects to sort Components by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ComponentSort!]
}

input ComponentOwnerAggregateInput {
  AND: [ComponentOwnerAggregateInput!]
  OR: [ComponentOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentOwnerNodeAggregationWhereInput
}

input ComponentOwnerNodeAggregationWhereInput {
  AND: [ComponentOwnerNodeAggregationWhereInput!]
  OR: [ComponentOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input ComponentRelationInput {
  api: ComponentApiCreateFieldInput
  owner: WithOwnerOwnerCreateFieldInput
  rootElement: ComponentRootElementCreateFieldInput
}

input ComponentRootElementAggregateInput {
  AND: [ComponentRootElementAggregateInput!]
  OR: [ComponentRootElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ComponentRootElementNodeAggregationWhereInput
}

input ComponentRootElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input ComponentRootElementConnectOrCreateFieldInput {
  onCreate: ComponentRootElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ComponentRootElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ComponentRootElementConnection {
  edges: [ComponentRootElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ComponentRootElementConnectionSort {
  node: ElementSort
}

input ComponentRootElementConnectionWhere {
  AND: [ComponentRootElementConnectionWhere!]
  OR: [ComponentRootElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input ComponentRootElementCreateFieldInput {
  node: ElementCreateInput!
}

input ComponentRootElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: ComponentRootElementConnectionWhere
}

input ComponentRootElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ComponentRootElementConnectionWhere
}

input ComponentRootElementFieldInput {
  connect: ComponentRootElementConnectFieldInput
  connectOrCreate: ComponentRootElementConnectOrCreateFieldInput
  create: ComponentRootElementCreateFieldInput
}

input ComponentRootElementNodeAggregationWhereInput {
  AND: [ComponentRootElementNodeAggregationWhereInput!]
  OR: [ComponentRootElementNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ComponentRootElementRelationship {
  cursor: String!
  node: Element!
}

input ComponentRootElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input ComponentRootElementUpdateFieldInput {
  connect: ComponentRootElementConnectFieldInput
  connectOrCreate: ComponentRootElementConnectOrCreateFieldInput
  create: ComponentRootElementCreateFieldInput
  delete: ComponentRootElementDeleteFieldInput
  disconnect: ComponentRootElementDisconnectFieldInput
  update: ComponentRootElementUpdateConnectionInput
  where: ComponentRootElementConnectionWhere
}

"""
Fields to sort Components by. The order in which sorts are applied is not guaranteed when specifying many fields in one ComponentSort object.
"""
input ComponentSort {
  id: SortDirection
  name: SortDirection
}

input ComponentUniqueWhere {
  id: ID
}

input ComponentUpdateInput {
  api: ComponentApiUpdateFieldInput
  id: ID
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  rootElement: ComponentRootElementUpdateFieldInput
}

type ComponentUserOwnerAggregationSelection {
  count: Int!
  node: ComponentUserOwnerNodeAggregateSelection
}

type ComponentUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ComponentWhere {
  AND: [ComponentWhere!]
  OR: [ComponentWhere!]
  api: InterfaceTypeWhere
  apiAggregate: ComponentApiAggregateInput
  apiConnection: ComponentApiConnectionWhere
  apiConnection_NOT: ComponentApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ComponentOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  rootElement: ElementWhere
  rootElementAggregate: ComponentRootElementAggregateInput
  rootElementConnection: ComponentRootElementConnectionWhere
  rootElementConnection_NOT: ComponentRootElementConnectionWhere
  rootElement_NOT: ElementWhere
}

type ComponentsConnection {
  edges: [ComponentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CreateActionTypesMutationResponse {
  actionTypes: [ActionType!]!
  info: CreateInfo!
}

type CreateApiActionsMutationResponse {
  apiActions: [ApiAction!]!
  info: CreateInfo!
}

type CreateAppTypesMutationResponse {
  appTypes: [AppType!]!
  info: CreateInfo!
}

type CreateAppsMutationResponse {
  apps: [App!]!
  info: CreateInfo!
}

type CreateArrayTypesMutationResponse {
  arrayTypes: [ArrayType!]!
  info: CreateInfo!
}

type CreateAtomsMutationResponse {
  atoms: [Atom!]!
  info: CreateInfo!
}

type CreateCodeActionsMutationResponse {
  codeActions: [CodeAction!]!
  info: CreateInfo!
}

type CreateCodeMirrorTypesMutationResponse {
  codeMirrorTypes: [CodeMirrorType!]!
  info: CreateInfo!
}

type CreateComponentsMutationResponse {
  components: [Component!]!
  info: CreateInfo!
}

type CreateCreateInfosMutationResponse {
  createInfos: [CreateInfo!]!
  info: CreateInfo!
}

type CreateDeleteInfosMutationResponse {
  deleteInfos: [DeleteInfo!]!
  info: CreateInfo!
}

input CreateDomainMutationInput {
  appId: String!
  name: String!
}

type CreateDomainsMutationResponse {
  domains: [Domain!]!
  info: CreateInfo!
}

type CreateElementTypesMutationResponse {
  elementTypes: [ElementType!]!
  info: CreateInfo!
}

type CreateElementsMutationResponse {
  elements: [Element!]!
  info: CreateInfo!
}

type CreateEnumTypeValuesMutationResponse {
  enumTypeValues: [EnumTypeValue!]!
  info: CreateInfo!
}

type CreateEnumTypesMutationResponse {
  enumTypes: [EnumType!]!
  info: CreateInfo!
}

type CreateHooksMutationResponse {
  hooks: [Hook!]!
  info: CreateInfo!
}

type CreateInfo {
  bookmark: String
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateInfoAggregateSelection {
  bookmark: StringAggregateSelectionNullable!
  count: Int!
  nodesCreated: IntAggregateSelectionNonNullable!
  relationshipsCreated: IntAggregateSelectionNonNullable!
}

input CreateInfoCreateInput {
  bookmark: String
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateInfoEdge {
  cursor: String!
  node: CreateInfo!
}

input CreateInfoOptions {
  limit: Int
  offset: Int

  """
  Specify one or more CreateInfoSort objects to sort CreateInfos by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [CreateInfoSort!]
}

"""
Fields to sort CreateInfos by. The order in which sorts are applied is not guaranteed when specifying many fields in one CreateInfoSort object.
"""
input CreateInfoSort {
  bookmark: SortDirection
  nodesCreated: SortDirection
  relationshipsCreated: SortDirection
}

input CreateInfoUpdateInput {
  bookmark: String
  nodesCreated: Int
  relationshipsCreated: Int
}

input CreateInfoWhere {
  AND: [CreateInfoWhere!]
  OR: [CreateInfoWhere!]
  bookmark: String
  bookmark_CONTAINS: String
  bookmark_ENDS_WITH: String
  bookmark_IN: [String]
  bookmark_NOT: String
  bookmark_NOT_CONTAINS: String
  bookmark_NOT_ENDS_WITH: String
  bookmark_NOT_IN: [String]
  bookmark_NOT_STARTS_WITH: String
  bookmark_STARTS_WITH: String
  nodesCreated: Int
  nodesCreated_GT: Int
  nodesCreated_GTE: Int
  nodesCreated_IN: [Int!]
  nodesCreated_LT: Int
  nodesCreated_LTE: Int
  nodesCreated_NOT: Int
  nodesCreated_NOT_IN: [Int!]
  relationshipsCreated: Int
  relationshipsCreated_GT: Int
  relationshipsCreated_GTE: Int
  relationshipsCreated_IN: [Int!]
  relationshipsCreated_LT: Int
  relationshipsCreated_LTE: Int
  relationshipsCreated_NOT: Int
  relationshipsCreated_NOT_IN: [Int!]
}

type CreateInfosConnection {
  edges: [CreateInfoEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CreateInterfaceTypesMutationResponse {
  info: CreateInfo!
  interfaceTypes: [InterfaceType!]!
}

type CreateLambdaTypesMutationResponse {
  info: CreateInfo!
  lambdaTypes: [LambdaType!]!
}

type CreatePageTypesMutationResponse {
  info: CreateInfo!
  pageTypes: [PageType!]!
}

type CreatePagesMutationResponse {
  info: CreateInfo!
  pages: [Page!]!
}

type CreatePrimitiveTypesMutationResponse {
  info: CreateInfo!
  primitiveTypes: [PrimitiveType!]!
}

type CreatePropMapBindingsMutationResponse {
  info: CreateInfo!
  propMapBindings: [PropMapBinding!]!
}

type CreatePropsMutationResponse {
  info: CreateInfo!
  props: [Prop!]!
}

type CreateReactNodeTypesMutationResponse {
  info: CreateInfo!
  reactNodeTypes: [ReactNodeType!]!
}

type CreateRenderPropsTypesMutationResponse {
  info: CreateInfo!
  renderPropsTypes: [RenderPropsType!]!
}

type CreateResetDatabaseMutationResponsesMutationResponse {
  info: CreateInfo!
  resetDatabaseMutationResponses: [ResetDatabaseMutationResponse!]!
}

type CreateResourcesMutationResponse {
  info: CreateInfo!
  resources: [Resource!]!
}

type CreateStoresMutationResponse {
  info: CreateInfo!
  stores: [Store!]!
}

type CreateTagsMutationResponse {
  info: CreateInfo!
  tags: [Tag!]!
}

type CreateTypeReferencesMutationResponse {
  info: CreateInfo!
  typeReferences: [TypeReference!]!
}

type CreateUnionTypesMutationResponse {
  info: CreateInfo!
  unionTypes: [UnionType!]!
}

type CreateUsersMutationResponse {
  info: CreateInfo!
  users: [User!]!
}

type CreateVercelDomainConfigDataMutationResponse {
  info: CreateInfo!
  vercelDomainConfigData: [VercelDomainConfigData!]!
}

type CreateVercelProjectDomainDataMutationResponse {
  info: CreateInfo!
  vercelProjectDomainData: [VercelProjectDomainData!]!
}

type DeleteInfo {
  bookmark: String
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

type DeleteInfoAggregateSelection {
  bookmark: StringAggregateSelectionNullable!
  count: Int!
  nodesDeleted: IntAggregateSelectionNonNullable!
  relationshipsDeleted: IntAggregateSelectionNonNullable!
}

input DeleteInfoCreateInput {
  bookmark: String
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

type DeleteInfoEdge {
  cursor: String!
  node: DeleteInfo!
}

input DeleteInfoOptions {
  limit: Int
  offset: Int

  """
  Specify one or more DeleteInfoSort objects to sort DeleteInfos by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [DeleteInfoSort!]
}

"""
Fields to sort DeleteInfos by. The order in which sorts are applied is not guaranteed when specifying many fields in one DeleteInfoSort object.
"""
input DeleteInfoSort {
  bookmark: SortDirection
  nodesDeleted: SortDirection
  relationshipsDeleted: SortDirection
}

input DeleteInfoUpdateInput {
  bookmark: String
  nodesDeleted: Int
  relationshipsDeleted: Int
}

input DeleteInfoWhere {
  AND: [DeleteInfoWhere!]
  OR: [DeleteInfoWhere!]
  bookmark: String
  bookmark_CONTAINS: String
  bookmark_ENDS_WITH: String
  bookmark_IN: [String]
  bookmark_NOT: String
  bookmark_NOT_CONTAINS: String
  bookmark_NOT_ENDS_WITH: String
  bookmark_NOT_IN: [String]
  bookmark_NOT_STARTS_WITH: String
  bookmark_STARTS_WITH: String
  nodesDeleted: Int
  nodesDeleted_GT: Int
  nodesDeleted_GTE: Int
  nodesDeleted_IN: [Int!]
  nodesDeleted_LT: Int
  nodesDeleted_LTE: Int
  nodesDeleted_NOT: Int
  nodesDeleted_NOT_IN: [Int!]
  relationshipsDeleted: Int
  relationshipsDeleted_GT: Int
  relationshipsDeleted_GTE: Int
  relationshipsDeleted_IN: [Int!]
  relationshipsDeleted_LT: Int
  relationshipsDeleted_LTE: Int
  relationshipsDeleted_NOT: Int
  relationshipsDeleted_NOT_IN: [Int!]
}

type DeleteInfosConnection {
  edges: [DeleteInfoEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Domain {
  app(directed: Boolean = true, options: AppOptions, where: AppWhere): App!
  appAggregate(
    directed: Boolean = true
    where: AppWhere
  ): DomainAppAppAggregationSelection
  appConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [DomainAppConnectionSort!]
    where: DomainAppConnectionWhere
  ): DomainAppConnection!
  domainConfig: VercelDomainConfigData!
  id: ID!
  name: String!
  projectDomain: VercelProjectDomainData!
}

type DomainAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input DomainAppAggregateInput {
  AND: [DomainAppAggregateInput!]
  OR: [DomainAppAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: DomainAppNodeAggregationWhereInput
}

type DomainAppAppAggregationSelection {
  count: Int!
  node: DomainAppAppNodeAggregateSelection
}

type DomainAppAppNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

input DomainAppConnectFieldInput {
  connect: AppConnectInput
  where: AppConnectWhere
}

input DomainAppConnectOrCreateFieldInput {
  onCreate: DomainAppConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input DomainAppConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type DomainAppConnection {
  edges: [DomainAppRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input DomainAppConnectionSort {
  node: AppSort
}

input DomainAppConnectionWhere {
  AND: [DomainAppConnectionWhere!]
  OR: [DomainAppConnectionWhere!]
  node: AppWhere
  node_NOT: AppWhere
}

input DomainAppCreateFieldInput {
  node: AppCreateInput!
}

input DomainAppDeleteFieldInput {
  delete: AppDeleteInput
  where: DomainAppConnectionWhere
}

input DomainAppDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: DomainAppConnectionWhere
}

input DomainAppFieldInput {
  connect: DomainAppConnectFieldInput
  connectOrCreate: DomainAppConnectOrCreateFieldInput
  create: DomainAppCreateFieldInput
}

input DomainAppNodeAggregationWhereInput {
  AND: [DomainAppNodeAggregationWhereInput!]
  OR: [DomainAppNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  slug_AVERAGE_EQUAL: Float
  slug_AVERAGE_GT: Float
  slug_AVERAGE_GTE: Float
  slug_AVERAGE_LT: Float
  slug_AVERAGE_LTE: Float
  slug_EQUAL: String
  slug_GT: Int
  slug_GTE: Int
  slug_LONGEST_EQUAL: Int
  slug_LONGEST_GT: Int
  slug_LONGEST_GTE: Int
  slug_LONGEST_LT: Int
  slug_LONGEST_LTE: Int
  slug_LT: Int
  slug_LTE: Int
  slug_SHORTEST_EQUAL: Int
  slug_SHORTEST_GT: Int
  slug_SHORTEST_GTE: Int
  slug_SHORTEST_LT: Int
  slug_SHORTEST_LTE: Int
}

type DomainAppRelationship {
  cursor: String!
  node: App!
}

input DomainAppUpdateConnectionInput {
  node: AppUpdateInput
}

input DomainAppUpdateFieldInput {
  connect: DomainAppConnectFieldInput
  connectOrCreate: DomainAppConnectOrCreateFieldInput
  create: DomainAppCreateFieldInput
  delete: DomainAppDeleteFieldInput
  disconnect: DomainAppDisconnectFieldInput
  update: DomainAppUpdateConnectionInput
  where: DomainAppConnectionWhere
}

input DomainConnectInput {
  app: DomainAppConnectFieldInput
}

input DomainConnectOrCreateInput {
  app: DomainAppConnectOrCreateFieldInput
}

input DomainConnectOrCreateWhere {
  node: DomainUniqueWhere!
}

input DomainConnectWhere {
  node: DomainWhere!
}

input DomainCreateInput {
  app: DomainAppFieldInput
  id: ID!
  name: String!
}

input DomainDeleteInput {
  app: DomainAppDeleteFieldInput
}

input DomainDisconnectInput {
  app: DomainAppDisconnectFieldInput
}

type DomainEdge {
  cursor: String!
  node: Domain!
}

input DomainOnCreateInput {
  id: ID!
  name: String!
}

input DomainOptions {
  limit: Int
  offset: Int

  """
  Specify one or more DomainSort objects to sort Domains by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [DomainSort!]
}

input DomainRelationInput {
  app: DomainAppCreateFieldInput
}

"""
Fields to sort Domains by. The order in which sorts are applied is not guaranteed when specifying many fields in one DomainSort object.
"""
input DomainSort {
  id: SortDirection
  name: SortDirection
}

input DomainUniqueWhere {
  id: ID
}

input DomainUpdateInput {
  app: DomainAppUpdateFieldInput
  id: ID
  name: String
}

input DomainWhere {
  AND: [DomainWhere!]
  OR: [DomainWhere!]
  app: AppWhere
  appAggregate: DomainAppAggregateInput
  appConnection: DomainAppConnectionWhere
  appConnection_NOT: DomainAppConnectionWhere
  app_NOT: AppWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
}

type DomainsConnection {
  edges: [DomainEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Element {
  customCss: String
  descendantElements: [Element!]!
  firstChild(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  firstChildAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementFirstChildAggregationSelection
  firstChildConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementFirstChildConnectionSort!]
    where: ElementFirstChildConnectionWhere
  ): ElementFirstChildConnection!
  guiCss: String
  hooks(
    directed: Boolean = true
    options: HookOptions
    where: HookWhere
  ): [Hook!]!
  hooksAggregate(
    directed: Boolean = true
    where: HookWhere
  ): ElementHookHooksAggregationSelection
  hooksConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementHooksConnectionSort!]
    where: ElementHooksConnectionWhere
  ): ElementHooksConnection!
  id: ID!
  name: String
  nextSibling(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  nextSiblingAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementNextSiblingAggregationSelection
  nextSiblingConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementNextSiblingConnectionSort!]
    where: ElementNextSiblingConnectionWhere
  ): ElementNextSiblingConnection!
  page(directed: Boolean = true, options: PageOptions, where: PageWhere): Page
  pageAggregate(
    directed: Boolean = true
    where: PageWhere
  ): ElementPagePageAggregationSelection
  pageConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPageConnectionSort!]
    where: ElementPageConnectionWhere
  ): ElementPageConnection!
  parent(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  parentAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementParentAggregationSelection
  parentComponent(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  parentComponentAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): ElementComponentParentComponentAggregationSelection
  parentComponentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementParentComponentConnectionSort!]
    where: ElementParentComponentConnectionWhere
  ): ElementParentComponentConnection!
  parentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementParentConnectionSort!]
    where: ElementParentConnectionWhere
  ): ElementParentConnection!
  postRenderActionId: String
  preRenderActionId: String
  prevSibling(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  prevSiblingAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): ElementElementPrevSiblingAggregationSelection
  prevSiblingConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPrevSiblingConnectionSort!]
    where: ElementPrevSiblingConnectionWhere
  ): ElementPrevSiblingConnection!
  propMapBindings(
    directed: Boolean = true
    options: PropMapBindingOptions
    where: PropMapBindingWhere
  ): [PropMapBinding!]!
  propMapBindingsAggregate(
    directed: Boolean = true
    where: PropMapBindingWhere
  ): ElementPropMapBindingPropMapBindingsAggregationSelection
  propMapBindingsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPropMapBindingsConnectionSort!]
    where: ElementPropMapBindingsConnectionWhere
  ): ElementPropMapBindingsConnection!
  propTransformationJs: String
  props(directed: Boolean = true, options: PropOptions, where: PropWhere): Prop
  propsAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ElementPropPropsAggregationSelection
  propsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementPropsConnectionSort!]
    where: ElementPropsConnectionWhere
  ): ElementPropsConnection!
  renderAtomType(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): Atom
  renderAtomTypeAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): ElementAtomRenderAtomTypeAggregationSelection
  renderAtomTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementRenderAtomTypeConnectionSort!]
    where: ElementRenderAtomTypeConnectionWhere
  ): ElementRenderAtomTypeConnection!
  renderComponentType(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): Component
  renderComponentTypeAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): ElementComponentRenderComponentTypeAggregationSelection
  renderComponentTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ElementRenderComponentTypeConnectionSort!]
    where: ElementRenderComponentTypeConnectionWhere
  ): ElementRenderComponentTypeConnection!
  renderForEachPropKey: String
  renderIfPropKey: String
}

type ElementAggregateSelection {
  count: Int!
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ElementAtomRenderAtomTypeAggregationSelection {
  count: Int!
  node: ElementAtomRenderAtomTypeNodeAggregateSelection
}

type ElementAtomRenderAtomTypeNodeAggregateSelection {
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type ElementComponentParentComponentAggregationSelection {
  count: Int!
  node: ElementComponentParentComponentNodeAggregateSelection
}

type ElementComponentParentComponentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type ElementComponentRenderComponentTypeAggregationSelection {
  count: Int!
  node: ElementComponentRenderComponentTypeNodeAggregateSelection
}

type ElementComponentRenderComponentTypeNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementConnectInput {
  firstChild: ElementFirstChildConnectFieldInput
  hooks: [ElementHooksConnectFieldInput!]
  nextSibling: ElementNextSiblingConnectFieldInput
  page: ElementPageConnectFieldInput
  parent: ElementParentConnectFieldInput
  parentComponent: ElementParentComponentConnectFieldInput
  prevSibling: ElementPrevSiblingConnectFieldInput
  propMapBindings: [ElementPropMapBindingsConnectFieldInput!]
  props: ElementPropsConnectFieldInput
  renderAtomType: ElementRenderAtomTypeConnectFieldInput
  renderComponentType: ElementRenderComponentTypeConnectFieldInput
}

input ElementConnectOrCreateInput {
  firstChild: ElementFirstChildConnectOrCreateFieldInput
  hooks: [ElementHooksConnectOrCreateFieldInput!]
  nextSibling: ElementNextSiblingConnectOrCreateFieldInput
  page: ElementPageConnectOrCreateFieldInput
  parent: ElementParentConnectOrCreateFieldInput
  parentComponent: ElementParentComponentConnectOrCreateFieldInput
  prevSibling: ElementPrevSiblingConnectOrCreateFieldInput
  propMapBindings: [ElementPropMapBindingsConnectOrCreateFieldInput!]
  props: ElementPropsConnectOrCreateFieldInput
  renderAtomType: ElementRenderAtomTypeConnectOrCreateFieldInput
  renderComponentType: ElementRenderComponentTypeConnectOrCreateFieldInput
}

input ElementConnectOrCreateWhere {
  node: ElementUniqueWhere!
}

input ElementConnectWhere {
  node: ElementWhere!
}

input ElementCreateInput {
  customCss: String
  firstChild: ElementFirstChildFieldInput
  guiCss: String
  hooks: ElementHooksFieldInput
  id: ID!
  name: String
  nextSibling: ElementNextSiblingFieldInput
  page: ElementPageFieldInput
  parent: ElementParentFieldInput
  parentComponent: ElementParentComponentFieldInput
  postRenderActionId: String
  preRenderActionId: String
  prevSibling: ElementPrevSiblingFieldInput
  propMapBindings: ElementPropMapBindingsFieldInput
  propTransformationJs: String
  props: ElementPropsFieldInput
  renderAtomType: ElementRenderAtomTypeFieldInput
  renderComponentType: ElementRenderComponentTypeFieldInput
  renderForEachPropKey: String
  renderIfPropKey: String
}

input ElementDeleteInput {
  firstChild: ElementFirstChildDeleteFieldInput
  hooks: [ElementHooksDeleteFieldInput!]
  nextSibling: ElementNextSiblingDeleteFieldInput
  page: ElementPageDeleteFieldInput
  parent: ElementParentDeleteFieldInput
  parentComponent: ElementParentComponentDeleteFieldInput
  prevSibling: ElementPrevSiblingDeleteFieldInput
  propMapBindings: [ElementPropMapBindingsDeleteFieldInput!]
  props: ElementPropsDeleteFieldInput
  renderAtomType: ElementRenderAtomTypeDeleteFieldInput
  renderComponentType: ElementRenderComponentTypeDeleteFieldInput
}

input ElementDisconnectInput {
  firstChild: ElementFirstChildDisconnectFieldInput
  hooks: [ElementHooksDisconnectFieldInput!]
  nextSibling: ElementNextSiblingDisconnectFieldInput
  page: ElementPageDisconnectFieldInput
  parent: ElementParentDisconnectFieldInput
  parentComponent: ElementParentComponentDisconnectFieldInput
  prevSibling: ElementPrevSiblingDisconnectFieldInput
  propMapBindings: [ElementPropMapBindingsDisconnectFieldInput!]
  props: ElementPropsDisconnectFieldInput
  renderAtomType: ElementRenderAtomTypeDisconnectFieldInput
  renderComponentType: ElementRenderComponentTypeDisconnectFieldInput
}

type ElementEdge {
  cursor: String!
  node: Element!
}

type ElementElementFirstChildAggregationSelection {
  count: Int!
  node: ElementElementFirstChildNodeAggregateSelection
}

type ElementElementFirstChildNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ElementElementNextSiblingAggregationSelection {
  count: Int!
  node: ElementElementNextSiblingNodeAggregateSelection
}

type ElementElementNextSiblingNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ElementElementParentAggregationSelection {
  count: Int!
  node: ElementElementParentNodeAggregateSelection
}

type ElementElementParentNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

type ElementElementPrevSiblingAggregationSelection {
  count: Int!
  node: ElementElementPrevSiblingNodeAggregateSelection
}

type ElementElementPrevSiblingNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input ElementFirstChildAggregateInput {
  AND: [ElementFirstChildAggregateInput!]
  OR: [ElementFirstChildAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementFirstChildNodeAggregationWhereInput
}

input ElementFirstChildConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input ElementFirstChildConnectOrCreateFieldInput {
  onCreate: ElementFirstChildConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementFirstChildConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementFirstChildConnection {
  edges: [ElementFirstChildRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementFirstChildConnectionSort {
  node: ElementSort
}

input ElementFirstChildConnectionWhere {
  AND: [ElementFirstChildConnectionWhere!]
  OR: [ElementFirstChildConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input ElementFirstChildCreateFieldInput {
  node: ElementCreateInput!
}

input ElementFirstChildDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementFirstChildConnectionWhere
}

input ElementFirstChildDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementFirstChildConnectionWhere
}

input ElementFirstChildFieldInput {
  connect: ElementFirstChildConnectFieldInput
  connectOrCreate: ElementFirstChildConnectOrCreateFieldInput
  create: ElementFirstChildCreateFieldInput
}

input ElementFirstChildNodeAggregationWhereInput {
  AND: [ElementFirstChildNodeAggregationWhereInput!]
  OR: [ElementFirstChildNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ElementFirstChildRelationship {
  cursor: String!
  node: Element!
}

input ElementFirstChildUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementFirstChildUpdateFieldInput {
  connect: ElementFirstChildConnectFieldInput
  connectOrCreate: ElementFirstChildConnectOrCreateFieldInput
  create: ElementFirstChildCreateFieldInput
  delete: ElementFirstChildDeleteFieldInput
  disconnect: ElementFirstChildDisconnectFieldInput
  update: ElementFirstChildUpdateConnectionInput
  where: ElementFirstChildConnectionWhere
}

type ElementHookHooksAggregationSelection {
  count: Int!
  node: ElementHookHooksNodeAggregateSelection
}

type ElementHookHooksNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
}

input ElementHooksAggregateInput {
  AND: [ElementHooksAggregateInput!]
  OR: [ElementHooksAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementHooksNodeAggregationWhereInput
}

input ElementHooksConnectFieldInput {
  connect: [HookConnectInput!]
  where: HookConnectWhere
}

input ElementHooksConnectOrCreateFieldInput {
  onCreate: ElementHooksConnectOrCreateFieldInputOnCreate!
  where: HookConnectOrCreateWhere!
}

input ElementHooksConnectOrCreateFieldInputOnCreate {
  node: HookOnCreateInput!
}

type ElementHooksConnection {
  edges: [ElementHooksRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementHooksConnectionSort {
  node: HookSort
}

input ElementHooksConnectionWhere {
  AND: [ElementHooksConnectionWhere!]
  OR: [ElementHooksConnectionWhere!]
  node: HookWhere
  node_NOT: HookWhere
}

input ElementHooksCreateFieldInput {
  node: HookCreateInput!
}

input ElementHooksDeleteFieldInput {
  delete: HookDeleteInput
  where: ElementHooksConnectionWhere
}

input ElementHooksDisconnectFieldInput {
  disconnect: HookDisconnectInput
  where: ElementHooksConnectionWhere
}

input ElementHooksFieldInput {
  connect: [ElementHooksConnectFieldInput!]
  connectOrCreate: [ElementHooksConnectOrCreateFieldInput!]
  create: [ElementHooksCreateFieldInput!]
}

input ElementHooksNodeAggregationWhereInput {
  AND: [ElementHooksNodeAggregationWhereInput!]
  OR: [ElementHooksNodeAggregationWhereInput!]
  id_EQUAL: ID
}

type ElementHooksRelationship {
  cursor: String!
  node: Hook!
}

input ElementHooksUpdateConnectionInput {
  node: HookUpdateInput
}

input ElementHooksUpdateFieldInput {
  connect: [ElementHooksConnectFieldInput!]
  connectOrCreate: [ElementHooksConnectOrCreateFieldInput!]
  create: [ElementHooksCreateFieldInput!]
  delete: [ElementHooksDeleteFieldInput!]
  disconnect: [ElementHooksDisconnectFieldInput!]
  update: ElementHooksUpdateConnectionInput
  where: ElementHooksConnectionWhere
}

input ElementNextSiblingAggregateInput {
  AND: [ElementNextSiblingAggregateInput!]
  OR: [ElementNextSiblingAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementNextSiblingNodeAggregationWhereInput
}

input ElementNextSiblingConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input ElementNextSiblingConnectOrCreateFieldInput {
  onCreate: ElementNextSiblingConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementNextSiblingConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementNextSiblingConnection {
  edges: [ElementNextSiblingRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementNextSiblingConnectionSort {
  node: ElementSort
}

input ElementNextSiblingConnectionWhere {
  AND: [ElementNextSiblingConnectionWhere!]
  OR: [ElementNextSiblingConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input ElementNextSiblingCreateFieldInput {
  node: ElementCreateInput!
}

input ElementNextSiblingDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementNextSiblingConnectionWhere
}

input ElementNextSiblingDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementNextSiblingConnectionWhere
}

input ElementNextSiblingFieldInput {
  connect: ElementNextSiblingConnectFieldInput
  connectOrCreate: ElementNextSiblingConnectOrCreateFieldInput
  create: ElementNextSiblingCreateFieldInput
}

input ElementNextSiblingNodeAggregationWhereInput {
  AND: [ElementNextSiblingNodeAggregationWhereInput!]
  OR: [ElementNextSiblingNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ElementNextSiblingRelationship {
  cursor: String!
  node: Element!
}

input ElementNextSiblingUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementNextSiblingUpdateFieldInput {
  connect: ElementNextSiblingConnectFieldInput
  connectOrCreate: ElementNextSiblingConnectOrCreateFieldInput
  create: ElementNextSiblingCreateFieldInput
  delete: ElementNextSiblingDeleteFieldInput
  disconnect: ElementNextSiblingDisconnectFieldInput
  update: ElementNextSiblingUpdateConnectionInput
  where: ElementNextSiblingConnectionWhere
}

input ElementOnCreateInput {
  customCss: String
  guiCss: String
  id: ID!
  name: String
  postRenderActionId: String
  preRenderActionId: String
  propTransformationJs: String
  renderForEachPropKey: String
  renderIfPropKey: String
}

input ElementOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ElementSort objects to sort Elements by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ElementSort!]
}

input ElementPageAggregateInput {
  AND: [ElementPageAggregateInput!]
  OR: [ElementPageAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPageNodeAggregationWhereInput
}

input ElementPageConnectFieldInput {
  connect: PageConnectInput
  where: PageConnectWhere
}

input ElementPageConnectOrCreateFieldInput {
  onCreate: ElementPageConnectOrCreateFieldInputOnCreate!
  where: PageConnectOrCreateWhere!
}

input ElementPageConnectOrCreateFieldInputOnCreate {
  node: PageOnCreateInput!
}

type ElementPageConnection {
  edges: [ElementPageRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPageConnectionSort {
  node: PageSort
}

input ElementPageConnectionWhere {
  AND: [ElementPageConnectionWhere!]
  OR: [ElementPageConnectionWhere!]
  node: PageWhere
  node_NOT: PageWhere
}

input ElementPageCreateFieldInput {
  node: PageCreateInput!
}

input ElementPageDeleteFieldInput {
  delete: PageDeleteInput
  where: ElementPageConnectionWhere
}

input ElementPageDisconnectFieldInput {
  disconnect: PageDisconnectInput
  where: ElementPageConnectionWhere
}

input ElementPageFieldInput {
  connect: ElementPageConnectFieldInput
  connectOrCreate: ElementPageConnectOrCreateFieldInput
  create: ElementPageCreateFieldInput
}

input ElementPageNodeAggregationWhereInput {
  AND: [ElementPageNodeAggregationWhereInput!]
  OR: [ElementPageNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  slug_AVERAGE_EQUAL: Float
  slug_AVERAGE_GT: Float
  slug_AVERAGE_GTE: Float
  slug_AVERAGE_LT: Float
  slug_AVERAGE_LTE: Float
  slug_EQUAL: String
  slug_GT: Int
  slug_GTE: Int
  slug_LONGEST_EQUAL: Int
  slug_LONGEST_GT: Int
  slug_LONGEST_GTE: Int
  slug_LONGEST_LT: Int
  slug_LONGEST_LTE: Int
  slug_LT: Int
  slug_LTE: Int
  slug_SHORTEST_EQUAL: Int
  slug_SHORTEST_GT: Int
  slug_SHORTEST_GTE: Int
  slug_SHORTEST_LT: Int
  slug_SHORTEST_LTE: Int
}

type ElementPagePageAggregationSelection {
  count: Int!
  node: ElementPagePageNodeAggregateSelection
}

type ElementPagePageNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

type ElementPageRelationship {
  cursor: String!
  node: Page!
}

input ElementPageUpdateConnectionInput {
  node: PageUpdateInput
}

input ElementPageUpdateFieldInput {
  connect: ElementPageConnectFieldInput
  connectOrCreate: ElementPageConnectOrCreateFieldInput
  create: ElementPageCreateFieldInput
  delete: ElementPageDeleteFieldInput
  disconnect: ElementPageDisconnectFieldInput
  update: ElementPageUpdateConnectionInput
  where: ElementPageConnectionWhere
}

input ElementParentAggregateInput {
  AND: [ElementParentAggregateInput!]
  OR: [ElementParentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementParentNodeAggregationWhereInput
}

input ElementParentComponentAggregateInput {
  AND: [ElementParentComponentAggregateInput!]
  OR: [ElementParentComponentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementParentComponentNodeAggregationWhereInput
}

input ElementParentComponentConnectFieldInput {
  connect: ComponentConnectInput
  where: ComponentConnectWhere
}

input ElementParentComponentConnectOrCreateFieldInput {
  onCreate: ElementParentComponentConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input ElementParentComponentConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type ElementParentComponentConnection {
  edges: [ElementParentComponentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementParentComponentConnectionSort {
  node: ComponentSort
}

input ElementParentComponentConnectionWhere {
  AND: [ElementParentComponentConnectionWhere!]
  OR: [ElementParentComponentConnectionWhere!]
  node: ComponentWhere
  node_NOT: ComponentWhere
}

input ElementParentComponentCreateFieldInput {
  node: ComponentCreateInput!
}

input ElementParentComponentDeleteFieldInput {
  delete: ComponentDeleteInput
  where: ElementParentComponentConnectionWhere
}

input ElementParentComponentDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: ElementParentComponentConnectionWhere
}

input ElementParentComponentFieldInput {
  connect: ElementParentComponentConnectFieldInput
  connectOrCreate: ElementParentComponentConnectOrCreateFieldInput
  create: ElementParentComponentCreateFieldInput
}

input ElementParentComponentNodeAggregationWhereInput {
  AND: [ElementParentComponentNodeAggregationWhereInput!]
  OR: [ElementParentComponentNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementParentComponentRelationship {
  cursor: String!
  node: Component!
}

input ElementParentComponentUpdateConnectionInput {
  node: ComponentUpdateInput
}

input ElementParentComponentUpdateFieldInput {
  connect: ElementParentComponentConnectFieldInput
  connectOrCreate: ElementParentComponentConnectOrCreateFieldInput
  create: ElementParentComponentCreateFieldInput
  delete: ElementParentComponentDeleteFieldInput
  disconnect: ElementParentComponentDisconnectFieldInput
  update: ElementParentComponentUpdateConnectionInput
  where: ElementParentComponentConnectionWhere
}

input ElementParentConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input ElementParentConnectOrCreateFieldInput {
  onCreate: ElementParentConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementParentConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementParentConnection {
  edges: [ElementParentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementParentConnectionSort {
  node: ElementSort
}

input ElementParentConnectionWhere {
  AND: [ElementParentConnectionWhere!]
  OR: [ElementParentConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input ElementParentCreateFieldInput {
  node: ElementCreateInput!
}

input ElementParentDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementParentConnectionWhere
}

input ElementParentDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementParentConnectionWhere
}

input ElementParentFieldInput {
  connect: ElementParentConnectFieldInput
  connectOrCreate: ElementParentConnectOrCreateFieldInput
  create: ElementParentCreateFieldInput
}

input ElementParentNodeAggregationWhereInput {
  AND: [ElementParentNodeAggregationWhereInput!]
  OR: [ElementParentNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ElementParentRelationship {
  cursor: String!
  node: Element!
}

input ElementParentUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementParentUpdateFieldInput {
  connect: ElementParentConnectFieldInput
  connectOrCreate: ElementParentConnectOrCreateFieldInput
  create: ElementParentCreateFieldInput
  delete: ElementParentDeleteFieldInput
  disconnect: ElementParentDisconnectFieldInput
  update: ElementParentUpdateConnectionInput
  where: ElementParentConnectionWhere
}

input ElementPrevSiblingAggregateInput {
  AND: [ElementPrevSiblingAggregateInput!]
  OR: [ElementPrevSiblingAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPrevSiblingNodeAggregationWhereInput
}

input ElementPrevSiblingConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input ElementPrevSiblingConnectOrCreateFieldInput {
  onCreate: ElementPrevSiblingConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input ElementPrevSiblingConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type ElementPrevSiblingConnection {
  edges: [ElementPrevSiblingRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPrevSiblingConnectionSort {
  node: ElementSort
}

input ElementPrevSiblingConnectionWhere {
  AND: [ElementPrevSiblingConnectionWhere!]
  OR: [ElementPrevSiblingConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input ElementPrevSiblingCreateFieldInput {
  node: ElementCreateInput!
}

input ElementPrevSiblingDeleteFieldInput {
  delete: ElementDeleteInput
  where: ElementPrevSiblingConnectionWhere
}

input ElementPrevSiblingDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: ElementPrevSiblingConnectionWhere
}

input ElementPrevSiblingFieldInput {
  connect: ElementPrevSiblingConnectFieldInput
  connectOrCreate: ElementPrevSiblingConnectOrCreateFieldInput
  create: ElementPrevSiblingCreateFieldInput
}

input ElementPrevSiblingNodeAggregationWhereInput {
  AND: [ElementPrevSiblingNodeAggregationWhereInput!]
  OR: [ElementPrevSiblingNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type ElementPrevSiblingRelationship {
  cursor: String!
  node: Element!
}

input ElementPrevSiblingUpdateConnectionInput {
  node: ElementUpdateInput
}

input ElementPrevSiblingUpdateFieldInput {
  connect: ElementPrevSiblingConnectFieldInput
  connectOrCreate: ElementPrevSiblingConnectOrCreateFieldInput
  create: ElementPrevSiblingCreateFieldInput
  delete: ElementPrevSiblingDeleteFieldInput
  disconnect: ElementPrevSiblingDisconnectFieldInput
  update: ElementPrevSiblingUpdateConnectionInput
  where: ElementPrevSiblingConnectionWhere
}

type ElementPropMapBindingPropMapBindingsAggregationSelection {
  count: Int!
  node: ElementPropMapBindingPropMapBindingsNodeAggregateSelection
}

type ElementPropMapBindingPropMapBindingsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  sourceKey: StringAggregateSelectionNonNullable!
  targetKey: StringAggregateSelectionNonNullable!
}

input ElementPropMapBindingsAggregateInput {
  AND: [ElementPropMapBindingsAggregateInput!]
  OR: [ElementPropMapBindingsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPropMapBindingsNodeAggregationWhereInput
}

input ElementPropMapBindingsConnectFieldInput {
  connect: [PropMapBindingConnectInput!]
  where: PropMapBindingConnectWhere
}

input ElementPropMapBindingsConnectOrCreateFieldInput {
  onCreate: ElementPropMapBindingsConnectOrCreateFieldInputOnCreate!
  where: PropMapBindingConnectOrCreateWhere!
}

input ElementPropMapBindingsConnectOrCreateFieldInputOnCreate {
  node: PropMapBindingOnCreateInput!
}

type ElementPropMapBindingsConnection {
  edges: [ElementPropMapBindingsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPropMapBindingsConnectionSort {
  node: PropMapBindingSort
}

input ElementPropMapBindingsConnectionWhere {
  AND: [ElementPropMapBindingsConnectionWhere!]
  OR: [ElementPropMapBindingsConnectionWhere!]
  node: PropMapBindingWhere
  node_NOT: PropMapBindingWhere
}

input ElementPropMapBindingsCreateFieldInput {
  node: PropMapBindingCreateInput!
}

input ElementPropMapBindingsDeleteFieldInput {
  delete: PropMapBindingDeleteInput
  where: ElementPropMapBindingsConnectionWhere
}

input ElementPropMapBindingsDisconnectFieldInput {
  disconnect: PropMapBindingDisconnectInput
  where: ElementPropMapBindingsConnectionWhere
}

input ElementPropMapBindingsFieldInput {
  connect: [ElementPropMapBindingsConnectFieldInput!]
  connectOrCreate: [ElementPropMapBindingsConnectOrCreateFieldInput!]
  create: [ElementPropMapBindingsCreateFieldInput!]
}

input ElementPropMapBindingsNodeAggregationWhereInput {
  AND: [ElementPropMapBindingsNodeAggregationWhereInput!]
  OR: [ElementPropMapBindingsNodeAggregationWhereInput!]
  id_EQUAL: ID
  sourceKey_AVERAGE_EQUAL: Float
  sourceKey_AVERAGE_GT: Float
  sourceKey_AVERAGE_GTE: Float
  sourceKey_AVERAGE_LT: Float
  sourceKey_AVERAGE_LTE: Float
  sourceKey_EQUAL: String
  sourceKey_GT: Int
  sourceKey_GTE: Int
  sourceKey_LONGEST_EQUAL: Int
  sourceKey_LONGEST_GT: Int
  sourceKey_LONGEST_GTE: Int
  sourceKey_LONGEST_LT: Int
  sourceKey_LONGEST_LTE: Int
  sourceKey_LT: Int
  sourceKey_LTE: Int
  sourceKey_SHORTEST_EQUAL: Int
  sourceKey_SHORTEST_GT: Int
  sourceKey_SHORTEST_GTE: Int
  sourceKey_SHORTEST_LT: Int
  sourceKey_SHORTEST_LTE: Int
  targetKey_AVERAGE_EQUAL: Float
  targetKey_AVERAGE_GT: Float
  targetKey_AVERAGE_GTE: Float
  targetKey_AVERAGE_LT: Float
  targetKey_AVERAGE_LTE: Float
  targetKey_EQUAL: String
  targetKey_GT: Int
  targetKey_GTE: Int
  targetKey_LONGEST_EQUAL: Int
  targetKey_LONGEST_GT: Int
  targetKey_LONGEST_GTE: Int
  targetKey_LONGEST_LT: Int
  targetKey_LONGEST_LTE: Int
  targetKey_LT: Int
  targetKey_LTE: Int
  targetKey_SHORTEST_EQUAL: Int
  targetKey_SHORTEST_GT: Int
  targetKey_SHORTEST_GTE: Int
  targetKey_SHORTEST_LT: Int
  targetKey_SHORTEST_LTE: Int
}

type ElementPropMapBindingsRelationship {
  cursor: String!
  node: PropMapBinding!
}

input ElementPropMapBindingsUpdateConnectionInput {
  node: PropMapBindingUpdateInput
}

input ElementPropMapBindingsUpdateFieldInput {
  connect: [ElementPropMapBindingsConnectFieldInput!]
  connectOrCreate: [ElementPropMapBindingsConnectOrCreateFieldInput!]
  create: [ElementPropMapBindingsCreateFieldInput!]
  delete: [ElementPropMapBindingsDeleteFieldInput!]
  disconnect: [ElementPropMapBindingsDisconnectFieldInput!]
  update: ElementPropMapBindingsUpdateConnectionInput
  where: ElementPropMapBindingsConnectionWhere
}

type ElementPropPropsAggregationSelection {
  count: Int!
  node: ElementPropPropsNodeAggregateSelection
}

type ElementPropPropsNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ElementPropsAggregateInput {
  AND: [ElementPropsAggregateInput!]
  OR: [ElementPropsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementPropsNodeAggregationWhereInput
}

input ElementPropsConnectFieldInput {
  where: PropConnectWhere
}

input ElementPropsConnectOrCreateFieldInput {
  onCreate: ElementPropsConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ElementPropsConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ElementPropsConnection {
  edges: [ElementPropsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementPropsConnectionSort {
  node: PropSort
}

input ElementPropsConnectionWhere {
  AND: [ElementPropsConnectionWhere!]
  OR: [ElementPropsConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input ElementPropsCreateFieldInput {
  node: PropCreateInput!
}

input ElementPropsDeleteFieldInput {
  where: ElementPropsConnectionWhere
}

input ElementPropsDisconnectFieldInput {
  where: ElementPropsConnectionWhere
}

input ElementPropsFieldInput {
  connect: ElementPropsConnectFieldInput
  connectOrCreate: ElementPropsConnectOrCreateFieldInput
  create: ElementPropsCreateFieldInput
}

input ElementPropsNodeAggregationWhereInput {
  AND: [ElementPropsNodeAggregationWhereInput!]
  OR: [ElementPropsNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type ElementPropsRelationship {
  cursor: String!
  node: Prop!
}

input ElementPropsUpdateConnectionInput {
  node: PropUpdateInput
}

input ElementPropsUpdateFieldInput {
  connect: ElementPropsConnectFieldInput
  connectOrCreate: ElementPropsConnectOrCreateFieldInput
  create: ElementPropsCreateFieldInput
  delete: ElementPropsDeleteFieldInput
  disconnect: ElementPropsDisconnectFieldInput
  update: ElementPropsUpdateConnectionInput
  where: ElementPropsConnectionWhere
}

input ElementRelationInput {
  firstChild: ElementFirstChildCreateFieldInput
  hooks: [ElementHooksCreateFieldInput!]
  nextSibling: ElementNextSiblingCreateFieldInput
  page: ElementPageCreateFieldInput
  parent: ElementParentCreateFieldInput
  parentComponent: ElementParentComponentCreateFieldInput
  prevSibling: ElementPrevSiblingCreateFieldInput
  propMapBindings: [ElementPropMapBindingsCreateFieldInput!]
  props: ElementPropsCreateFieldInput
  renderAtomType: ElementRenderAtomTypeCreateFieldInput
  renderComponentType: ElementRenderComponentTypeCreateFieldInput
}

input ElementRenderAtomTypeAggregateInput {
  AND: [ElementRenderAtomTypeAggregateInput!]
  OR: [ElementRenderAtomTypeAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementRenderAtomTypeNodeAggregationWhereInput
}

input ElementRenderAtomTypeConnectFieldInput {
  connect: AtomConnectInput
  where: AtomConnectWhere
}

input ElementRenderAtomTypeConnectOrCreateFieldInput {
  onCreate: ElementRenderAtomTypeConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input ElementRenderAtomTypeConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type ElementRenderAtomTypeConnection {
  edges: [ElementRenderAtomTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementRenderAtomTypeConnectionSort {
  node: AtomSort
}

input ElementRenderAtomTypeConnectionWhere {
  AND: [ElementRenderAtomTypeConnectionWhere!]
  OR: [ElementRenderAtomTypeConnectionWhere!]
  node: AtomWhere
  node_NOT: AtomWhere
}

input ElementRenderAtomTypeCreateFieldInput {
  node: AtomCreateInput!
}

input ElementRenderAtomTypeDeleteFieldInput {
  delete: AtomDeleteInput
  where: ElementRenderAtomTypeConnectionWhere
}

input ElementRenderAtomTypeDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: ElementRenderAtomTypeConnectionWhere
}

input ElementRenderAtomTypeFieldInput {
  connect: ElementRenderAtomTypeConnectFieldInput
  connectOrCreate: ElementRenderAtomTypeConnectOrCreateFieldInput
  create: ElementRenderAtomTypeCreateFieldInput
}

input ElementRenderAtomTypeNodeAggregationWhereInput {
  AND: [ElementRenderAtomTypeNodeAggregationWhereInput!]
  OR: [ElementRenderAtomTypeNodeAggregationWhereInput!]
  icon_AVERAGE_EQUAL: Float
  icon_AVERAGE_GT: Float
  icon_AVERAGE_GTE: Float
  icon_AVERAGE_LT: Float
  icon_AVERAGE_LTE: Float
  icon_EQUAL: String
  icon_GT: Int
  icon_GTE: Int
  icon_LONGEST_EQUAL: Int
  icon_LONGEST_GT: Int
  icon_LONGEST_GTE: Int
  icon_LONGEST_LT: Int
  icon_LONGEST_LTE: Int
  icon_LT: Int
  icon_LTE: Int
  icon_SHORTEST_EQUAL: Int
  icon_SHORTEST_GT: Int
  icon_SHORTEST_GTE: Int
  icon_SHORTEST_LT: Int
  icon_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementRenderAtomTypeRelationship {
  cursor: String!
  node: Atom!
}

input ElementRenderAtomTypeUpdateConnectionInput {
  node: AtomUpdateInput
}

input ElementRenderAtomTypeUpdateFieldInput {
  connect: ElementRenderAtomTypeConnectFieldInput
  connectOrCreate: ElementRenderAtomTypeConnectOrCreateFieldInput
  create: ElementRenderAtomTypeCreateFieldInput
  delete: ElementRenderAtomTypeDeleteFieldInput
  disconnect: ElementRenderAtomTypeDisconnectFieldInput
  update: ElementRenderAtomTypeUpdateConnectionInput
  where: ElementRenderAtomTypeConnectionWhere
}

input ElementRenderComponentTypeAggregateInput {
  AND: [ElementRenderComponentTypeAggregateInput!]
  OR: [ElementRenderComponentTypeAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ElementRenderComponentTypeNodeAggregationWhereInput
}

input ElementRenderComponentTypeConnectFieldInput {
  connect: ComponentConnectInput
  where: ComponentConnectWhere
}

input ElementRenderComponentTypeConnectOrCreateFieldInput {
  onCreate: ElementRenderComponentTypeConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input ElementRenderComponentTypeConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type ElementRenderComponentTypeConnection {
  edges: [ElementRenderComponentTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementRenderComponentTypeConnectionSort {
  node: ComponentSort
}

input ElementRenderComponentTypeConnectionWhere {
  AND: [ElementRenderComponentTypeConnectionWhere!]
  OR: [ElementRenderComponentTypeConnectionWhere!]
  node: ComponentWhere
  node_NOT: ComponentWhere
}

input ElementRenderComponentTypeCreateFieldInput {
  node: ComponentCreateInput!
}

input ElementRenderComponentTypeDeleteFieldInput {
  delete: ComponentDeleteInput
  where: ElementRenderComponentTypeConnectionWhere
}

input ElementRenderComponentTypeDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: ElementRenderComponentTypeConnectionWhere
}

input ElementRenderComponentTypeFieldInput {
  connect: ElementRenderComponentTypeConnectFieldInput
  connectOrCreate: ElementRenderComponentTypeConnectOrCreateFieldInput
  create: ElementRenderComponentTypeCreateFieldInput
}

input ElementRenderComponentTypeNodeAggregationWhereInput {
  AND: [ElementRenderComponentTypeNodeAggregationWhereInput!]
  OR: [ElementRenderComponentTypeNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type ElementRenderComponentTypeRelationship {
  cursor: String!
  node: Component!
}

input ElementRenderComponentTypeUpdateConnectionInput {
  node: ComponentUpdateInput
}

input ElementRenderComponentTypeUpdateFieldInput {
  connect: ElementRenderComponentTypeConnectFieldInput
  connectOrCreate: ElementRenderComponentTypeConnectOrCreateFieldInput
  create: ElementRenderComponentTypeCreateFieldInput
  delete: ElementRenderComponentTypeDeleteFieldInput
  disconnect: ElementRenderComponentTypeDisconnectFieldInput
  update: ElementRenderComponentTypeUpdateConnectionInput
  where: ElementRenderComponentTypeConnectionWhere
}

"""
Fields to sort Elements by. The order in which sorts are applied is not guaranteed when specifying many fields in one ElementSort object.
"""
input ElementSort {
  customCss: SortDirection
  guiCss: SortDirection
  id: SortDirection
  name: SortDirection
  postRenderActionId: SortDirection
  preRenderActionId: SortDirection
  propTransformationJs: SortDirection
  renderForEachPropKey: SortDirection
  renderIfPropKey: SortDirection
}

"""
Allows picking an element from the current tree
Is passed to the rendered element as a React node
Prop values for this type have the shape of TypedValue in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropsType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNode' value
"""
type ElementType implements TypeBase {
  """
  Allows scoping the type of element to only descendants, children or all elements
  """
  elementKind: ElementTypeKind!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ElementTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ElementTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ElementTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input ElementTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ElementTypeConnectOrCreateWhere {
  node: ElementTypeUniqueWhere!
}

input ElementTypeConnectWhere {
  node: ElementTypeWhere!
}

input ElementTypeCreateInput {
  elementKind: ElementTypeKind!
  id: ID!
  kind: TypeKind! = ElementType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ElementTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input ElementTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ElementTypeEdge {
  cursor: String!
  node: ElementType!
}

enum ElementTypeKind {
  """
  Pick any element in the current tree
  """
  AllElements

  """
  Pick any element from the children of the current element
  """
  ChildrenOnly

  """
  Pick any element from the descendants of the current element
  """
  DescendantsOnly

  """
  Pick parents and siblings of parents of elements (used to move element)
  """
  ExcludeDescendantsElements
}

input ElementTypeOnCreateInput {
  id: ID!
  name: String!
}

input ElementTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ElementTypeSort objects to sort ElementTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ElementTypeSort!]
}

input ElementTypeOwnerAggregateInput {
  AND: [ElementTypeOwnerAggregateInput!]
  OR: [ElementTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ElementTypeOwnerEdgeAggregationWhereInput
  node: ElementTypeOwnerNodeAggregationWhereInput
}

input ElementTypeOwnerEdgeAggregationWhereInput {
  AND: [ElementTypeOwnerEdgeAggregationWhereInput!]
  OR: [ElementTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input ElementTypeOwnerNodeAggregationWhereInput {
  AND: [ElementTypeOwnerNodeAggregationWhereInput!]
  OR: [ElementTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input ElementTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ElementTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ElementTypeSort object.
"""
input ElementTypeSort {
  elementKind: SortDirection
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ElementTypeUniqueWhere {
  id: ID
}

input ElementTypeUpdateInput {
  elementKind: ElementTypeKind
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ElementTypeUserOwnerAggregationSelection {
  count: Int!
  edge: ElementTypeUserOwnerEdgeAggregateSelection
  node: ElementTypeUserOwnerNodeAggregateSelection
}

type ElementTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type ElementTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ElementTypeWhere {
  AND: [ElementTypeWhere!]
  OR: [ElementTypeWhere!]
  elementKind: ElementTypeKind
  elementKind_IN: [ElementTypeKind!]
  elementKind_NOT: ElementTypeKind
  elementKind_NOT_IN: [ElementTypeKind!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ElementTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ElementTypesConnection {
  edges: [ElementTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ElementUniqueWhere {
  id: ID
}

input ElementUpdateInput {
  customCss: String
  firstChild: ElementFirstChildUpdateFieldInput
  guiCss: String
  hooks: [ElementHooksUpdateFieldInput!]
  id: ID
  name: String
  nextSibling: ElementNextSiblingUpdateFieldInput
  page: ElementPageUpdateFieldInput
  parent: ElementParentUpdateFieldInput
  parentComponent: ElementParentComponentUpdateFieldInput
  postRenderActionId: String
  preRenderActionId: String
  prevSibling: ElementPrevSiblingUpdateFieldInput
  propMapBindings: [ElementPropMapBindingsUpdateFieldInput!]
  propTransformationJs: String
  props: ElementPropsUpdateFieldInput
  renderAtomType: ElementRenderAtomTypeUpdateFieldInput
  renderComponentType: ElementRenderComponentTypeUpdateFieldInput
  renderForEachPropKey: String
  renderIfPropKey: String
}

input ElementWhere {
  AND: [ElementWhere!]
  OR: [ElementWhere!]
  customCss: String
  customCss_CONTAINS: String
  customCss_ENDS_WITH: String
  customCss_IN: [String]
  customCss_NOT: String
  customCss_NOT_CONTAINS: String
  customCss_NOT_ENDS_WITH: String
  customCss_NOT_IN: [String]
  customCss_NOT_STARTS_WITH: String
  customCss_STARTS_WITH: String
  firstChild: ElementWhere
  firstChildAggregate: ElementFirstChildAggregateInput
  firstChildConnection: ElementFirstChildConnectionWhere
  firstChildConnection_NOT: ElementFirstChildConnectionWhere
  firstChild_NOT: ElementWhere
  guiCss: String
  guiCss_CONTAINS: String
  guiCss_ENDS_WITH: String
  guiCss_IN: [String]
  guiCss_NOT: String
  guiCss_NOT_CONTAINS: String
  guiCss_NOT_ENDS_WITH: String
  guiCss_NOT_IN: [String]
  guiCss_NOT_STARTS_WITH: String
  guiCss_STARTS_WITH: String
  hooksAggregate: ElementHooksAggregateInput
  hooksConnection_ALL: ElementHooksConnectionWhere
  hooksConnection_NONE: ElementHooksConnectionWhere
  hooksConnection_SINGLE: ElementHooksConnectionWhere
  hooksConnection_SOME: ElementHooksConnectionWhere

  """
  Return Elements where all of the related Hooks match this filter
  """
  hooks_ALL: HookWhere

  """
  Return Elements where none of the related Hooks match this filter
  """
  hooks_NONE: HookWhere

  """
  Return Elements where one of the related Hooks match this filter
  """
  hooks_SINGLE: HookWhere

  """
  Return Elements where some of the related Hooks match this filter
  """
  hooks_SOME: HookWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  nextSibling: ElementWhere
  nextSiblingAggregate: ElementNextSiblingAggregateInput
  nextSiblingConnection: ElementNextSiblingConnectionWhere
  nextSiblingConnection_NOT: ElementNextSiblingConnectionWhere
  nextSibling_NOT: ElementWhere
  page: PageWhere
  pageAggregate: ElementPageAggregateInput
  pageConnection: ElementPageConnectionWhere
  pageConnection_NOT: ElementPageConnectionWhere
  page_NOT: PageWhere
  parent: ElementWhere
  parentAggregate: ElementParentAggregateInput
  parentComponent: ComponentWhere
  parentComponentAggregate: ElementParentComponentAggregateInput
  parentComponentConnection: ElementParentComponentConnectionWhere
  parentComponentConnection_NOT: ElementParentComponentConnectionWhere
  parentComponent_NOT: ComponentWhere
  parentConnection: ElementParentConnectionWhere
  parentConnection_NOT: ElementParentConnectionWhere
  parent_NOT: ElementWhere
  postRenderActionId: String
  postRenderActionId_CONTAINS: String
  postRenderActionId_ENDS_WITH: String
  postRenderActionId_IN: [String]
  postRenderActionId_NOT: String
  postRenderActionId_NOT_CONTAINS: String
  postRenderActionId_NOT_ENDS_WITH: String
  postRenderActionId_NOT_IN: [String]
  postRenderActionId_NOT_STARTS_WITH: String
  postRenderActionId_STARTS_WITH: String
  preRenderActionId: String
  preRenderActionId_CONTAINS: String
  preRenderActionId_ENDS_WITH: String
  preRenderActionId_IN: [String]
  preRenderActionId_NOT: String
  preRenderActionId_NOT_CONTAINS: String
  preRenderActionId_NOT_ENDS_WITH: String
  preRenderActionId_NOT_IN: [String]
  preRenderActionId_NOT_STARTS_WITH: String
  preRenderActionId_STARTS_WITH: String
  prevSibling: ElementWhere
  prevSiblingAggregate: ElementPrevSiblingAggregateInput
  prevSiblingConnection: ElementPrevSiblingConnectionWhere
  prevSiblingConnection_NOT: ElementPrevSiblingConnectionWhere
  prevSibling_NOT: ElementWhere
  propMapBindingsAggregate: ElementPropMapBindingsAggregateInput
  propMapBindingsConnection_ALL: ElementPropMapBindingsConnectionWhere
  propMapBindingsConnection_NONE: ElementPropMapBindingsConnectionWhere
  propMapBindingsConnection_SINGLE: ElementPropMapBindingsConnectionWhere
  propMapBindingsConnection_SOME: ElementPropMapBindingsConnectionWhere

  """
  Return Elements where all of the related PropMapBindings match this filter
  """
  propMapBindings_ALL: PropMapBindingWhere

  """
  Return Elements where none of the related PropMapBindings match this filter
  """
  propMapBindings_NONE: PropMapBindingWhere

  """
  Return Elements where one of the related PropMapBindings match this filter
  """
  propMapBindings_SINGLE: PropMapBindingWhere

  """
  Return Elements where some of the related PropMapBindings match this filter
  """
  propMapBindings_SOME: PropMapBindingWhere
  propTransformationJs: String
  propTransformationJs_CONTAINS: String
  propTransformationJs_ENDS_WITH: String
  propTransformationJs_IN: [String]
  propTransformationJs_NOT: String
  propTransformationJs_NOT_CONTAINS: String
  propTransformationJs_NOT_ENDS_WITH: String
  propTransformationJs_NOT_IN: [String]
  propTransformationJs_NOT_STARTS_WITH: String
  propTransformationJs_STARTS_WITH: String
  props: PropWhere
  propsAggregate: ElementPropsAggregateInput
  propsConnection: ElementPropsConnectionWhere
  propsConnection_NOT: ElementPropsConnectionWhere
  props_NOT: PropWhere
  renderAtomType: AtomWhere
  renderAtomTypeAggregate: ElementRenderAtomTypeAggregateInput
  renderAtomTypeConnection: ElementRenderAtomTypeConnectionWhere
  renderAtomTypeConnection_NOT: ElementRenderAtomTypeConnectionWhere
  renderAtomType_NOT: AtomWhere
  renderComponentType: ComponentWhere
  renderComponentTypeAggregate: ElementRenderComponentTypeAggregateInput
  renderComponentTypeConnection: ElementRenderComponentTypeConnectionWhere
  renderComponentTypeConnection_NOT: ElementRenderComponentTypeConnectionWhere
  renderComponentType_NOT: ComponentWhere
  renderForEachPropKey: String
  renderForEachPropKey_CONTAINS: String
  renderForEachPropKey_ENDS_WITH: String
  renderForEachPropKey_IN: [String]
  renderForEachPropKey_NOT: String
  renderForEachPropKey_NOT_CONTAINS: String
  renderForEachPropKey_NOT_ENDS_WITH: String
  renderForEachPropKey_NOT_IN: [String]
  renderForEachPropKey_NOT_STARTS_WITH: String
  renderForEachPropKey_STARTS_WITH: String
  renderIfPropKey: String
  renderIfPropKey_CONTAINS: String
  renderIfPropKey_ENDS_WITH: String
  renderIfPropKey_IN: [String]
  renderIfPropKey_NOT: String
  renderIfPropKey_NOT_CONTAINS: String
  renderIfPropKey_NOT_ENDS_WITH: String
  renderIfPropKey_NOT_IN: [String]
  renderIfPropKey_NOT_STARTS_WITH: String
  renderIfPropKey_STARTS_WITH: String
}

type ElementsConnection {
  edges: [ElementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows choosing one of a set of allowed values.
The value gets passed to the render pipe as a Enum Type Value id.
The actual value must be de-referenced by the id.
"""
type EnumType implements TypeBase {
  allowedValues(
    directed: Boolean = true
    options: EnumTypeValueOptions
    where: EnumTypeValueWhere
  ): [EnumTypeValue!]!
  allowedValuesAggregate(
    directed: Boolean = true
    where: EnumTypeValueWhere
  ): EnumTypeEnumTypeValueAllowedValuesAggregationSelection
  allowedValuesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [EnumTypeAllowedValuesConnectionSort!]
    where: EnumTypeAllowedValuesConnectionWhere
  ): EnumTypeAllowedValuesConnection!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): EnumTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type EnumTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input EnumTypeAllowedValuesAggregateInput {
  AND: [EnumTypeAllowedValuesAggregateInput!]
  OR: [EnumTypeAllowedValuesAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeAllowedValuesNodeAggregationWhereInput
}

input EnumTypeAllowedValuesConnectFieldInput {
  connect: [EnumTypeValueConnectInput!]
  where: EnumTypeValueConnectWhere
}

type EnumTypeAllowedValuesConnection {
  edges: [EnumTypeAllowedValuesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeAllowedValuesConnectionSort {
  node: EnumTypeValueSort
}

input EnumTypeAllowedValuesConnectionWhere {
  AND: [EnumTypeAllowedValuesConnectionWhere!]
  OR: [EnumTypeAllowedValuesConnectionWhere!]
  node: EnumTypeValueWhere
  node_NOT: EnumTypeValueWhere
}

input EnumTypeAllowedValuesCreateFieldInput {
  node: EnumTypeValueCreateInput!
}

input EnumTypeAllowedValuesDeleteFieldInput {
  delete: EnumTypeValueDeleteInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeAllowedValuesDisconnectFieldInput {
  disconnect: EnumTypeValueDisconnectInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeAllowedValuesFieldInput {
  connect: [EnumTypeAllowedValuesConnectFieldInput!]
  create: [EnumTypeAllowedValuesCreateFieldInput!]
}

input EnumTypeAllowedValuesNodeAggregationWhereInput {
  AND: [EnumTypeAllowedValuesNodeAggregationWhereInput!]
  OR: [EnumTypeAllowedValuesNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

type EnumTypeAllowedValuesRelationship {
  cursor: String!
  node: EnumTypeValue!
}

input EnumTypeAllowedValuesUpdateConnectionInput {
  node: EnumTypeValueUpdateInput
}

input EnumTypeAllowedValuesUpdateFieldInput {
  connect: [EnumTypeAllowedValuesConnectFieldInput!]
  create: [EnumTypeAllowedValuesCreateFieldInput!]
  delete: [EnumTypeAllowedValuesDeleteFieldInput!]
  disconnect: [EnumTypeAllowedValuesDisconnectFieldInput!]
  update: EnumTypeAllowedValuesUpdateConnectionInput
  where: EnumTypeAllowedValuesConnectionWhere
}

input EnumTypeConnectInput {
  allowedValues: [EnumTypeAllowedValuesConnectFieldInput!]
  owner: TypeBaseOwnerConnectFieldInput
}

input EnumTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input EnumTypeConnectOrCreateWhere {
  node: EnumTypeUniqueWhere!
}

input EnumTypeConnectWhere {
  node: EnumTypeWhere!
}

input EnumTypeCreateInput {
  allowedValues: EnumTypeAllowedValuesFieldInput
  id: ID!
  kind: TypeKind! = EnumType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input EnumTypeDeleteInput {
  allowedValues: [EnumTypeAllowedValuesDeleteFieldInput!]
  owner: TypeBaseOwnerDeleteFieldInput
}

input EnumTypeDisconnectInput {
  allowedValues: [EnumTypeAllowedValuesDisconnectFieldInput!]
  owner: TypeBaseOwnerDisconnectFieldInput
}

type EnumTypeEdge {
  cursor: String!
  node: EnumType!
}

type EnumTypeEnumTypeValueAllowedValuesAggregationSelection {
  count: Int!
  node: EnumTypeEnumTypeValueAllowedValuesNodeAggregateSelection
}

type EnumTypeEnumTypeValueAllowedValuesNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  value: StringAggregateSelectionNonNullable!
}

input EnumTypeOnCreateInput {
  id: ID!
  name: String!
}

input EnumTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more EnumTypeSort objects to sort EnumTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [EnumTypeSort!]
}

input EnumTypeOwnerAggregateInput {
  AND: [EnumTypeOwnerAggregateInput!]
  OR: [EnumTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: EnumTypeOwnerEdgeAggregationWhereInput
  node: EnumTypeOwnerNodeAggregationWhereInput
}

input EnumTypeOwnerEdgeAggregationWhereInput {
  AND: [EnumTypeOwnerEdgeAggregationWhereInput!]
  OR: [EnumTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input EnumTypeOwnerNodeAggregationWhereInput {
  AND: [EnumTypeOwnerNodeAggregationWhereInput!]
  OR: [EnumTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input EnumTypeRelationInput {
  allowedValues: [EnumTypeAllowedValuesCreateFieldInput!]
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort EnumTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one EnumTypeSort object.
"""
input EnumTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input EnumTypeUniqueWhere {
  id: ID
}

input EnumTypeUpdateInput {
  allowedValues: [EnumTypeAllowedValuesUpdateFieldInput!]
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type EnumTypeUserOwnerAggregationSelection {
  count: Int!
  edge: EnumTypeUserOwnerEdgeAggregateSelection
  node: EnumTypeUserOwnerNodeAggregateSelection
}

type EnumTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type EnumTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

type EnumTypeValue {
  enumType(
    directed: Boolean = true
    options: EnumTypeOptions
    where: EnumTypeWhere
  ): EnumType
  enumTypeAggregate(
    directed: Boolean = true
    where: EnumTypeWhere
  ): EnumTypeValueEnumTypeEnumTypeAggregationSelection
  enumTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [EnumTypeValueEnumTypeConnectionSort!]
    where: EnumTypeValueEnumTypeConnectionWhere
  ): EnumTypeValueEnumTypeConnection!
  id: ID!
  name: String
  value: String!
}

type EnumTypeValueAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  value: StringAggregateSelectionNonNullable!
}

input EnumTypeValueConnectInput {
  enumType: EnumTypeValueEnumTypeConnectFieldInput
}

input EnumTypeValueConnectOrCreateInput {
  enumType: EnumTypeValueEnumTypeConnectOrCreateFieldInput
}

input EnumTypeValueConnectWhere {
  node: EnumTypeValueWhere!
}

input EnumTypeValueCreateInput {
  enumType: EnumTypeValueEnumTypeFieldInput
  id: ID!
  name: String
  value: String!
}

input EnumTypeValueDeleteInput {
  enumType: EnumTypeValueEnumTypeDeleteFieldInput
}

input EnumTypeValueDisconnectInput {
  enumType: EnumTypeValueEnumTypeDisconnectFieldInput
}

type EnumTypeValueEdge {
  cursor: String!
  node: EnumTypeValue!
}

input EnumTypeValueEnumTypeAggregateInput {
  AND: [EnumTypeValueEnumTypeAggregateInput!]
  OR: [EnumTypeValueEnumTypeAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: EnumTypeValueEnumTypeNodeAggregationWhereInput
}

input EnumTypeValueEnumTypeConnectFieldInput {
  connect: EnumTypeConnectInput
  where: EnumTypeConnectWhere
}

input EnumTypeValueEnumTypeConnectOrCreateFieldInput {
  onCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInputOnCreate!
  where: EnumTypeConnectOrCreateWhere!
}

input EnumTypeValueEnumTypeConnectOrCreateFieldInputOnCreate {
  node: EnumTypeOnCreateInput!
}

type EnumTypeValueEnumTypeConnection {
  edges: [EnumTypeValueEnumTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeValueEnumTypeConnectionSort {
  node: EnumTypeSort
}

input EnumTypeValueEnumTypeConnectionWhere {
  AND: [EnumTypeValueEnumTypeConnectionWhere!]
  OR: [EnumTypeValueEnumTypeConnectionWhere!]
  node: EnumTypeWhere
  node_NOT: EnumTypeWhere
}

input EnumTypeValueEnumTypeCreateFieldInput {
  node: EnumTypeCreateInput!
}

input EnumTypeValueEnumTypeDeleteFieldInput {
  delete: EnumTypeDeleteInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

input EnumTypeValueEnumTypeDisconnectFieldInput {
  disconnect: EnumTypeDisconnectInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

type EnumTypeValueEnumTypeEnumTypeAggregationSelection {
  count: Int!
  node: EnumTypeValueEnumTypeEnumTypeNodeAggregateSelection
}

type EnumTypeValueEnumTypeEnumTypeNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input EnumTypeValueEnumTypeFieldInput {
  connect: EnumTypeValueEnumTypeConnectFieldInput
  connectOrCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInput
  create: EnumTypeValueEnumTypeCreateFieldInput
}

input EnumTypeValueEnumTypeNodeAggregationWhereInput {
  AND: [EnumTypeValueEnumTypeNodeAggregationWhereInput!]
  OR: [EnumTypeValueEnumTypeNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type EnumTypeValueEnumTypeRelationship {
  cursor: String!
  node: EnumType!
}

input EnumTypeValueEnumTypeUpdateConnectionInput {
  node: EnumTypeUpdateInput
}

input EnumTypeValueEnumTypeUpdateFieldInput {
  connect: EnumTypeValueEnumTypeConnectFieldInput
  connectOrCreate: EnumTypeValueEnumTypeConnectOrCreateFieldInput
  create: EnumTypeValueEnumTypeCreateFieldInput
  delete: EnumTypeValueEnumTypeDeleteFieldInput
  disconnect: EnumTypeValueEnumTypeDisconnectFieldInput
  update: EnumTypeValueEnumTypeUpdateConnectionInput
  where: EnumTypeValueEnumTypeConnectionWhere
}

input EnumTypeValueOptions {
  limit: Int
  offset: Int

  """
  Specify one or more EnumTypeValueSort objects to sort EnumTypeValues by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [EnumTypeValueSort!]
}

input EnumTypeValueRelationInput {
  enumType: EnumTypeValueEnumTypeCreateFieldInput
}

"""
Fields to sort EnumTypeValues by. The order in which sorts are applied is not guaranteed when specifying many fields in one EnumTypeValueSort object.
"""
input EnumTypeValueSort {
  id: SortDirection
  name: SortDirection
  value: SortDirection
}

input EnumTypeValueUpdateInput {
  enumType: EnumTypeValueEnumTypeUpdateFieldInput
  id: ID
  name: String
  value: String
}

input EnumTypeValueWhere {
  AND: [EnumTypeValueWhere!]
  OR: [EnumTypeValueWhere!]
  enumType: EnumTypeWhere
  enumTypeAggregate: EnumTypeValueEnumTypeAggregateInput
  enumTypeConnection: EnumTypeValueEnumTypeConnectionWhere
  enumTypeConnection_NOT: EnumTypeValueEnumTypeConnectionWhere
  enumType_NOT: EnumTypeWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  value: String
  value_CONTAINS: String
  value_ENDS_WITH: String
  value_IN: [String!]
  value_NOT: String
  value_NOT_CONTAINS: String
  value_NOT_ENDS_WITH: String
  value_NOT_IN: [String!]
  value_NOT_STARTS_WITH: String
  value_STARTS_WITH: String
}

type EnumTypeValuesConnection {
  edges: [EnumTypeValueEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnumTypeWhere {
  AND: [EnumTypeWhere!]
  OR: [EnumTypeWhere!]
  allowedValuesAggregate: EnumTypeAllowedValuesAggregateInput
  allowedValuesConnection_ALL: EnumTypeAllowedValuesConnectionWhere
  allowedValuesConnection_NONE: EnumTypeAllowedValuesConnectionWhere
  allowedValuesConnection_SINGLE: EnumTypeAllowedValuesConnectionWhere
  allowedValuesConnection_SOME: EnumTypeAllowedValuesConnectionWhere

  """
  Return EnumTypes where all of the related EnumTypeValues match this filter
  """
  allowedValues_ALL: EnumTypeValueWhere

  """
  Return EnumTypes where none of the related EnumTypeValues match this filter
  """
  allowedValues_NONE: EnumTypeValueWhere

  """
  Return EnumTypes where one of the related EnumTypeValues match this filter
  """
  allowedValues_SINGLE: EnumTypeValueWhere

  """
  Return EnumTypes where some of the related EnumTypeValues match this filter
  """
  allowedValues_SOME: EnumTypeValueWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: EnumTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type EnumTypesConnection {
  edges: [EnumTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface Field {
  description: String
  id: ID!
  key: String!
  name: String
}

input FieldCreateInput {
  description: String
  id: ID!
  key: String!
  name: String
}

input FieldSort {
  description: SortDirection
  id: SortDirection
  key: SortDirection
  name: SortDirection
}

input FieldUpdateInput {
  description: String
  id: ID
  key: String
  name: String
}

input FieldWhere {
  AND: [FieldWhere!]
  OR: [FieldWhere!]
  description: String
  description_CONTAINS: String
  description_ENDS_WITH: String
  description_IN: [String]
  description_NOT: String
  description_NOT_CONTAINS: String
  description_NOT_ENDS_WITH: String
  description_NOT_IN: [String]
  description_NOT_STARTS_WITH: String
  description_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  key: String
  key_CONTAINS: String
  key_ENDS_WITH: String
  key_IN: [String!]
  key_NOT: String
  key_NOT_CONTAINS: String
  key_NOT_ENDS_WITH: String
  key_NOT_IN: [String!]
  key_NOT_STARTS_WITH: String
  key_STARTS_WITH: String
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
}

type Hook {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): HookPropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [HookConfigConnectionSort!]
    where: HookConfigConnectionWhere
  ): HookConfigConnection!
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  elementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): HookElementElementAggregationSelection
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [HookElementConnectionSort!]
    where: HookElementConnectionWhere
  ): HookElementConnection!
  id: ID!
  type: AtomType!
}

type HookAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
}

input HookConfigAggregateInput {
  AND: [HookConfigAggregateInput!]
  OR: [HookConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: HookConfigNodeAggregationWhereInput
}

input HookConfigConnectFieldInput {
  where: PropConnectWhere
}

input HookConfigConnectOrCreateFieldInput {
  onCreate: HookConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input HookConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type HookConfigConnection {
  edges: [HookConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input HookConfigConnectionSort {
  node: PropSort
}

input HookConfigConnectionWhere {
  AND: [HookConfigConnectionWhere!]
  OR: [HookConfigConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input HookConfigCreateFieldInput {
  node: PropCreateInput!
}

input HookConfigDeleteFieldInput {
  where: HookConfigConnectionWhere
}

input HookConfigDisconnectFieldInput {
  where: HookConfigConnectionWhere
}

input HookConfigFieldInput {
  connect: HookConfigConnectFieldInput
  connectOrCreate: HookConfigConnectOrCreateFieldInput
  create: HookConfigCreateFieldInput
}

input HookConfigNodeAggregationWhereInput {
  AND: [HookConfigNodeAggregationWhereInput!]
  OR: [HookConfigNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type HookConfigRelationship {
  cursor: String!
  node: Prop!
}

input HookConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input HookConfigUpdateFieldInput {
  connect: HookConfigConnectFieldInput
  connectOrCreate: HookConfigConnectOrCreateFieldInput
  create: HookConfigCreateFieldInput
  delete: HookConfigDeleteFieldInput
  disconnect: HookConfigDisconnectFieldInput
  update: HookConfigUpdateConnectionInput
  where: HookConfigConnectionWhere
}

input HookConnectInput {
  config: HookConfigConnectFieldInput
  element: HookElementConnectFieldInput
}

input HookConnectOrCreateInput {
  config: HookConfigConnectOrCreateFieldInput
  element: HookElementConnectOrCreateFieldInput
}

input HookConnectOrCreateWhere {
  node: HookUniqueWhere!
}

input HookConnectWhere {
  node: HookWhere!
}

input HookCreateInput {
  config: HookConfigFieldInput
  element: HookElementFieldInput
  type: AtomType!
}

input HookDeleteInput {
  config: HookConfigDeleteFieldInput
  element: HookElementDeleteFieldInput
}

input HookDisconnectInput {
  config: HookConfigDisconnectFieldInput
  element: HookElementDisconnectFieldInput
}

type HookEdge {
  cursor: String!
  node: Hook!
}

input HookElementAggregateInput {
  AND: [HookElementAggregateInput!]
  OR: [HookElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: HookElementNodeAggregationWhereInput
}

input HookElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input HookElementConnectOrCreateFieldInput {
  onCreate: HookElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input HookElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type HookElementConnection {
  edges: [HookElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input HookElementConnectionSort {
  node: ElementSort
}

input HookElementConnectionWhere {
  AND: [HookElementConnectionWhere!]
  OR: [HookElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input HookElementCreateFieldInput {
  node: ElementCreateInput!
}

input HookElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: HookElementConnectionWhere
}

input HookElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: HookElementConnectionWhere
}

type HookElementElementAggregationSelection {
  count: Int!
  node: HookElementElementNodeAggregateSelection
}

type HookElementElementNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input HookElementFieldInput {
  connect: HookElementConnectFieldInput
  connectOrCreate: HookElementConnectOrCreateFieldInput
  create: HookElementCreateFieldInput
}

input HookElementNodeAggregationWhereInput {
  AND: [HookElementNodeAggregationWhereInput!]
  OR: [HookElementNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type HookElementRelationship {
  cursor: String!
  node: Element!
}

input HookElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input HookElementUpdateFieldInput {
  connect: HookElementConnectFieldInput
  connectOrCreate: HookElementConnectOrCreateFieldInput
  create: HookElementCreateFieldInput
  delete: HookElementDeleteFieldInput
  disconnect: HookElementDisconnectFieldInput
  update: HookElementUpdateConnectionInput
  where: HookElementConnectionWhere
}

input HookOnCreateInput {
  """
  Appears because this input type would be empty otherwise because this type is composed of just generated and/or relationship properties. See https://neo4j.com/docs/graphql-manual/current/troubleshooting/faqs/
  """
  _emptyInput: Boolean
}

input HookOptions {
  limit: Int
  offset: Int

  """
  Specify one or more HookSort objects to sort Hooks by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [HookSort!]
}

type HookPropConfigAggregationSelection {
  count: Int!
  node: HookPropConfigNodeAggregateSelection
}

type HookPropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input HookRelationInput {
  config: HookConfigCreateFieldInput
  element: HookElementCreateFieldInput
}

"""
Fields to sort Hooks by. The order in which sorts are applied is not guaranteed when specifying many fields in one HookSort object.
"""
input HookSort {
  id: SortDirection
  type: SortDirection
}

input HookUniqueWhere {
  id: ID
}

input HookUpdateInput {
  config: HookConfigUpdateFieldInput
  element: HookElementUpdateFieldInput
  type: AtomType
}

input HookWhere {
  AND: [HookWhere!]
  OR: [HookWhere!]
  config: PropWhere
  configAggregate: HookConfigAggregateInput
  configConnection: HookConfigConnectionWhere
  configConnection_NOT: HookConfigConnectionWhere
  config_NOT: PropWhere
  element: ElementWhere
  elementAggregate: HookElementAggregateInput
  elementConnection: HookElementConnectionWhere
  elementConnection_NOT: HookElementConnectionWhere
  element_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  type: AtomType
  type_IN: [AtomType!]
  type_NOT: AtomType
  type_NOT_IN: [AtomType!]
}

type HooksConnection {
  edges: [HookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IDAggregateSelectionNonNullable {
  longest: ID!
  shortest: ID!
}

type IntAggregateSelectionNonNullable {
  average: Float!
  max: Int!
  min: Int!
  sum: Int!
}

"""
Represents an object type with multiple fields
"""
type InterfaceType implements TypeBase & WithDescendants {
  apiOfAtoms(
    directed: Boolean = true
    options: AtomOptions
    where: AtomWhere
  ): [Atom!]!
  apiOfAtomsAggregate(
    directed: Boolean = true
    where: AtomWhere
  ): InterfaceTypeAtomApiOfAtomsAggregationSelection
  apiOfAtomsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [InterfaceTypeApiOfAtomsConnectionSort!]
    where: InterfaceTypeApiOfAtomsConnectionWhere
  ): InterfaceTypeApiOfAtomsConnection!
  descendantTypesIds: [ID!]!
  fieldFor: [TypeBase!]!
  fields(
    directed: Boolean = true
    options: TypeBaseOptions
    where: TypeBaseWhere
  ): [TypeBase!]!
  fieldsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [InterfaceTypeFieldsConnectionSort!]
    where: InterfaceTypeFieldsConnectionWhere
  ): InterfaceTypeFieldsConnection!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): InterfaceTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type InterfaceTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input InterfaceTypeApiOfAtomsAggregateInput {
  AND: [InterfaceTypeApiOfAtomsAggregateInput!]
  OR: [InterfaceTypeApiOfAtomsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: InterfaceTypeApiOfAtomsNodeAggregationWhereInput
}

input InterfaceTypeApiOfAtomsConnectFieldInput {
  connect: [AtomConnectInput!]
  where: AtomConnectWhere
}

input InterfaceTypeApiOfAtomsConnectOrCreateFieldInput {
  onCreate: InterfaceTypeApiOfAtomsConnectOrCreateFieldInputOnCreate!
  where: AtomConnectOrCreateWhere!
}

input InterfaceTypeApiOfAtomsConnectOrCreateFieldInputOnCreate {
  node: AtomOnCreateInput!
}

type InterfaceTypeApiOfAtomsConnection {
  edges: [InterfaceTypeApiOfAtomsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input InterfaceTypeApiOfAtomsConnectionSort {
  node: AtomSort
}

input InterfaceTypeApiOfAtomsConnectionWhere {
  AND: [InterfaceTypeApiOfAtomsConnectionWhere!]
  OR: [InterfaceTypeApiOfAtomsConnectionWhere!]
  node: AtomWhere
  node_NOT: AtomWhere
}

input InterfaceTypeApiOfAtomsCreateFieldInput {
  node: AtomCreateInput!
}

input InterfaceTypeApiOfAtomsDeleteFieldInput {
  delete: AtomDeleteInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

input InterfaceTypeApiOfAtomsDisconnectFieldInput {
  disconnect: AtomDisconnectInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

input InterfaceTypeApiOfAtomsFieldInput {
  connect: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  connectOrCreate: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  create: [InterfaceTypeApiOfAtomsCreateFieldInput!]
}

input InterfaceTypeApiOfAtomsNodeAggregationWhereInput {
  AND: [InterfaceTypeApiOfAtomsNodeAggregationWhereInput!]
  OR: [InterfaceTypeApiOfAtomsNodeAggregationWhereInput!]
  icon_AVERAGE_EQUAL: Float
  icon_AVERAGE_GT: Float
  icon_AVERAGE_GTE: Float
  icon_AVERAGE_LT: Float
  icon_AVERAGE_LTE: Float
  icon_EQUAL: String
  icon_GT: Int
  icon_GTE: Int
  icon_LONGEST_EQUAL: Int
  icon_LONGEST_GT: Int
  icon_LONGEST_GTE: Int
  icon_LONGEST_LT: Int
  icon_LONGEST_LTE: Int
  icon_LT: Int
  icon_LTE: Int
  icon_SHORTEST_EQUAL: Int
  icon_SHORTEST_GT: Int
  icon_SHORTEST_GTE: Int
  icon_SHORTEST_LT: Int
  icon_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type InterfaceTypeApiOfAtomsRelationship {
  cursor: String!
  node: Atom!
}

input InterfaceTypeApiOfAtomsUpdateConnectionInput {
  node: AtomUpdateInput
}

input InterfaceTypeApiOfAtomsUpdateFieldInput {
  connect: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  connectOrCreate: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  create: [InterfaceTypeApiOfAtomsCreateFieldInput!]
  delete: [InterfaceTypeApiOfAtomsDeleteFieldInput!]
  disconnect: [InterfaceTypeApiOfAtomsDisconnectFieldInput!]
  update: InterfaceTypeApiOfAtomsUpdateConnectionInput
  where: InterfaceTypeApiOfAtomsConnectionWhere
}

type InterfaceTypeAtomApiOfAtomsAggregationSelection {
  count: Int!
  node: InterfaceTypeAtomApiOfAtomsNodeAggregateSelection
}

type InterfaceTypeAtomApiOfAtomsNodeAggregateSelection {
  icon: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input InterfaceTypeConnectInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsConnectFieldInput!]
  fields: [InterfaceTypeFieldsConnectFieldInput!]
  owner: TypeBaseOwnerConnectFieldInput
}

input InterfaceTypeConnectOrCreateInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsConnectOrCreateFieldInput!]
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input InterfaceTypeConnectOrCreateWhere {
  node: InterfaceTypeUniqueWhere!
}

input InterfaceTypeConnectWhere {
  node: InterfaceTypeWhere!
}

input InterfaceTypeCreateInput {
  apiOfAtoms: InterfaceTypeApiOfAtomsFieldInput
  fields: InterfaceTypeFieldsFieldInput
  id: ID!
  kind: TypeKind! = InterfaceType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input InterfaceTypeDeleteInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsDeleteFieldInput!]
  fields: [InterfaceTypeFieldsDeleteFieldInput!]
  owner: TypeBaseOwnerDeleteFieldInput
}

input InterfaceTypeDisconnectInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsDisconnectFieldInput!]
  fields: [InterfaceTypeFieldsDisconnectFieldInput!]
  owner: TypeBaseOwnerDisconnectFieldInput
}

type InterfaceTypeEdge {
  cursor: String!
  node: InterfaceType!
}

input InterfaceTypeFieldsConnectFieldInput {
  connect: TypeBaseConnectInput
  edge: FieldCreateInput!
  where: TypeBaseConnectWhere
}

type InterfaceTypeFieldsConnection {
  edges: [InterfaceTypeFieldsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input InterfaceTypeFieldsConnectionSort {
  edge: FieldSort
  node: TypeBaseSort
}

input InterfaceTypeFieldsConnectionWhere {
  AND: [InterfaceTypeFieldsConnectionWhere!]
  OR: [InterfaceTypeFieldsConnectionWhere!]
  edge: FieldWhere
  edge_NOT: FieldWhere
  node: TypeBaseWhere
  node_NOT: TypeBaseWhere
}

input InterfaceTypeFieldsCreateFieldInput {
  edge: FieldCreateInput!
  node: TypeBaseCreateInput!
}

input InterfaceTypeFieldsDeleteFieldInput {
  delete: TypeBaseDeleteInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeFieldsDisconnectFieldInput {
  disconnect: TypeBaseDisconnectInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeFieldsFieldInput {
  connect: [InterfaceTypeFieldsConnectFieldInput!]
  create: [InterfaceTypeFieldsCreateFieldInput!]
}

type InterfaceTypeFieldsRelationship implements Field {
  cursor: String!
  description: String
  id: ID!
  key: String!
  name: String
  node: TypeBase!
}

input InterfaceTypeFieldsUpdateConnectionInput {
  edge: FieldUpdateInput
  node: TypeBaseUpdateInput
}

input InterfaceTypeFieldsUpdateFieldInput {
  connect: [InterfaceTypeFieldsConnectFieldInput!]
  create: [InterfaceTypeFieldsCreateFieldInput!]
  delete: [InterfaceTypeFieldsDeleteFieldInput!]
  disconnect: [InterfaceTypeFieldsDisconnectFieldInput!]
  update: InterfaceTypeFieldsUpdateConnectionInput
  where: InterfaceTypeFieldsConnectionWhere
}

input InterfaceTypeOnCreateInput {
  id: ID!
  name: String!
}

input InterfaceTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more InterfaceTypeSort objects to sort InterfaceTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [InterfaceTypeSort!]
}

input InterfaceTypeOwnerAggregateInput {
  AND: [InterfaceTypeOwnerAggregateInput!]
  OR: [InterfaceTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: InterfaceTypeOwnerEdgeAggregationWhereInput
  node: InterfaceTypeOwnerNodeAggregationWhereInput
}

input InterfaceTypeOwnerEdgeAggregationWhereInput {
  AND: [InterfaceTypeOwnerEdgeAggregationWhereInput!]
  OR: [InterfaceTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input InterfaceTypeOwnerNodeAggregationWhereInput {
  AND: [InterfaceTypeOwnerNodeAggregationWhereInput!]
  OR: [InterfaceTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input InterfaceTypeRelationInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsCreateFieldInput!]
  fields: [InterfaceTypeFieldsCreateFieldInput!]
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort InterfaceTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one InterfaceTypeSort object.
"""
input InterfaceTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input InterfaceTypeUniqueWhere {
  id: ID
}

input InterfaceTypeUpdateInput {
  apiOfAtoms: [InterfaceTypeApiOfAtomsUpdateFieldInput!]
  fields: [InterfaceTypeFieldsUpdateFieldInput!]
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type InterfaceTypeUserOwnerAggregationSelection {
  count: Int!
  edge: InterfaceTypeUserOwnerEdgeAggregateSelection
  node: InterfaceTypeUserOwnerNodeAggregateSelection
}

type InterfaceTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type InterfaceTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input InterfaceTypeWhere {
  AND: [InterfaceTypeWhere!]
  OR: [InterfaceTypeWhere!]
  apiOfAtomsAggregate: InterfaceTypeApiOfAtomsAggregateInput
  apiOfAtomsConnection_ALL: InterfaceTypeApiOfAtomsConnectionWhere
  apiOfAtomsConnection_NONE: InterfaceTypeApiOfAtomsConnectionWhere
  apiOfAtomsConnection_SINGLE: InterfaceTypeApiOfAtomsConnectionWhere
  apiOfAtomsConnection_SOME: InterfaceTypeApiOfAtomsConnectionWhere

  """
  Return InterfaceTypes where all of the related Atoms match this filter
  """
  apiOfAtoms_ALL: AtomWhere

  """
  Return InterfaceTypes where none of the related Atoms match this filter
  """
  apiOfAtoms_NONE: AtomWhere

  """
  Return InterfaceTypes where one of the related Atoms match this filter
  """
  apiOfAtoms_SINGLE: AtomWhere

  """
  Return InterfaceTypes where some of the related Atoms match this filter
  """
  apiOfAtoms_SOME: AtomWhere
  fieldsConnection_ALL: InterfaceTypeFieldsConnectionWhere
  fieldsConnection_NONE: InterfaceTypeFieldsConnectionWhere
  fieldsConnection_SINGLE: InterfaceTypeFieldsConnectionWhere
  fieldsConnection_SOME: InterfaceTypeFieldsConnectionWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: InterfaceTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type InterfaceTypesConnection {
  edges: [InterfaceTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking a lambda
"""
type LambdaType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): LambdaTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type LambdaTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input LambdaTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input LambdaTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input LambdaTypeConnectOrCreateWhere {
  node: LambdaTypeUniqueWhere!
}

input LambdaTypeConnectWhere {
  node: LambdaTypeWhere!
}

input LambdaTypeCreateInput {
  id: ID!
  kind: TypeKind! = LambdaType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input LambdaTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input LambdaTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type LambdaTypeEdge {
  cursor: String!
  node: LambdaType!
}

input LambdaTypeOnCreateInput {
  id: ID!
  name: String!
}

input LambdaTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more LambdaTypeSort objects to sort LambdaTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [LambdaTypeSort!]
}

input LambdaTypeOwnerAggregateInput {
  AND: [LambdaTypeOwnerAggregateInput!]
  OR: [LambdaTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: LambdaTypeOwnerEdgeAggregationWhereInput
  node: LambdaTypeOwnerNodeAggregationWhereInput
}

input LambdaTypeOwnerEdgeAggregationWhereInput {
  AND: [LambdaTypeOwnerEdgeAggregationWhereInput!]
  OR: [LambdaTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input LambdaTypeOwnerNodeAggregationWhereInput {
  AND: [LambdaTypeOwnerNodeAggregationWhereInput!]
  OR: [LambdaTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input LambdaTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort LambdaTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one LambdaTypeSort object.
"""
input LambdaTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input LambdaTypeUniqueWhere {
  id: ID
}

input LambdaTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type LambdaTypeUserOwnerAggregationSelection {
  count: Int!
  edge: LambdaTypeUserOwnerEdgeAggregateSelection
  node: LambdaTypeUserOwnerNodeAggregateSelection
}

type LambdaTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type LambdaTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input LambdaTypeWhere {
  AND: [LambdaTypeWhere!]
  OR: [LambdaTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: LambdaTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type LambdaTypesConnection {
  edges: [LambdaTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Mutation {
  createActionTypes(
    input: [ActionTypeCreateInput!]!
  ): CreateActionTypesMutationResponse!
  createApiActions(
    input: [ApiActionCreateInput!]!
  ): CreateApiActionsMutationResponse!
  createAppTypes(input: [AppTypeCreateInput!]!): CreateAppTypesMutationResponse!
  createApps(input: [AppCreateInput!]!): CreateAppsMutationResponse!
  createArrayTypes(
    input: [ArrayTypeCreateInput!]!
  ): CreateArrayTypesMutationResponse!
  createAtoms(input: [AtomCreateInput!]!): CreateAtomsMutationResponse!
  createCodeActions(
    input: [CodeActionCreateInput!]!
  ): CreateCodeActionsMutationResponse!
  createCodeMirrorTypes(
    input: [CodeMirrorTypeCreateInput!]!
  ): CreateCodeMirrorTypesMutationResponse!
  createComponents(
    input: [ComponentCreateInput!]!
  ): CreateComponentsMutationResponse!
  createCreateInfos(
    input: [CreateInfoCreateInput!]!
  ): CreateCreateInfosMutationResponse!
  createDeleteInfos(
    input: [DeleteInfoCreateInput!]!
  ): CreateDeleteInfosMutationResponse!
  createDomain(input: CreateDomainMutationInput): Domain!
  createDomains(input: [DomainCreateInput!]!): CreateDomainsMutationResponse!
  createElementTypes(
    input: [ElementTypeCreateInput!]!
  ): CreateElementTypesMutationResponse!
  createElements(input: [ElementCreateInput!]!): CreateElementsMutationResponse!
  createEnumTypeValues(
    input: [EnumTypeValueCreateInput!]!
  ): CreateEnumTypeValuesMutationResponse!
  createEnumTypes(
    input: [EnumTypeCreateInput!]!
  ): CreateEnumTypesMutationResponse!
  createHooks(input: [HookCreateInput!]!): CreateHooksMutationResponse!
  createInterfaceTypes(
    input: [InterfaceTypeCreateInput!]!
  ): CreateInterfaceTypesMutationResponse!
  createLambdaTypes(
    input: [LambdaTypeCreateInput!]!
  ): CreateLambdaTypesMutationResponse!
  createPageTypes(
    input: [PageTypeCreateInput!]!
  ): CreatePageTypesMutationResponse!
  createPages(input: [PageCreateInput!]!): CreatePagesMutationResponse!
  createPrimitiveTypes(
    input: [PrimitiveTypeCreateInput!]!
  ): CreatePrimitiveTypesMutationResponse!
  createPropMapBindings(
    input: [PropMapBindingCreateInput!]!
  ): CreatePropMapBindingsMutationResponse!
  createProps(input: [PropCreateInput!]!): CreatePropsMutationResponse!
  createReactNodeTypes(
    input: [ReactNodeTypeCreateInput!]!
  ): CreateReactNodeTypesMutationResponse!
  createRenderPropsTypes(
    input: [RenderPropsTypeCreateInput!]!
  ): CreateRenderPropsTypesMutationResponse!
  createResetDatabaseMutationResponses(
    input: [ResetDatabaseMutationResponseCreateInput!]!
  ): CreateResetDatabaseMutationResponsesMutationResponse!
  createResources(
    input: [ResourceCreateInput!]!
  ): CreateResourcesMutationResponse!
  createStores(input: [StoreCreateInput!]!): CreateStoresMutationResponse!
  createTags(input: [TagCreateInput!]!): CreateTagsMutationResponse!
  createTypeReferences(
    input: [TypeReferenceCreateInput!]!
  ): CreateTypeReferencesMutationResponse!
  createUnionTypes(
    input: [UnionTypeCreateInput!]!
  ): CreateUnionTypesMutationResponse!
  createUsers(input: [UserCreateInput!]!): CreateUsersMutationResponse!
  createVercelDomainConfigData(
    input: [VercelDomainConfigDataCreateInput!]!
  ): CreateVercelDomainConfigDataMutationResponse!
  createVercelProjectDomainData(
    input: [VercelProjectDomainDataCreateInput!]!
  ): CreateVercelProjectDomainDataMutationResponse!
  deleteActionTypes(
    delete: ActionTypeDeleteInput
    where: ActionTypeWhere
  ): DeleteInfo!
  deleteApiActions(
    delete: ApiActionDeleteInput
    where: ApiActionWhere
  ): DeleteInfo!
  deleteAppTypes(delete: AppTypeDeleteInput, where: AppTypeWhere): DeleteInfo!
  deleteApps(delete: AppDeleteInput, where: AppWhere): DeleteInfo!
  deleteArrayTypes(
    delete: ArrayTypeDeleteInput
    where: ArrayTypeWhere
  ): DeleteInfo!
  deleteAtoms(delete: AtomDeleteInput, where: AtomWhere): DeleteInfo!
  deleteCodeActions(
    delete: CodeActionDeleteInput
    where: CodeActionWhere
  ): DeleteInfo!
  deleteCodeMirrorTypes(
    delete: CodeMirrorTypeDeleteInput
    where: CodeMirrorTypeWhere
  ): DeleteInfo!
  deleteComponents(
    delete: ComponentDeleteInput
    where: ComponentWhere
  ): DeleteInfo!
  deleteCreateInfos(where: CreateInfoWhere): DeleteInfo!
  deleteDeleteInfos(where: DeleteInfoWhere): DeleteInfo!
  deleteDomain(id: String!): DeleteInfo!
  deleteDomains(delete: DomainDeleteInput, where: DomainWhere): DeleteInfo!
  deleteElementTypes(
    delete: ElementTypeDeleteInput
    where: ElementTypeWhere
  ): DeleteInfo!
  deleteElements(delete: ElementDeleteInput, where: ElementWhere): DeleteInfo!
  deleteEnumTypeValues(
    delete: EnumTypeValueDeleteInput
    where: EnumTypeValueWhere
  ): DeleteInfo!
  deleteEnumTypes(
    delete: EnumTypeDeleteInput
    where: EnumTypeWhere
  ): DeleteInfo!
  deleteHooks(delete: HookDeleteInput, where: HookWhere): DeleteInfo!
  deleteInterfaceTypes(
    delete: InterfaceTypeDeleteInput
    where: InterfaceTypeWhere
  ): DeleteInfo!
  deleteLambdaTypes(
    delete: LambdaTypeDeleteInput
    where: LambdaTypeWhere
  ): DeleteInfo!
  deletePageTypes(
    delete: PageTypeDeleteInput
    where: PageTypeWhere
  ): DeleteInfo!
  deletePages(delete: PageDeleteInput, where: PageWhere): DeleteInfo!
  deletePrimitiveTypes(
    delete: PrimitiveTypeDeleteInput
    where: PrimitiveTypeWhere
  ): DeleteInfo!
  deletePropMapBindings(
    delete: PropMapBindingDeleteInput
    where: PropMapBindingWhere
  ): DeleteInfo!
  deleteProps(where: PropWhere): DeleteInfo!
  deleteReactNodeTypes(
    delete: ReactNodeTypeDeleteInput
    where: ReactNodeTypeWhere
  ): DeleteInfo!
  deleteRenderPropsTypes(
    delete: RenderPropsTypeDeleteInput
    where: RenderPropsTypeWhere
  ): DeleteInfo!
  deleteResetDatabaseMutationResponses(
    where: ResetDatabaseMutationResponseWhere
  ): DeleteInfo!
  deleteResources(
    delete: ResourceDeleteInput
    where: ResourceWhere
  ): DeleteInfo!
  deleteStores(delete: StoreDeleteInput, where: StoreWhere): DeleteInfo!
  deleteTags(delete: TagDeleteInput, where: TagWhere): DeleteInfo!
  deleteTypeReferences(where: TypeReferenceWhere): DeleteInfo!
  deleteUnionTypes(
    delete: UnionTypeDeleteInput
    where: UnionTypeWhere
  ): DeleteInfo!
  deleteUsers(delete: UserDeleteInput, where: UserWhere): DeleteInfo!
  deleteVercelDomainConfigData(where: VercelDomainConfigDataWhere): DeleteInfo!
  deleteVercelProjectDomainData(
    where: VercelProjectDomainDataWhere
  ): DeleteInfo!
  resetDatabase: ResetDatabaseMutationResponse
  updateActionTypes(
    connect: ActionTypeConnectInput
    connectOrCreate: ActionTypeConnectOrCreateInput
    create: ActionTypeRelationInput
    delete: ActionTypeDeleteInput
    disconnect: ActionTypeDisconnectInput
    update: ActionTypeUpdateInput
    where: ActionTypeWhere
  ): UpdateActionTypesMutationResponse!
  updateApiActions(
    connect: ApiActionConnectInput
    connectOrCreate: ApiActionConnectOrCreateInput
    create: ApiActionRelationInput
    delete: ApiActionDeleteInput
    disconnect: ApiActionDisconnectInput
    update: ApiActionUpdateInput
    where: ApiActionWhere
  ): UpdateApiActionsMutationResponse!
  updateAppTypes(
    connect: AppTypeConnectInput
    connectOrCreate: AppTypeConnectOrCreateInput
    create: AppTypeRelationInput
    delete: AppTypeDeleteInput
    disconnect: AppTypeDisconnectInput
    update: AppTypeUpdateInput
    where: AppTypeWhere
  ): UpdateAppTypesMutationResponse!
  updateApps(
    connect: AppConnectInput
    connectOrCreate: AppConnectOrCreateInput
    create: AppRelationInput
    delete: AppDeleteInput
    disconnect: AppDisconnectInput
    update: AppUpdateInput
    where: AppWhere
  ): UpdateAppsMutationResponse!
  updateArrayTypes(
    connect: ArrayTypeConnectInput
    connectOrCreate: ArrayTypeConnectOrCreateInput
    create: ArrayTypeRelationInput
    delete: ArrayTypeDeleteInput
    disconnect: ArrayTypeDisconnectInput
    update: ArrayTypeUpdateInput
    where: ArrayTypeWhere
  ): UpdateArrayTypesMutationResponse!
  updateAtoms(
    connect: AtomConnectInput
    connectOrCreate: AtomConnectOrCreateInput
    create: AtomRelationInput
    delete: AtomDeleteInput
    disconnect: AtomDisconnectInput
    update: AtomUpdateInput
    where: AtomWhere
  ): UpdateAtomsMutationResponse!
  updateCodeActions(
    connect: CodeActionConnectInput
    connectOrCreate: CodeActionConnectOrCreateInput
    create: CodeActionRelationInput
    delete: CodeActionDeleteInput
    disconnect: CodeActionDisconnectInput
    update: CodeActionUpdateInput
    where: CodeActionWhere
  ): UpdateCodeActionsMutationResponse!
  updateCodeMirrorTypes(
    connect: CodeMirrorTypeConnectInput
    connectOrCreate: CodeMirrorTypeConnectOrCreateInput
    create: CodeMirrorTypeRelationInput
    delete: CodeMirrorTypeDeleteInput
    disconnect: CodeMirrorTypeDisconnectInput
    update: CodeMirrorTypeUpdateInput
    where: CodeMirrorTypeWhere
  ): UpdateCodeMirrorTypesMutationResponse!
  updateComponents(
    connect: ComponentConnectInput
    connectOrCreate: ComponentConnectOrCreateInput
    create: ComponentRelationInput
    delete: ComponentDeleteInput
    disconnect: ComponentDisconnectInput
    update: ComponentUpdateInput
    where: ComponentWhere
  ): UpdateComponentsMutationResponse!
  updateCreateInfos(
    update: CreateInfoUpdateInput
    where: CreateInfoWhere
  ): UpdateCreateInfosMutationResponse!
  updateDeleteInfos(
    update: DeleteInfoUpdateInput
    where: DeleteInfoWhere
  ): UpdateDeleteInfosMutationResponse!
  updateDomain(input: UpdateDomainMutationInput): Domain!
  updateDomains(
    connect: DomainConnectInput
    connectOrCreate: DomainConnectOrCreateInput
    create: DomainRelationInput
    delete: DomainDeleteInput
    disconnect: DomainDisconnectInput
    update: DomainUpdateInput
    where: DomainWhere
  ): UpdateDomainsMutationResponse!
  updateElementTypes(
    connect: ElementTypeConnectInput
    connectOrCreate: ElementTypeConnectOrCreateInput
    create: ElementTypeRelationInput
    delete: ElementTypeDeleteInput
    disconnect: ElementTypeDisconnectInput
    update: ElementTypeUpdateInput
    where: ElementTypeWhere
  ): UpdateElementTypesMutationResponse!
  updateElements(
    connect: ElementConnectInput
    connectOrCreate: ElementConnectOrCreateInput
    create: ElementRelationInput
    delete: ElementDeleteInput
    disconnect: ElementDisconnectInput
    update: ElementUpdateInput
    where: ElementWhere
  ): UpdateElementsMutationResponse!
  updateEnumTypeValues(
    connect: EnumTypeValueConnectInput
    connectOrCreate: EnumTypeValueConnectOrCreateInput
    create: EnumTypeValueRelationInput
    delete: EnumTypeValueDeleteInput
    disconnect: EnumTypeValueDisconnectInput
    update: EnumTypeValueUpdateInput
    where: EnumTypeValueWhere
  ): UpdateEnumTypeValuesMutationResponse!
  updateEnumTypes(
    connect: EnumTypeConnectInput
    connectOrCreate: EnumTypeConnectOrCreateInput
    create: EnumTypeRelationInput
    delete: EnumTypeDeleteInput
    disconnect: EnumTypeDisconnectInput
    update: EnumTypeUpdateInput
    where: EnumTypeWhere
  ): UpdateEnumTypesMutationResponse!
  updateHooks(
    connect: HookConnectInput
    connectOrCreate: HookConnectOrCreateInput
    create: HookRelationInput
    delete: HookDeleteInput
    disconnect: HookDisconnectInput
    update: HookUpdateInput
    where: HookWhere
  ): UpdateHooksMutationResponse!
  updateInterfaceTypes(
    connect: InterfaceTypeConnectInput
    connectOrCreate: InterfaceTypeConnectOrCreateInput
    create: InterfaceTypeRelationInput
    delete: InterfaceTypeDeleteInput
    disconnect: InterfaceTypeDisconnectInput
    update: InterfaceTypeUpdateInput
    where: InterfaceTypeWhere
  ): UpdateInterfaceTypesMutationResponse!
  updateLambdaTypes(
    connect: LambdaTypeConnectInput
    connectOrCreate: LambdaTypeConnectOrCreateInput
    create: LambdaTypeRelationInput
    delete: LambdaTypeDeleteInput
    disconnect: LambdaTypeDisconnectInput
    update: LambdaTypeUpdateInput
    where: LambdaTypeWhere
  ): UpdateLambdaTypesMutationResponse!
  updatePageTypes(
    connect: PageTypeConnectInput
    connectOrCreate: PageTypeConnectOrCreateInput
    create: PageTypeRelationInput
    delete: PageTypeDeleteInput
    disconnect: PageTypeDisconnectInput
    update: PageTypeUpdateInput
    where: PageTypeWhere
  ): UpdatePageTypesMutationResponse!
  updatePages(
    connect: PageConnectInput
    connectOrCreate: PageConnectOrCreateInput
    create: PageRelationInput
    delete: PageDeleteInput
    disconnect: PageDisconnectInput
    update: PageUpdateInput
    where: PageWhere
  ): UpdatePagesMutationResponse!
  updatePrimitiveTypes(
    connect: PrimitiveTypeConnectInput
    connectOrCreate: PrimitiveTypeConnectOrCreateInput
    create: PrimitiveTypeRelationInput
    delete: PrimitiveTypeDeleteInput
    disconnect: PrimitiveTypeDisconnectInput
    update: PrimitiveTypeUpdateInput
    where: PrimitiveTypeWhere
  ): UpdatePrimitiveTypesMutationResponse!
  updatePropMapBindings(
    connect: PropMapBindingConnectInput
    connectOrCreate: PropMapBindingConnectOrCreateInput
    create: PropMapBindingRelationInput
    delete: PropMapBindingDeleteInput
    disconnect: PropMapBindingDisconnectInput
    update: PropMapBindingUpdateInput
    where: PropMapBindingWhere
  ): UpdatePropMapBindingsMutationResponse!
  updateProps(
    update: PropUpdateInput
    where: PropWhere
  ): UpdatePropsMutationResponse!
  updateReactNodeTypes(
    connect: ReactNodeTypeConnectInput
    connectOrCreate: ReactNodeTypeConnectOrCreateInput
    create: ReactNodeTypeRelationInput
    delete: ReactNodeTypeDeleteInput
    disconnect: ReactNodeTypeDisconnectInput
    update: ReactNodeTypeUpdateInput
    where: ReactNodeTypeWhere
  ): UpdateReactNodeTypesMutationResponse!
  updateRenderPropsTypes(
    connect: RenderPropsTypeConnectInput
    connectOrCreate: RenderPropsTypeConnectOrCreateInput
    create: RenderPropsTypeRelationInput
    delete: RenderPropsTypeDeleteInput
    disconnect: RenderPropsTypeDisconnectInput
    update: RenderPropsTypeUpdateInput
    where: RenderPropsTypeWhere
  ): UpdateRenderPropsTypesMutationResponse!
  updateResetDatabaseMutationResponses(
    update: ResetDatabaseMutationResponseUpdateInput
    where: ResetDatabaseMutationResponseWhere
  ): UpdateResetDatabaseMutationResponsesMutationResponse!
  updateResources(
    connect: ResourceConnectInput
    connectOrCreate: ResourceConnectOrCreateInput
    create: ResourceRelationInput
    delete: ResourceDeleteInput
    disconnect: ResourceDisconnectInput
    update: ResourceUpdateInput
    where: ResourceWhere
  ): UpdateResourcesMutationResponse!
  updateStores(
    connect: StoreConnectInput
    connectOrCreate: StoreConnectOrCreateInput
    create: StoreRelationInput
    delete: StoreDeleteInput
    disconnect: StoreDisconnectInput
    update: StoreUpdateInput
    where: StoreWhere
  ): UpdateStoresMutationResponse!
  updateTags(
    connect: TagConnectInput
    connectOrCreate: TagConnectOrCreateInput
    create: TagRelationInput
    delete: TagDeleteInput
    disconnect: TagDisconnectInput
    update: TagUpdateInput
    where: TagWhere
  ): UpdateTagsMutationResponse!
  updateTypeReferences(
    update: TypeReferenceUpdateInput
    where: TypeReferenceWhere
  ): UpdateTypeReferencesMutationResponse!
  updateUnionTypes(
    connect: UnionTypeConnectInput
    connectOrCreate: UnionTypeConnectOrCreateInput
    create: UnionTypeRelationInput
    delete: UnionTypeDeleteInput
    disconnect: UnionTypeDisconnectInput
    update: UnionTypeUpdateInput
    where: UnionTypeWhere
  ): UpdateUnionTypesMutationResponse!
  updateVercelDomainConfigData(
    update: VercelDomainConfigDataUpdateInput
    where: VercelDomainConfigDataWhere
  ): UpdateVercelDomainConfigDataMutationResponse!
  updateVercelProjectDomainData(
    update: VercelProjectDomainDataUpdateInput
    where: VercelProjectDomainDataWhere
  ): UpdateVercelProjectDomainDataMutationResponse!
  upsertField(
    field: FieldCreateInput!
    fieldTypeId: ID!
    interfaceTypeId: ID!
  ): InterfaceType!
}

interface OwnedBy {
  data: String!
  value: String
}

input OwnedByCreateInput {
  data: String! = "{}"
  value: String
}

input OwnedBySort {
  data: SortDirection
  value: SortDirection
}

input OwnedByUpdateInput {
  data: String
  value: String
}

input OwnedByWhere {
  AND: [OwnedByWhere!]
  OR: [OwnedByWhere!]
  data: String
  data_CONTAINS: String
  data_ENDS_WITH: String
  data_IN: [String!]
  data_NOT: String
  data_NOT_CONTAINS: String
  data_NOT_ENDS_WITH: String
  data_NOT_IN: [String!]
  data_NOT_STARTS_WITH: String
  data_STARTS_WITH: String
  value: String
  value_CONTAINS: String
  value_ENDS_WITH: String
  value_IN: [String]
  value_NOT: String
  value_NOT_CONTAINS: String
  value_NOT_ENDS_WITH: String
  value_NOT_IN: [String]
  value_NOT_STARTS_WITH: String
  value_STARTS_WITH: String
}

type Page {
  app(directed: Boolean = true, options: AppOptions, where: AppWhere): App!
  appAggregate(
    directed: Boolean = true
    where: AppWhere
  ): PageAppAppAggregationSelection
  appConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PageAppConnectionSort!]
    where: PageAppConnectionWhere
  ): PageAppConnection!
  id: ID!
  name: String!
  rootElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  rootElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PageElementRootElementAggregationSelection
  rootElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PageRootElementConnectionSort!]
    where: PageRootElementConnectionWhere
  ): PageRootElementConnection!
  slug: String!
}

type PageAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

input PageAppAggregateInput {
  AND: [PageAppAggregateInput!]
  OR: [PageAppAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageAppNodeAggregationWhereInput
}

type PageAppAppAggregationSelection {
  count: Int!
  node: PageAppAppNodeAggregateSelection
}

type PageAppAppNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

input PageAppConnectFieldInput {
  connect: AppConnectInput
  where: AppConnectWhere
}

input PageAppConnectOrCreateFieldInput {
  onCreate: PageAppConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input PageAppConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type PageAppConnection {
  edges: [PageAppRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageAppConnectionSort {
  node: AppSort
}

input PageAppConnectionWhere {
  AND: [PageAppConnectionWhere!]
  OR: [PageAppConnectionWhere!]
  node: AppWhere
  node_NOT: AppWhere
}

input PageAppCreateFieldInput {
  node: AppCreateInput!
}

input PageAppDeleteFieldInput {
  delete: AppDeleteInput
  where: PageAppConnectionWhere
}

input PageAppDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: PageAppConnectionWhere
}

input PageAppFieldInput {
  connect: PageAppConnectFieldInput
  connectOrCreate: PageAppConnectOrCreateFieldInput
  create: PageAppCreateFieldInput
}

input PageAppNodeAggregationWhereInput {
  AND: [PageAppNodeAggregationWhereInput!]
  OR: [PageAppNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  slug_AVERAGE_EQUAL: Float
  slug_AVERAGE_GT: Float
  slug_AVERAGE_GTE: Float
  slug_AVERAGE_LT: Float
  slug_AVERAGE_LTE: Float
  slug_EQUAL: String
  slug_GT: Int
  slug_GTE: Int
  slug_LONGEST_EQUAL: Int
  slug_LONGEST_GT: Int
  slug_LONGEST_GTE: Int
  slug_LONGEST_LT: Int
  slug_LONGEST_LTE: Int
  slug_LT: Int
  slug_LTE: Int
  slug_SHORTEST_EQUAL: Int
  slug_SHORTEST_GT: Int
  slug_SHORTEST_GTE: Int
  slug_SHORTEST_LT: Int
  slug_SHORTEST_LTE: Int
}

type PageAppRelationship {
  cursor: String!
  node: App!
}

input PageAppUpdateConnectionInput {
  node: AppUpdateInput
}

input PageAppUpdateFieldInput {
  connect: PageAppConnectFieldInput
  connectOrCreate: PageAppConnectOrCreateFieldInput
  create: PageAppCreateFieldInput
  delete: PageAppDeleteFieldInput
  disconnect: PageAppDisconnectFieldInput
  update: PageAppUpdateConnectionInput
  where: PageAppConnectionWhere
}

input PageConnectInput {
  app: PageAppConnectFieldInput
  rootElement: PageRootElementConnectFieldInput
}

input PageConnectOrCreateInput {
  app: PageAppConnectOrCreateFieldInput
  rootElement: PageRootElementConnectOrCreateFieldInput
}

input PageConnectOrCreateWhere {
  node: PageUniqueWhere!
}

input PageConnectWhere {
  node: PageWhere!
}

input PageCreateInput {
  app: PageAppFieldInput
  id: ID!
  name: String!
  rootElement: PageRootElementFieldInput
  slug: String!
}

input PageDeleteInput {
  app: PageAppDeleteFieldInput
  rootElement: PageRootElementDeleteFieldInput
}

input PageDisconnectInput {
  app: PageAppDisconnectFieldInput
  rootElement: PageRootElementDisconnectFieldInput
}

type PageEdge {
  cursor: String!
  node: Page!
}

type PageElementRootElementAggregationSelection {
  count: Int!
  node: PageElementRootElementNodeAggregateSelection
}

type PageElementRootElementNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

"""
Pagination information (Relay)
"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PageOnCreateInput {
  id: ID!
  name: String!
  slug: String!
}

input PageOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PageSort objects to sort Pages by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PageSort!]
}

input PageRelationInput {
  app: PageAppCreateFieldInput
  rootElement: PageRootElementCreateFieldInput
}

input PageRootElementAggregateInput {
  AND: [PageRootElementAggregateInput!]
  OR: [PageRootElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PageRootElementNodeAggregationWhereInput
}

input PageRootElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input PageRootElementConnectOrCreateFieldInput {
  onCreate: PageRootElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PageRootElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PageRootElementConnection {
  edges: [PageRootElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageRootElementConnectionSort {
  node: ElementSort
}

input PageRootElementConnectionWhere {
  AND: [PageRootElementConnectionWhere!]
  OR: [PageRootElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input PageRootElementCreateFieldInput {
  node: ElementCreateInput!
}

input PageRootElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: PageRootElementConnectionWhere
}

input PageRootElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PageRootElementConnectionWhere
}

input PageRootElementFieldInput {
  connect: PageRootElementConnectFieldInput
  connectOrCreate: PageRootElementConnectOrCreateFieldInput
  create: PageRootElementCreateFieldInput
}

input PageRootElementNodeAggregationWhereInput {
  AND: [PageRootElementNodeAggregationWhereInput!]
  OR: [PageRootElementNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type PageRootElementRelationship {
  cursor: String!
  node: Element!
}

input PageRootElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input PageRootElementUpdateFieldInput {
  connect: PageRootElementConnectFieldInput
  connectOrCreate: PageRootElementConnectOrCreateFieldInput
  create: PageRootElementCreateFieldInput
  delete: PageRootElementDeleteFieldInput
  disconnect: PageRootElementDisconnectFieldInput
  update: PageRootElementUpdateConnectionInput
  where: PageRootElementConnectionWhere
}

"""
Fields to sort Pages by. The order in which sorts are applied is not guaranteed when specifying many fields in one PageSort object.
"""
input PageSort {
  id: SortDirection
  name: SortDirection
  slug: SortDirection
}

"""
Allows picking a page from the list of pages
"""
type PageType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): PageTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type PageTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PageTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input PageTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input PageTypeConnectOrCreateWhere {
  node: PageTypeUniqueWhere!
}

input PageTypeConnectWhere {
  node: PageTypeWhere!
}

input PageTypeCreateInput {
  id: ID!
  kind: TypeKind! = PageType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input PageTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input PageTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type PageTypeEdge {
  cursor: String!
  node: PageType!
}

input PageTypeOnCreateInput {
  id: ID!
  name: String!
}

input PageTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PageTypeSort objects to sort PageTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PageTypeSort!]
}

input PageTypeOwnerAggregateInput {
  AND: [PageTypeOwnerAggregateInput!]
  OR: [PageTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: PageTypeOwnerEdgeAggregationWhereInput
  node: PageTypeOwnerNodeAggregationWhereInput
}

input PageTypeOwnerEdgeAggregationWhereInput {
  AND: [PageTypeOwnerEdgeAggregationWhereInput!]
  OR: [PageTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input PageTypeOwnerNodeAggregationWhereInput {
  AND: [PageTypeOwnerNodeAggregationWhereInput!]
  OR: [PageTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input PageTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort PageTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one PageTypeSort object.
"""
input PageTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input PageTypeUniqueWhere {
  id: ID
}

input PageTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type PageTypeUserOwnerAggregationSelection {
  count: Int!
  edge: PageTypeUserOwnerEdgeAggregateSelection
  node: PageTypeUserOwnerNodeAggregateSelection
}

type PageTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type PageTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input PageTypeWhere {
  AND: [PageTypeWhere!]
  OR: [PageTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: PageTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type PageTypesConnection {
  edges: [PageTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageUniqueWhere {
  id: ID
}

input PageUpdateInput {
  app: PageAppUpdateFieldInput
  id: ID
  name: String
  rootElement: PageRootElementUpdateFieldInput
  slug: String
}

input PageWhere {
  AND: [PageWhere!]
  OR: [PageWhere!]
  app: AppWhere
  appAggregate: PageAppAggregateInput
  appConnection: PageAppConnectionWhere
  appConnection_NOT: PageAppConnectionWhere
  app_NOT: AppWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  rootElement: ElementWhere
  rootElementAggregate: PageRootElementAggregateInput
  rootElementConnection: PageRootElementConnectionWhere
  rootElementConnection_NOT: PageRootElementConnectionWhere
  rootElement_NOT: ElementWhere
  slug: String
  slug_CONTAINS: String
  slug_ENDS_WITH: String
  slug_IN: [String!]
  slug_NOT: String
  slug_NOT_CONTAINS: String
  slug_NOT_ENDS_WITH: String
  slug_NOT_IN: [String!]
  slug_NOT_STARTS_WITH: String
  slug_STARTS_WITH: String
}

type PagesConnection {
  edges: [PageEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Base atomic building block of the type system. Represents primitive types - String, Integer, Float, Boolean
"""
type PrimitiveType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): PrimitiveTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
  primitiveKind: PrimitiveTypeKind!
}

type PrimitiveTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input PrimitiveTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input PrimitiveTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input PrimitiveTypeConnectOrCreateWhere {
  node: PrimitiveTypeUniqueWhere!
}

input PrimitiveTypeConnectWhere {
  node: PrimitiveTypeWhere!
}

input PrimitiveTypeCreateInput {
  id: ID!
  kind: TypeKind! = PrimitiveType
  name: String!
  owner: TypeBaseOwnerFieldInput
  primitiveKind: PrimitiveTypeKind!
}

input PrimitiveTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input PrimitiveTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type PrimitiveTypeEdge {
  cursor: String!
  node: PrimitiveType!
}

enum PrimitiveTypeKind {
  Boolean
  Float
  Integer
  String
}

input PrimitiveTypeOnCreateInput {
  id: ID!
  name: String!
}

input PrimitiveTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PrimitiveTypeSort objects to sort PrimitiveTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PrimitiveTypeSort!]
}

input PrimitiveTypeOwnerAggregateInput {
  AND: [PrimitiveTypeOwnerAggregateInput!]
  OR: [PrimitiveTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: PrimitiveTypeOwnerEdgeAggregationWhereInput
  node: PrimitiveTypeOwnerNodeAggregationWhereInput
}

input PrimitiveTypeOwnerEdgeAggregationWhereInput {
  AND: [PrimitiveTypeOwnerEdgeAggregationWhereInput!]
  OR: [PrimitiveTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input PrimitiveTypeOwnerNodeAggregationWhereInput {
  AND: [PrimitiveTypeOwnerNodeAggregationWhereInput!]
  OR: [PrimitiveTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input PrimitiveTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort PrimitiveTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one PrimitiveTypeSort object.
"""
input PrimitiveTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
  primitiveKind: SortDirection
}

input PrimitiveTypeUniqueWhere {
  id: ID
  name: String
  primitiveKind: PrimitiveTypeKind
}

input PrimitiveTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
  primitiveKind: PrimitiveTypeKind
}

type PrimitiveTypeUserOwnerAggregationSelection {
  count: Int!
  edge: PrimitiveTypeUserOwnerEdgeAggregateSelection
  node: PrimitiveTypeUserOwnerNodeAggregateSelection
}

type PrimitiveTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type PrimitiveTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input PrimitiveTypeWhere {
  AND: [PrimitiveTypeWhere!]
  OR: [PrimitiveTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: PrimitiveTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
  primitiveKind: PrimitiveTypeKind
  primitiveKind_IN: [PrimitiveTypeKind!]
  primitiveKind_NOT: PrimitiveTypeKind
  primitiveKind_NOT_IN: [PrimitiveTypeKind!]
}

type PrimitiveTypesConnection {
  edges: [PrimitiveTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Prop {
  data: String!
  id: ID!
}

type PropAggregateSelection {
  count: Int!
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input PropConnectOrCreateWhere {
  node: PropUniqueWhere!
}

input PropConnectWhere {
  node: PropWhere!
}

input PropCreateInput {
  data: String! = "{}"
}

type PropEdge {
  cursor: String!
  node: Prop!
}

type PropMapBinding {
  element(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element!
  elementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PropMapBindingElementElementAggregationSelection
  elementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PropMapBindingElementConnectionSort!]
    where: PropMapBindingElementConnectionWhere
  ): PropMapBindingElementConnection!
  id: ID!
  sourceKey: String!
  targetElement(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): Element
  targetElementAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): PropMapBindingElementTargetElementAggregationSelection
  targetElementConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [PropMapBindingTargetElementConnectionSort!]
    where: PropMapBindingTargetElementConnectionWhere
  ): PropMapBindingTargetElementConnection!
  targetKey: String!
}

type PropMapBindingAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  sourceKey: StringAggregateSelectionNonNullable!
  targetKey: StringAggregateSelectionNonNullable!
}

input PropMapBindingConnectInput {
  element: PropMapBindingElementConnectFieldInput
  targetElement: PropMapBindingTargetElementConnectFieldInput
}

input PropMapBindingConnectOrCreateInput {
  element: PropMapBindingElementConnectOrCreateFieldInput
  targetElement: PropMapBindingTargetElementConnectOrCreateFieldInput
}

input PropMapBindingConnectOrCreateWhere {
  node: PropMapBindingUniqueWhere!
}

input PropMapBindingConnectWhere {
  node: PropMapBindingWhere!
}

input PropMapBindingCreateInput {
  element: PropMapBindingElementFieldInput
  sourceKey: String!
  targetElement: PropMapBindingTargetElementFieldInput
  targetKey: String!
}

input PropMapBindingDeleteInput {
  element: PropMapBindingElementDeleteFieldInput
  targetElement: PropMapBindingTargetElementDeleteFieldInput
}

input PropMapBindingDisconnectInput {
  element: PropMapBindingElementDisconnectFieldInput
  targetElement: PropMapBindingTargetElementDisconnectFieldInput
}

type PropMapBindingEdge {
  cursor: String!
  node: PropMapBinding!
}

input PropMapBindingElementAggregateInput {
  AND: [PropMapBindingElementAggregateInput!]
  OR: [PropMapBindingElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PropMapBindingElementNodeAggregationWhereInput
}

input PropMapBindingElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input PropMapBindingElementConnectOrCreateFieldInput {
  onCreate: PropMapBindingElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PropMapBindingElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PropMapBindingElementConnection {
  edges: [PropMapBindingElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PropMapBindingElementConnectionSort {
  node: ElementSort
}

input PropMapBindingElementConnectionWhere {
  AND: [PropMapBindingElementConnectionWhere!]
  OR: [PropMapBindingElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input PropMapBindingElementCreateFieldInput {
  node: ElementCreateInput!
}

input PropMapBindingElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: PropMapBindingElementConnectionWhere
}

input PropMapBindingElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PropMapBindingElementConnectionWhere
}

type PropMapBindingElementElementAggregationSelection {
  count: Int!
  node: PropMapBindingElementElementNodeAggregateSelection
}

type PropMapBindingElementElementNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input PropMapBindingElementFieldInput {
  connect: PropMapBindingElementConnectFieldInput
  connectOrCreate: PropMapBindingElementConnectOrCreateFieldInput
  create: PropMapBindingElementCreateFieldInput
}

input PropMapBindingElementNodeAggregationWhereInput {
  AND: [PropMapBindingElementNodeAggregationWhereInput!]
  OR: [PropMapBindingElementNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type PropMapBindingElementRelationship {
  cursor: String!
  node: Element!
}

type PropMapBindingElementTargetElementAggregationSelection {
  count: Int!
  node: PropMapBindingElementTargetElementNodeAggregateSelection
}

type PropMapBindingElementTargetElementNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input PropMapBindingElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input PropMapBindingElementUpdateFieldInput {
  connect: PropMapBindingElementConnectFieldInput
  connectOrCreate: PropMapBindingElementConnectOrCreateFieldInput
  create: PropMapBindingElementCreateFieldInput
  delete: PropMapBindingElementDeleteFieldInput
  disconnect: PropMapBindingElementDisconnectFieldInput
  update: PropMapBindingElementUpdateConnectionInput
  where: PropMapBindingElementConnectionWhere
}

input PropMapBindingOnCreateInput {
  sourceKey: String!
  targetKey: String!
}

input PropMapBindingOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PropMapBindingSort objects to sort PropMapBindings by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PropMapBindingSort!]
}

input PropMapBindingRelationInput {
  element: PropMapBindingElementCreateFieldInput
  targetElement: PropMapBindingTargetElementCreateFieldInput
}

"""
Fields to sort PropMapBindings by. The order in which sorts are applied is not guaranteed when specifying many fields in one PropMapBindingSort object.
"""
input PropMapBindingSort {
  id: SortDirection
  sourceKey: SortDirection
  targetKey: SortDirection
}

input PropMapBindingTargetElementAggregateInput {
  AND: [PropMapBindingTargetElementAggregateInput!]
  OR: [PropMapBindingTargetElementAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PropMapBindingTargetElementNodeAggregationWhereInput
}

input PropMapBindingTargetElementConnectFieldInput {
  connect: ElementConnectInput
  where: ElementConnectWhere
}

input PropMapBindingTargetElementConnectOrCreateFieldInput {
  onCreate: PropMapBindingTargetElementConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input PropMapBindingTargetElementConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type PropMapBindingTargetElementConnection {
  edges: [PropMapBindingTargetElementRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PropMapBindingTargetElementConnectionSort {
  node: ElementSort
}

input PropMapBindingTargetElementConnectionWhere {
  AND: [PropMapBindingTargetElementConnectionWhere!]
  OR: [PropMapBindingTargetElementConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input PropMapBindingTargetElementCreateFieldInput {
  node: ElementCreateInput!
}

input PropMapBindingTargetElementDeleteFieldInput {
  delete: ElementDeleteInput
  where: PropMapBindingTargetElementConnectionWhere
}

input PropMapBindingTargetElementDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: PropMapBindingTargetElementConnectionWhere
}

input PropMapBindingTargetElementFieldInput {
  connect: PropMapBindingTargetElementConnectFieldInput
  connectOrCreate: PropMapBindingTargetElementConnectOrCreateFieldInput
  create: PropMapBindingTargetElementCreateFieldInput
}

input PropMapBindingTargetElementNodeAggregationWhereInput {
  AND: [PropMapBindingTargetElementNodeAggregationWhereInput!]
  OR: [PropMapBindingTargetElementNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type PropMapBindingTargetElementRelationship {
  cursor: String!
  node: Element!
}

input PropMapBindingTargetElementUpdateConnectionInput {
  node: ElementUpdateInput
}

input PropMapBindingTargetElementUpdateFieldInput {
  connect: PropMapBindingTargetElementConnectFieldInput
  connectOrCreate: PropMapBindingTargetElementConnectOrCreateFieldInput
  create: PropMapBindingTargetElementCreateFieldInput
  delete: PropMapBindingTargetElementDeleteFieldInput
  disconnect: PropMapBindingTargetElementDisconnectFieldInput
  update: PropMapBindingTargetElementUpdateConnectionInput
  where: PropMapBindingTargetElementConnectionWhere
}

input PropMapBindingUniqueWhere {
  id: ID
}

input PropMapBindingUpdateInput {
  element: PropMapBindingElementUpdateFieldInput
  sourceKey: String
  targetElement: PropMapBindingTargetElementUpdateFieldInput
  targetKey: String
}

input PropMapBindingWhere {
  AND: [PropMapBindingWhere!]
  OR: [PropMapBindingWhere!]
  element: ElementWhere
  elementAggregate: PropMapBindingElementAggregateInput
  elementConnection: PropMapBindingElementConnectionWhere
  elementConnection_NOT: PropMapBindingElementConnectionWhere
  element_NOT: ElementWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  sourceKey: String
  sourceKey_CONTAINS: String
  sourceKey_ENDS_WITH: String
  sourceKey_IN: [String!]
  sourceKey_NOT: String
  sourceKey_NOT_CONTAINS: String
  sourceKey_NOT_ENDS_WITH: String
  sourceKey_NOT_IN: [String!]
  sourceKey_NOT_STARTS_WITH: String
  sourceKey_STARTS_WITH: String
  targetElement: ElementWhere
  targetElementAggregate: PropMapBindingTargetElementAggregateInput
  targetElementConnection: PropMapBindingTargetElementConnectionWhere
  targetElementConnection_NOT: PropMapBindingTargetElementConnectionWhere
  targetElement_NOT: ElementWhere
  targetKey: String
  targetKey_CONTAINS: String
  targetKey_ENDS_WITH: String
  targetKey_IN: [String!]
  targetKey_NOT: String
  targetKey_NOT_CONTAINS: String
  targetKey_NOT_ENDS_WITH: String
  targetKey_NOT_IN: [String!]
  targetKey_NOT_STARTS_WITH: String
  targetKey_STARTS_WITH: String
}

type PropMapBindingsConnection {
  edges: [PropMapBindingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PropOnCreateInput {
  data: String! = "{}"
}

input PropOptions {
  limit: Int
  offset: Int

  """
  Specify one or more PropSort objects to sort Props by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PropSort!]
}

"""
Fields to sort Props by. The order in which sorts are applied is not guaranteed when specifying many fields in one PropSort object.
"""
input PropSort {
  data: SortDirection
  id: SortDirection
}

input PropUniqueWhere {
  id: ID
}

input PropUpdateInput {
  data: String
}

input PropWhere {
  AND: [PropWhere!]
  OR: [PropWhere!]
  data: String
  data_CONTAINS: String
  data_ENDS_WITH: String
  data_IN: [String!]
  data_NOT: String
  data_NOT_CONTAINS: String
  data_NOT_ENDS_WITH: String
  data_NOT_IN: [String!]
  data_NOT_STARTS_WITH: String
  data_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
}

type PropsConnection {
  edges: [PropEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  actionTypes(
    options: ActionTypeOptions
    where: ActionTypeWhere
  ): [ActionType!]!
  actionTypesAggregate(where: ActionTypeWhere): ActionTypeAggregateSelection!
  actionTypesConnection(
    after: String
    first: Int
    sort: [ActionTypeSort]
    where: ActionTypeWhere
  ): ActionTypesConnection!
  apiActions(options: ApiActionOptions, where: ApiActionWhere): [ApiAction!]!
  apiActionsAggregate(where: ApiActionWhere): ApiActionAggregateSelection!
  apiActionsConnection(
    after: String
    first: Int
    sort: [ApiActionSort]
    where: ApiActionWhere
  ): ApiActionsConnection!
  appTypes(options: AppTypeOptions, where: AppTypeWhere): [AppType!]!
  appTypesAggregate(where: AppTypeWhere): AppTypeAggregateSelection!
  appTypesConnection(
    after: String
    first: Int
    sort: [AppTypeSort]
    where: AppTypeWhere
  ): AppTypesConnection!
  apps(options: AppOptions, where: AppWhere): [App!]!
  appsAggregate(where: AppWhere): AppAggregateSelection!
  appsConnection(
    after: String
    first: Int
    sort: [AppSort]
    where: AppWhere
  ): AppsConnection!
  arrayTypes(options: ArrayTypeOptions, where: ArrayTypeWhere): [ArrayType!]!
  arrayTypesAggregate(where: ArrayTypeWhere): ArrayTypeAggregateSelection!
  arrayTypesConnection(
    after: String
    first: Int
    sort: [ArrayTypeSort]
    where: ArrayTypeWhere
  ): ArrayTypesConnection!
  atoms(options: AtomOptions, where: AtomWhere): [Atom!]!
  atomsAggregate(where: AtomWhere): AtomAggregateSelection!
  atomsConnection(
    after: String
    first: Int
    sort: [AtomSort]
    where: AtomWhere
  ): AtomsConnection!
  codeActions(
    options: CodeActionOptions
    where: CodeActionWhere
  ): [CodeAction!]!
  codeActionsAggregate(where: CodeActionWhere): CodeActionAggregateSelection!
  codeActionsConnection(
    after: String
    first: Int
    sort: [CodeActionSort]
    where: CodeActionWhere
  ): CodeActionsConnection!
  codeMirrorTypes(
    options: CodeMirrorTypeOptions
    where: CodeMirrorTypeWhere
  ): [CodeMirrorType!]!
  codeMirrorTypesAggregate(
    where: CodeMirrorTypeWhere
  ): CodeMirrorTypeAggregateSelection!
  codeMirrorTypesConnection(
    after: String
    first: Int
    sort: [CodeMirrorTypeSort]
    where: CodeMirrorTypeWhere
  ): CodeMirrorTypesConnection!
  components(options: ComponentOptions, where: ComponentWhere): [Component!]!
  componentsAggregate(where: ComponentWhere): ComponentAggregateSelection!
  componentsConnection(
    after: String
    first: Int
    sort: [ComponentSort]
    where: ComponentWhere
  ): ComponentsConnection!
  createInfos(
    options: CreateInfoOptions
    where: CreateInfoWhere
  ): [CreateInfo!]!
  createInfosAggregate(where: CreateInfoWhere): CreateInfoAggregateSelection!
  createInfosConnection(
    after: String
    first: Int
    sort: [CreateInfoSort]
    where: CreateInfoWhere
  ): CreateInfosConnection!
  deleteInfos(
    options: DeleteInfoOptions
    where: DeleteInfoWhere
  ): [DeleteInfo!]!
  deleteInfosAggregate(where: DeleteInfoWhere): DeleteInfoAggregateSelection!
  deleteInfosConnection(
    after: String
    first: Int
    sort: [DeleteInfoSort]
    where: DeleteInfoWhere
  ): DeleteInfosConnection!
  domains(options: DomainOptions, where: DomainWhere): [Domain!]!
  domainsAggregate(where: DomainWhere): DomainAggregateSelection!
  domainsConnection(
    after: String
    first: Int
    sort: [DomainSort]
    where: DomainWhere
  ): DomainsConnection!
  elementTypes(
    options: ElementTypeOptions
    where: ElementTypeWhere
  ): [ElementType!]!
  elementTypesAggregate(where: ElementTypeWhere): ElementTypeAggregateSelection!
  elementTypesConnection(
    after: String
    first: Int
    sort: [ElementTypeSort]
    where: ElementTypeWhere
  ): ElementTypesConnection!
  elements(options: ElementOptions, where: ElementWhere): [Element!]!
  elementsAggregate(where: ElementWhere): ElementAggregateSelection!
  elementsConnection(
    after: String
    first: Int
    sort: [ElementSort]
    where: ElementWhere
  ): ElementsConnection!
  enumTypeValues(
    options: EnumTypeValueOptions
    where: EnumTypeValueWhere
  ): [EnumTypeValue!]!
  enumTypeValuesAggregate(
    where: EnumTypeValueWhere
  ): EnumTypeValueAggregateSelection!
  enumTypeValuesConnection(
    after: String
    first: Int
    sort: [EnumTypeValueSort]
    where: EnumTypeValueWhere
  ): EnumTypeValuesConnection!
  enumTypes(options: EnumTypeOptions, where: EnumTypeWhere): [EnumType!]!
  enumTypesAggregate(where: EnumTypeWhere): EnumTypeAggregateSelection!
  enumTypesConnection(
    after: String
    first: Int
    sort: [EnumTypeSort]
    where: EnumTypeWhere
  ): EnumTypesConnection!

  """
  Returns a list of all Type and Atom entities that reference the type with the given id
  This could be different types of relationships like Atom-Api, ArrayType-itemType, InterfaceType-field, UnionType-unionTypeChild
  """
  getTypeReferences(typeId: ID!): [TypeReference!]
  hooks(options: HookOptions, where: HookWhere): [Hook!]!
  hooksAggregate(where: HookWhere): HookAggregateSelection!
  hooksConnection(
    after: String
    first: Int
    sort: [HookSort]
    where: HookWhere
  ): HooksConnection!
  interfaceTypes(
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): [InterfaceType!]!
  interfaceTypesAggregate(
    where: InterfaceTypeWhere
  ): InterfaceTypeAggregateSelection!
  interfaceTypesConnection(
    after: String
    first: Int
    sort: [InterfaceTypeSort]
    where: InterfaceTypeWhere
  ): InterfaceTypesConnection!

  """
  Does a recursive check to see if the parent type (parentTypeId) contains the descendant type (descendantTypeId) at any level of nesting. Useful for checking for recursion
  """
  isTypeDescendantOf(descendantTypeId: ID!, parentTypeId: ID!): Boolean
  lambdaTypes(
    options: LambdaTypeOptions
    where: LambdaTypeWhere
  ): [LambdaType!]!
  lambdaTypesAggregate(where: LambdaTypeWhere): LambdaTypeAggregateSelection!
  lambdaTypesConnection(
    after: String
    first: Int
    sort: [LambdaTypeSort]
    where: LambdaTypeWhere
  ): LambdaTypesConnection!
  pageTypes(options: PageTypeOptions, where: PageTypeWhere): [PageType!]!
  pageTypesAggregate(where: PageTypeWhere): PageTypeAggregateSelection!
  pageTypesConnection(
    after: String
    first: Int
    sort: [PageTypeSort]
    where: PageTypeWhere
  ): PageTypesConnection!
  pages(options: PageOptions, where: PageWhere): [Page!]!
  pagesAggregate(where: PageWhere): PageAggregateSelection!
  pagesConnection(
    after: String
    first: Int
    sort: [PageSort]
    where: PageWhere
  ): PagesConnection!
  primitiveTypes(
    options: PrimitiveTypeOptions
    where: PrimitiveTypeWhere
  ): [PrimitiveType!]!
  primitiveTypesAggregate(
    where: PrimitiveTypeWhere
  ): PrimitiveTypeAggregateSelection!
  primitiveTypesConnection(
    after: String
    first: Int
    sort: [PrimitiveTypeSort]
    where: PrimitiveTypeWhere
  ): PrimitiveTypesConnection!
  propMapBindings(
    options: PropMapBindingOptions
    where: PropMapBindingWhere
  ): [PropMapBinding!]!
  propMapBindingsAggregate(
    where: PropMapBindingWhere
  ): PropMapBindingAggregateSelection!
  propMapBindingsConnection(
    after: String
    first: Int
    sort: [PropMapBindingSort]
    where: PropMapBindingWhere
  ): PropMapBindingsConnection!
  props(options: PropOptions, where: PropWhere): [Prop!]!
  propsAggregate(where: PropWhere): PropAggregateSelection!
  propsConnection(
    after: String
    first: Int
    sort: [PropSort]
    where: PropWhere
  ): PropsConnection!
  reactNodeTypes(
    options: ReactNodeTypeOptions
    where: ReactNodeTypeWhere
  ): [ReactNodeType!]!
  reactNodeTypesAggregate(
    where: ReactNodeTypeWhere
  ): ReactNodeTypeAggregateSelection!
  reactNodeTypesConnection(
    after: String
    first: Int
    sort: [ReactNodeTypeSort]
    where: ReactNodeTypeWhere
  ): ReactNodeTypesConnection!
  renderPropsTypes(
    options: RenderPropsTypeOptions
    where: RenderPropsTypeWhere
  ): [RenderPropsType!]!
  renderPropsTypesAggregate(
    where: RenderPropsTypeWhere
  ): RenderPropsTypeAggregateSelection!
  renderPropsTypesConnection(
    after: String
    first: Int
    sort: [RenderPropsTypeSort]
    where: RenderPropsTypeWhere
  ): RenderPropsTypesConnection!
  resetDatabaseMutationResponses(
    options: ResetDatabaseMutationResponseOptions
    where: ResetDatabaseMutationResponseWhere
  ): [ResetDatabaseMutationResponse!]!
  resetDatabaseMutationResponsesAggregate(
    where: ResetDatabaseMutationResponseWhere
  ): ResetDatabaseMutationResponseAggregateSelection!
  resetDatabaseMutationResponsesConnection(
    after: String
    first: Int
    sort: [ResetDatabaseMutationResponseSort]
    where: ResetDatabaseMutationResponseWhere
  ): ResetDatabaseMutationResponsesConnection!
  resources(options: ResourceOptions, where: ResourceWhere): [Resource!]!
  resourcesAggregate(where: ResourceWhere): ResourceAggregateSelection!
  resourcesConnection(
    after: String
    first: Int
    sort: [ResourceSort]
    where: ResourceWhere
  ): ResourcesConnection!
  stores(options: StoreOptions, where: StoreWhere): [Store!]!
  storesAggregate(where: StoreWhere): StoreAggregateSelection!
  storesConnection(
    after: String
    first: Int
    sort: [StoreSort]
    where: StoreWhere
  ): StoresConnection!
  tags(options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(where: TagWhere): TagAggregateSelection!
  tagsConnection(
    after: String
    first: Int
    sort: [TagSort]
    where: TagWhere
  ): TagsConnection!
  typeReferences(
    options: TypeReferenceOptions
    where: TypeReferenceWhere
  ): [TypeReference!]!
  typeReferencesAggregate(
    where: TypeReferenceWhere
  ): TypeReferenceAggregateSelection!
  typeReferencesConnection(
    after: String
    first: Int
    sort: [TypeReferenceSort]
    where: TypeReferenceWhere
  ): TypeReferencesConnection!
  unionTypes(options: UnionTypeOptions, where: UnionTypeWhere): [UnionType!]!
  unionTypesAggregate(where: UnionTypeWhere): UnionTypeAggregateSelection!
  unionTypesConnection(
    after: String
    first: Int
    sort: [UnionTypeSort]
    where: UnionTypeWhere
  ): UnionTypesConnection!
  users(options: UserOptions, where: UserWhere): [User!]!
  usersAggregate(where: UserWhere): UserAggregateSelection!
  usersConnection(
    after: String
    first: Int
    sort: [UserSort]
    where: UserWhere
  ): UsersConnection!
  vercelDomainConfigData(
    options: VercelDomainConfigDataOptions
    where: VercelDomainConfigDataWhere
  ): [VercelDomainConfigData!]!
  vercelDomainConfigDataAggregate(
    where: VercelDomainConfigDataWhere
  ): VercelDomainConfigDataAggregateSelection!
  vercelDomainConfigDataConnection(
    after: String
    first: Int
    sort: [VercelDomainConfigDataSort]
    where: VercelDomainConfigDataWhere
  ): VercelDomainConfigDataConnection!
  vercelProjectDomainData(
    options: VercelProjectDomainDataOptions
    where: VercelProjectDomainDataWhere
  ): [VercelProjectDomainData!]!
  vercelProjectDomainDataAggregate(
    where: VercelProjectDomainDataWhere
  ): VercelProjectDomainDataAggregateSelection!
  vercelProjectDomainDataConnection(
    after: String
    first: Int
    sort: [VercelProjectDomainDataSort]
    where: VercelProjectDomainDataWhere
  ): VercelProjectDomainDataConnection!
}

input QueryOptions {
  limit: Int
  offset: Int
}

"""
Allows picking a Component from the list of components.
It is passed to the rendered element as a React node: `ReactNode`
Prop values for this type have the shape of TypedValue in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropsType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNode' value
"""
type ReactNodeType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ReactNodeTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type ReactNodeTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ReactNodeTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input ReactNodeTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input ReactNodeTypeConnectOrCreateWhere {
  node: ReactNodeTypeUniqueWhere!
}

input ReactNodeTypeConnectWhere {
  node: ReactNodeTypeWhere!
}

input ReactNodeTypeCreateInput {
  id: ID!
  kind: TypeKind! = ReactNodeType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input ReactNodeTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input ReactNodeTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type ReactNodeTypeEdge {
  cursor: String!
  node: ReactNodeType!
}

input ReactNodeTypeOnCreateInput {
  id: ID!
  name: String!
}

input ReactNodeTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ReactNodeTypeSort objects to sort ReactNodeTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ReactNodeTypeSort!]
}

input ReactNodeTypeOwnerAggregateInput {
  AND: [ReactNodeTypeOwnerAggregateInput!]
  OR: [ReactNodeTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ReactNodeTypeOwnerEdgeAggregationWhereInput
  node: ReactNodeTypeOwnerNodeAggregationWhereInput
}

input ReactNodeTypeOwnerEdgeAggregationWhereInput {
  AND: [ReactNodeTypeOwnerEdgeAggregationWhereInput!]
  OR: [ReactNodeTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input ReactNodeTypeOwnerNodeAggregationWhereInput {
  AND: [ReactNodeTypeOwnerNodeAggregationWhereInput!]
  OR: [ReactNodeTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input ReactNodeTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort ReactNodeTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one ReactNodeTypeSort object.
"""
input ReactNodeTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input ReactNodeTypeUniqueWhere {
  id: ID
}

input ReactNodeTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type ReactNodeTypeUserOwnerAggregationSelection {
  count: Int!
  edge: ReactNodeTypeUserOwnerEdgeAggregateSelection
  node: ReactNodeTypeUserOwnerNodeAggregateSelection
}

type ReactNodeTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type ReactNodeTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ReactNodeTypeWhere {
  AND: [ReactNodeTypeWhere!]
  OR: [ReactNodeTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ReactNodeTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type ReactNodeTypesConnection {
  edges: [ReactNodeTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking a Component from the list of components.
It is passed to the rendered element as a function that takes props as input
and returns a React element: '(props) => ReactNode'
Prop values for this type have the shape of TypedValue in order to
be distinguished from other element types.
Comparison between different element types:
- RenderPropsType: Component select box, results it '(props) => ReactNode' value
- ReactNodeType: Component select box, results it 'ReactNode' value
- ElementType: Current tree element select box, results it 'ReactNode' value
"""
type RenderPropsType implements TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): RenderPropsTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

type RenderPropsTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input RenderPropsTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
}

input RenderPropsTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
}

input RenderPropsTypeConnectOrCreateWhere {
  node: RenderPropsTypeUniqueWhere!
}

input RenderPropsTypeConnectWhere {
  node: RenderPropsTypeWhere!
}

input RenderPropsTypeCreateInput {
  id: ID!
  kind: TypeKind! = RenderPropsType
  name: String!
  owner: TypeBaseOwnerFieldInput
}

input RenderPropsTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
}

input RenderPropsTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
}

type RenderPropsTypeEdge {
  cursor: String!
  node: RenderPropsType!
}

input RenderPropsTypeOnCreateInput {
  id: ID!
  name: String!
}

input RenderPropsTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more RenderPropsTypeSort objects to sort RenderPropsTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [RenderPropsTypeSort!]
}

input RenderPropsTypeOwnerAggregateInput {
  AND: [RenderPropsTypeOwnerAggregateInput!]
  OR: [RenderPropsTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: RenderPropsTypeOwnerEdgeAggregationWhereInput
  node: RenderPropsTypeOwnerNodeAggregationWhereInput
}

input RenderPropsTypeOwnerEdgeAggregationWhereInput {
  AND: [RenderPropsTypeOwnerEdgeAggregationWhereInput!]
  OR: [RenderPropsTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input RenderPropsTypeOwnerNodeAggregationWhereInput {
  AND: [RenderPropsTypeOwnerNodeAggregationWhereInput!]
  OR: [RenderPropsTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input RenderPropsTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
}

"""
Fields to sort RenderPropsTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one RenderPropsTypeSort object.
"""
input RenderPropsTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input RenderPropsTypeUniqueWhere {
  id: ID
}

input RenderPropsTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

type RenderPropsTypeUserOwnerAggregationSelection {
  count: Int!
  edge: RenderPropsTypeUserOwnerEdgeAggregateSelection
  node: RenderPropsTypeUserOwnerNodeAggregateSelection
}

type RenderPropsTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type RenderPropsTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input RenderPropsTypeWhere {
  AND: [RenderPropsTypeWhere!]
  OR: [RenderPropsTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: RenderPropsTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

type RenderPropsTypesConnection {
  edges: [RenderPropsTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ResetDatabaseMutationResponse {
  success: Boolean
}

type ResetDatabaseMutationResponseAggregateSelection {
  count: Int!
}

input ResetDatabaseMutationResponseCreateInput {
  success: Boolean
}

type ResetDatabaseMutationResponseEdge {
  cursor: String!
  node: ResetDatabaseMutationResponse!
}

input ResetDatabaseMutationResponseOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ResetDatabaseMutationResponseSort objects to sort ResetDatabaseMutationResponses by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ResetDatabaseMutationResponseSort!]
}

"""
Fields to sort ResetDatabaseMutationResponses by. The order in which sorts are applied is not guaranteed when specifying many fields in one ResetDatabaseMutationResponseSort object.
"""
input ResetDatabaseMutationResponseSort {
  success: SortDirection
}

input ResetDatabaseMutationResponseUpdateInput {
  success: Boolean
}

input ResetDatabaseMutationResponseWhere {
  AND: [ResetDatabaseMutationResponseWhere!]
  OR: [ResetDatabaseMutationResponseWhere!]
  success: Boolean
  success_NOT: Boolean
}

type ResetDatabaseMutationResponsesConnection {
  edges: [ResetDatabaseMutationResponseEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Resource implements WithOwner {
  config(
    directed: Boolean = true
    options: PropOptions
    where: PropWhere
  ): Prop!
  configAggregate(
    directed: Boolean = true
    where: PropWhere
  ): ResourcePropConfigAggregationSelection
  configConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [ResourceConfigConnectionSort!]
    where: ResourceConfigConnectionWhere
  ): ResourceConfigConnection!
  id: ID!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): ResourceUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [WithOwnerOwnerConnectionSort!]
    where: WithOwnerOwnerConnectionWhere
  ): WithOwnerOwnerConnection!
  type: ResourceType!
}

type ResourceAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input ResourceConfigAggregateInput {
  AND: [ResourceConfigAggregateInput!]
  OR: [ResourceConfigAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceConfigNodeAggregationWhereInput
}

input ResourceConfigConnectFieldInput {
  where: PropConnectWhere
}

input ResourceConfigConnectOrCreateFieldInput {
  onCreate: ResourceConfigConnectOrCreateFieldInputOnCreate!
  where: PropConnectOrCreateWhere!
}

input ResourceConfigConnectOrCreateFieldInputOnCreate {
  node: PropOnCreateInput!
}

type ResourceConfigConnection {
  edges: [ResourceConfigRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResourceConfigConnectionSort {
  node: PropSort
}

input ResourceConfigConnectionWhere {
  AND: [ResourceConfigConnectionWhere!]
  OR: [ResourceConfigConnectionWhere!]
  node: PropWhere
  node_NOT: PropWhere
}

input ResourceConfigCreateFieldInput {
  node: PropCreateInput!
}

input ResourceConfigDeleteFieldInput {
  where: ResourceConfigConnectionWhere
}

input ResourceConfigDisconnectFieldInput {
  where: ResourceConfigConnectionWhere
}

input ResourceConfigFieldInput {
  connect: ResourceConfigConnectFieldInput
  connectOrCreate: ResourceConfigConnectOrCreateFieldInput
  create: ResourceConfigCreateFieldInput
}

input ResourceConfigNodeAggregationWhereInput {
  AND: [ResourceConfigNodeAggregationWhereInput!]
  OR: [ResourceConfigNodeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  id_EQUAL: ID
}

type ResourceConfigRelationship {
  cursor: String!
  node: Prop!
}

input ResourceConfigUpdateConnectionInput {
  node: PropUpdateInput
}

input ResourceConfigUpdateFieldInput {
  connect: ResourceConfigConnectFieldInput
  connectOrCreate: ResourceConfigConnectOrCreateFieldInput
  create: ResourceConfigCreateFieldInput
  delete: ResourceConfigDeleteFieldInput
  disconnect: ResourceConfigDisconnectFieldInput
  update: ResourceConfigUpdateConnectionInput
  where: ResourceConfigConnectionWhere
}

input ResourceConnectInput {
  config: ResourceConfigConnectFieldInput
  owner: WithOwnerOwnerConnectFieldInput
}

input ResourceConnectOrCreateInput {
  config: ResourceConfigConnectOrCreateFieldInput
  owner: WithOwnerOwnerConnectOrCreateFieldInput
}

input ResourceConnectOrCreateWhere {
  node: ResourceUniqueWhere!
}

input ResourceConnectWhere {
  node: ResourceWhere!
}

input ResourceCreateInput {
  config: ResourceConfigFieldInput
  id: ID!
  name: String!
  owner: WithOwnerOwnerFieldInput
  type: ResourceType!
}

input ResourceDeleteInput {
  config: ResourceConfigDeleteFieldInput
  owner: WithOwnerOwnerDeleteFieldInput
}

input ResourceDisconnectInput {
  config: ResourceConfigDisconnectFieldInput
  owner: WithOwnerOwnerDisconnectFieldInput
}

type ResourceEdge {
  cursor: String!
  node: Resource!
}

input ResourceOnCreateInput {
  id: ID!
  name: String!
}

input ResourceOptions {
  limit: Int
  offset: Int

  """
  Specify one or more ResourceSort objects to sort Resources by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [ResourceSort!]
}

input ResourceOwnerAggregateInput {
  AND: [ResourceOwnerAggregateInput!]
  OR: [ResourceOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: ResourceOwnerNodeAggregationWhereInput
}

input ResourceOwnerNodeAggregationWhereInput {
  AND: [ResourceOwnerNodeAggregationWhereInput!]
  OR: [ResourceOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

type ResourcePropConfigAggregationSelection {
  count: Int!
  node: ResourcePropConfigNodeAggregateSelection
}

type ResourcePropConfigNodeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
}

input ResourceRelationInput {
  config: ResourceConfigCreateFieldInput
  owner: WithOwnerOwnerCreateFieldInput
}

"""
Fields to sort Resources by. The order in which sorts are applied is not guaranteed when specifying many fields in one ResourceSort object.
"""
input ResourceSort {
  id: SortDirection
  name: SortDirection
  type: SortDirection
}

enum ResourceType {
  GraphQL
  Rest
}

input ResourceUniqueWhere {
  id: ID
}

input ResourceUpdateInput {
  config: ResourceConfigUpdateFieldInput
  id: ID
  name: String
  owner: WithOwnerOwnerUpdateFieldInput
  type: ResourceType
}

type ResourceUserOwnerAggregationSelection {
  count: Int!
  node: ResourceUserOwnerNodeAggregateSelection
}

type ResourceUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input ResourceWhere {
  AND: [ResourceWhere!]
  OR: [ResourceWhere!]
  config: PropWhere
  configAggregate: ResourceConfigAggregateInput
  configConnection: ResourceConfigConnectionWhere
  configConnection_NOT: ResourceConfigConnectionWhere
  config_NOT: PropWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: ResourceOwnerAggregateInput
  ownerConnection: WithOwnerOwnerConnectionWhere
  ownerConnection_NOT: WithOwnerOwnerConnectionWhere
  owner_NOT: UserWhere
  type: ResourceType
  type_IN: [ResourceType!]
  type_NOT: ResourceType
  type_NOT_IN: [ResourceType!]
}

type ResourcesConnection {
  edges: [ResourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum Role {
  Admin
  User
}

enum SortDirection {
  """
  Sort by field values in ascending order.
  """
  ASC

  """
  Sort by field values in descending order.
  """
  DESC
}

type Store {
  actions(
    directed: Boolean = true
    options: QueryOptions
    where: AnyActionWhere
  ): [AnyAction!]!
  actionsConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: StoreActionsConnectionWhere
  ): StoreActionsConnection!
  api(
    directed: Boolean = true
    options: InterfaceTypeOptions
    where: InterfaceTypeWhere
  ): InterfaceType!
  apiAggregate(
    directed: Boolean = true
    where: InterfaceTypeWhere
  ): StoreInterfaceTypeApiAggregationSelection
  apiConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StoreApiConnectionSort!]
    where: StoreApiConnectionWhere
  ): StoreApiConnection!
  app(directed: Boolean = true, options: AppOptions, where: AppWhere): App!
  appAggregate(
    directed: Boolean = true
    where: AppWhere
  ): StoreAppAppAggregationSelection
  appConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [StoreAppConnectionSort!]
    where: StoreAppConnectionWhere
  ): StoreAppConnection!
  id: ID!
  name: String!
}

input StoreActionsApiActionConnectFieldInput {
  connect: [ApiActionConnectInput!]
  where: ApiActionConnectWhere
}

input StoreActionsApiActionConnectOrCreateFieldInput {
  onCreate: StoreActionsApiActionConnectOrCreateFieldInputOnCreate!
  where: ApiActionConnectOrCreateWhere!
}

input StoreActionsApiActionConnectOrCreateFieldInputOnCreate {
  node: ApiActionOnCreateInput!
}

input StoreActionsApiActionConnectionWhere {
  AND: [StoreActionsApiActionConnectionWhere!]
  OR: [StoreActionsApiActionConnectionWhere!]
  node: ApiActionWhere
  node_NOT: ApiActionWhere
}

input StoreActionsApiActionCreateFieldInput {
  node: ApiActionCreateInput!
}

input StoreActionsApiActionDeleteFieldInput {
  delete: ApiActionDeleteInput
  where: StoreActionsApiActionConnectionWhere
}

input StoreActionsApiActionDisconnectFieldInput {
  disconnect: ApiActionDisconnectInput
  where: StoreActionsApiActionConnectionWhere
}

input StoreActionsApiActionFieldInput {
  connect: [StoreActionsApiActionConnectFieldInput!]
  connectOrCreate: [StoreActionsApiActionConnectOrCreateFieldInput!]
  create: [StoreActionsApiActionCreateFieldInput!]
}

input StoreActionsApiActionUpdateConnectionInput {
  node: ApiActionUpdateInput
}

input StoreActionsApiActionUpdateFieldInput {
  connect: [StoreActionsApiActionConnectFieldInput!]
  connectOrCreate: [StoreActionsApiActionConnectOrCreateFieldInput!]
  create: [StoreActionsApiActionCreateFieldInput!]
  delete: [StoreActionsApiActionDeleteFieldInput!]
  disconnect: [StoreActionsApiActionDisconnectFieldInput!]
  update: StoreActionsApiActionUpdateConnectionInput
  where: StoreActionsApiActionConnectionWhere
}

input StoreActionsCodeActionConnectFieldInput {
  connect: [CodeActionConnectInput!]
  where: CodeActionConnectWhere
}

input StoreActionsCodeActionConnectOrCreateFieldInput {
  onCreate: StoreActionsCodeActionConnectOrCreateFieldInputOnCreate!
  where: CodeActionConnectOrCreateWhere!
}

input StoreActionsCodeActionConnectOrCreateFieldInputOnCreate {
  node: CodeActionOnCreateInput!
}

input StoreActionsCodeActionConnectionWhere {
  AND: [StoreActionsCodeActionConnectionWhere!]
  OR: [StoreActionsCodeActionConnectionWhere!]
  node: CodeActionWhere
  node_NOT: CodeActionWhere
}

input StoreActionsCodeActionCreateFieldInput {
  node: CodeActionCreateInput!
}

input StoreActionsCodeActionDeleteFieldInput {
  delete: CodeActionDeleteInput
  where: StoreActionsCodeActionConnectionWhere
}

input StoreActionsCodeActionDisconnectFieldInput {
  disconnect: CodeActionDisconnectInput
  where: StoreActionsCodeActionConnectionWhere
}

input StoreActionsCodeActionFieldInput {
  connect: [StoreActionsCodeActionConnectFieldInput!]
  connectOrCreate: [StoreActionsCodeActionConnectOrCreateFieldInput!]
  create: [StoreActionsCodeActionCreateFieldInput!]
}

input StoreActionsCodeActionUpdateConnectionInput {
  node: CodeActionUpdateInput
}

input StoreActionsCodeActionUpdateFieldInput {
  connect: [StoreActionsCodeActionConnectFieldInput!]
  connectOrCreate: [StoreActionsCodeActionConnectOrCreateFieldInput!]
  create: [StoreActionsCodeActionCreateFieldInput!]
  delete: [StoreActionsCodeActionDeleteFieldInput!]
  disconnect: [StoreActionsCodeActionDisconnectFieldInput!]
  update: StoreActionsCodeActionUpdateConnectionInput
  where: StoreActionsCodeActionConnectionWhere
}

input StoreActionsConnectInput {
  ApiAction: [StoreActionsApiActionConnectFieldInput!]
  CodeAction: [StoreActionsCodeActionConnectFieldInput!]
}

input StoreActionsConnectOrCreateInput {
  ApiAction: [StoreActionsApiActionConnectOrCreateFieldInput!]
  CodeAction: [StoreActionsCodeActionConnectOrCreateFieldInput!]
}

type StoreActionsConnection {
  edges: [StoreActionsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreActionsConnectionWhere {
  ApiAction: StoreActionsApiActionConnectionWhere
  CodeAction: StoreActionsCodeActionConnectionWhere
}

input StoreActionsCreateFieldInput {
  ApiAction: [StoreActionsApiActionCreateFieldInput!]
  CodeAction: [StoreActionsCodeActionCreateFieldInput!]
}

input StoreActionsCreateInput {
  ApiAction: StoreActionsApiActionFieldInput
  CodeAction: StoreActionsCodeActionFieldInput
}

input StoreActionsDeleteInput {
  ApiAction: [StoreActionsApiActionDeleteFieldInput!]
  CodeAction: [StoreActionsCodeActionDeleteFieldInput!]
}

input StoreActionsDisconnectInput {
  ApiAction: [StoreActionsApiActionDisconnectFieldInput!]
  CodeAction: [StoreActionsCodeActionDisconnectFieldInput!]
}

type StoreActionsRelationship {
  cursor: String!
  node: AnyAction!
}

input StoreActionsUpdateInput {
  ApiAction: [StoreActionsApiActionUpdateFieldInput!]
  CodeAction: [StoreActionsCodeActionUpdateFieldInput!]
}

type StoreAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input StoreApiAggregateInput {
  AND: [StoreApiAggregateInput!]
  OR: [StoreApiAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: StoreApiNodeAggregationWhereInput
}

input StoreApiConnectFieldInput {
  connect: InterfaceTypeConnectInput
  where: InterfaceTypeConnectWhere
}

input StoreApiConnectOrCreateFieldInput {
  onCreate: StoreApiConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input StoreApiConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

type StoreApiConnection {
  edges: [StoreApiRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreApiConnectionSort {
  node: InterfaceTypeSort
}

input StoreApiConnectionWhere {
  AND: [StoreApiConnectionWhere!]
  OR: [StoreApiConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input StoreApiCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input StoreApiDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: StoreApiConnectionWhere
}

input StoreApiDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: StoreApiConnectionWhere
}

input StoreApiFieldInput {
  connect: StoreApiConnectFieldInput
  connectOrCreate: StoreApiConnectOrCreateFieldInput
  create: StoreApiCreateFieldInput
}

input StoreApiNodeAggregationWhereInput {
  AND: [StoreApiNodeAggregationWhereInput!]
  OR: [StoreApiNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type StoreApiRelationship {
  cursor: String!
  node: InterfaceType!
}

input StoreApiUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input StoreApiUpdateFieldInput {
  connect: StoreApiConnectFieldInput
  connectOrCreate: StoreApiConnectOrCreateFieldInput
  create: StoreApiCreateFieldInput
  delete: StoreApiDeleteFieldInput
  disconnect: StoreApiDisconnectFieldInput
  update: StoreApiUpdateConnectionInput
  where: StoreApiConnectionWhere
}

input StoreAppAggregateInput {
  AND: [StoreAppAggregateInput!]
  OR: [StoreAppAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: StoreAppNodeAggregationWhereInput
}

type StoreAppAppAggregationSelection {
  count: Int!
  node: StoreAppAppNodeAggregateSelection
}

type StoreAppAppNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

input StoreAppConnectFieldInput {
  connect: AppConnectInput
  where: AppConnectWhere
}

input StoreAppConnectOrCreateFieldInput {
  onCreate: StoreAppConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input StoreAppConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type StoreAppConnection {
  edges: [StoreAppRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input StoreAppConnectionSort {
  node: AppSort
}

input StoreAppConnectionWhere {
  AND: [StoreAppConnectionWhere!]
  OR: [StoreAppConnectionWhere!]
  node: AppWhere
  node_NOT: AppWhere
}

input StoreAppCreateFieldInput {
  node: AppCreateInput!
}

input StoreAppDeleteFieldInput {
  delete: AppDeleteInput
  where: StoreAppConnectionWhere
}

input StoreAppDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: StoreAppConnectionWhere
}

input StoreAppFieldInput {
  connect: StoreAppConnectFieldInput
  connectOrCreate: StoreAppConnectOrCreateFieldInput
  create: StoreAppCreateFieldInput
}

input StoreAppNodeAggregationWhereInput {
  AND: [StoreAppNodeAggregationWhereInput!]
  OR: [StoreAppNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  slug_AVERAGE_EQUAL: Float
  slug_AVERAGE_GT: Float
  slug_AVERAGE_GTE: Float
  slug_AVERAGE_LT: Float
  slug_AVERAGE_LTE: Float
  slug_EQUAL: String
  slug_GT: Int
  slug_GTE: Int
  slug_LONGEST_EQUAL: Int
  slug_LONGEST_GT: Int
  slug_LONGEST_GTE: Int
  slug_LONGEST_LT: Int
  slug_LONGEST_LTE: Int
  slug_LT: Int
  slug_LTE: Int
  slug_SHORTEST_EQUAL: Int
  slug_SHORTEST_GT: Int
  slug_SHORTEST_GTE: Int
  slug_SHORTEST_LT: Int
  slug_SHORTEST_LTE: Int
}

type StoreAppRelationship {
  cursor: String!
  node: App!
}

input StoreAppUpdateConnectionInput {
  node: AppUpdateInput
}

input StoreAppUpdateFieldInput {
  connect: StoreAppConnectFieldInput
  connectOrCreate: StoreAppConnectOrCreateFieldInput
  create: StoreAppCreateFieldInput
  delete: StoreAppDeleteFieldInput
  disconnect: StoreAppDisconnectFieldInput
  update: StoreAppUpdateConnectionInput
  where: StoreAppConnectionWhere
}

input StoreConnectInput {
  actions: StoreActionsConnectInput
  api: StoreApiConnectFieldInput
  app: StoreAppConnectFieldInput
}

input StoreConnectOrCreateInput {
  actions: StoreActionsConnectOrCreateInput
  api: StoreApiConnectOrCreateFieldInput
  app: StoreAppConnectOrCreateFieldInput
}

input StoreConnectOrCreateWhere {
  node: StoreUniqueWhere!
}

input StoreConnectWhere {
  node: StoreWhere!
}

input StoreCreateInput {
  actions: StoreActionsCreateInput
  api: StoreApiFieldInput
  app: StoreAppFieldInput
  id: ID!
  name: String!
}

input StoreDeleteInput {
  actions: StoreActionsDeleteInput
  api: StoreApiDeleteFieldInput
  app: StoreAppDeleteFieldInput
}

input StoreDisconnectInput {
  actions: StoreActionsDisconnectInput
  api: StoreApiDisconnectFieldInput
  app: StoreAppDisconnectFieldInput
}

type StoreEdge {
  cursor: String!
  node: Store!
}

type StoreInterfaceTypeApiAggregationSelection {
  count: Int!
  node: StoreInterfaceTypeApiNodeAggregateSelection
}

type StoreInterfaceTypeApiNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input StoreOnCreateInput {
  id: ID!
  name: String!
}

input StoreOptions {
  limit: Int
  offset: Int

  """
  Specify one or more StoreSort objects to sort Stores by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [StoreSort!]
}

input StoreRelationInput {
  actions: StoreActionsCreateFieldInput
  api: StoreApiCreateFieldInput
  app: StoreAppCreateFieldInput
}

"""
Fields to sort Stores by. The order in which sorts are applied is not guaranteed when specifying many fields in one StoreSort object.
"""
input StoreSort {
  id: SortDirection
  name: SortDirection
}

input StoreUniqueWhere {
  id: ID
}

input StoreUpdateInput {
  actions: StoreActionsUpdateInput
  api: StoreApiUpdateFieldInput
  app: StoreAppUpdateFieldInput
  id: ID
  name: String
}

input StoreWhere {
  AND: [StoreWhere!]
  OR: [StoreWhere!]
  actionsConnection_ALL: StoreActionsConnectionWhere
  actionsConnection_NONE: StoreActionsConnectionWhere
  actionsConnection_SINGLE: StoreActionsConnectionWhere
  actionsConnection_SOME: StoreActionsConnectionWhere
  api: InterfaceTypeWhere
  apiAggregate: StoreApiAggregateInput
  apiConnection: StoreApiConnectionWhere
  apiConnection_NOT: StoreApiConnectionWhere
  api_NOT: InterfaceTypeWhere
  app: AppWhere
  appAggregate: StoreAppAggregateInput
  appConnection: StoreAppConnectionWhere
  appConnection_NOT: StoreAppConnectionWhere
  app_NOT: AppWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
}

type StoresConnection {
  edges: [StoreEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StringAggregateSelectionNonNullable {
  longest: String!
  shortest: String!
}

type StringAggregateSelectionNullable {
  longest: String
  shortest: String
}

type Tag {
  children(
    directed: Boolean = true
    options: TagOptions
    where: TagWhere
  ): [Tag!]!
  childrenAggregate(
    directed: Boolean = true
    where: TagWhere
  ): TagTagChildrenAggregationSelection
  childrenConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagChildrenConnectionSort!]
    where: TagChildrenConnectionWhere
  ): TagChildrenConnection!
  descendants: [Tag!]!
  id: ID!
  isRoot: Boolean
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): TagUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagOwnerConnectionSort!]
    where: TagOwnerConnectionWhere
  ): TagOwnerConnection!
  parent(directed: Boolean = true, options: TagOptions, where: TagWhere): Tag
  parentAggregate(
    directed: Boolean = true
    where: TagWhere
  ): TagTagParentAggregationSelection
  parentConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TagParentConnectionSort!]
    where: TagParentConnectionWhere
  ): TagParentConnection!
}

type TagAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TagChildrenAggregateInput {
  AND: [TagChildrenAggregateInput!]
  OR: [TagChildrenAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagChildrenNodeAggregationWhereInput
}

input TagChildrenConnectFieldInput {
  connect: [TagConnectInput!]
  where: TagConnectWhere
}

input TagChildrenConnectOrCreateFieldInput {
  onCreate: TagChildrenConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input TagChildrenConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type TagChildrenConnection {
  edges: [TagChildrenRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagChildrenConnectionSort {
  node: TagSort
}

input TagChildrenConnectionWhere {
  AND: [TagChildrenConnectionWhere!]
  OR: [TagChildrenConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input TagChildrenCreateFieldInput {
  node: TagCreateInput!
}

input TagChildrenDeleteFieldInput {
  delete: TagDeleteInput
  where: TagChildrenConnectionWhere
}

input TagChildrenDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: TagChildrenConnectionWhere
}

input TagChildrenFieldInput {
  connect: [TagChildrenConnectFieldInput!]
  connectOrCreate: [TagChildrenConnectOrCreateFieldInput!]
  create: [TagChildrenCreateFieldInput!]
}

input TagChildrenNodeAggregationWhereInput {
  AND: [TagChildrenNodeAggregationWhereInput!]
  OR: [TagChildrenNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type TagChildrenRelationship {
  cursor: String!
  node: Tag!
}

input TagChildrenUpdateConnectionInput {
  node: TagUpdateInput
}

input TagChildrenUpdateFieldInput {
  connect: [TagChildrenConnectFieldInput!]
  connectOrCreate: [TagChildrenConnectOrCreateFieldInput!]
  create: [TagChildrenCreateFieldInput!]
  delete: [TagChildrenDeleteFieldInput!]
  disconnect: [TagChildrenDisconnectFieldInput!]
  update: TagChildrenUpdateConnectionInput
  where: TagChildrenConnectionWhere
}

input TagConnectInput {
  children: [TagChildrenConnectFieldInput!]
  owner: TagOwnerConnectFieldInput
  parent: TagParentConnectFieldInput
}

input TagConnectOrCreateInput {
  children: [TagChildrenConnectOrCreateFieldInput!]
  owner: TagOwnerConnectOrCreateFieldInput
  parent: TagParentConnectOrCreateFieldInput
}

input TagConnectOrCreateWhere {
  node: TagUniqueWhere!
}

input TagConnectWhere {
  node: TagWhere!
}

input TagCreateInput {
  children: TagChildrenFieldInput
  id: ID!
  name: String!
  owner: TagOwnerFieldInput
  parent: TagParentFieldInput
}

input TagDeleteInput {
  children: [TagChildrenDeleteFieldInput!]
  owner: TagOwnerDeleteFieldInput
  parent: TagParentDeleteFieldInput
}

input TagDisconnectInput {
  children: [TagChildrenDisconnectFieldInput!]
  owner: TagOwnerDisconnectFieldInput
  parent: TagParentDisconnectFieldInput
}

type TagEdge {
  cursor: String!
  node: Tag!
}

input TagOnCreateInput {
  id: ID!
  name: String!
}

input TagOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TagSort objects to sort Tags by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TagSort!]
}

input TagOwnerAggregateInput {
  AND: [TagOwnerAggregateInput!]
  OR: [TagOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagOwnerNodeAggregationWhereInput
}

input TagOwnerConnectFieldInput {
  connect: UserConnectInput
  where: UserConnectWhere
}

input TagOwnerConnectOrCreateFieldInput {
  onCreate: TagOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input TagOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type TagOwnerConnection {
  edges: [TagOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagOwnerConnectionSort {
  node: UserSort
}

input TagOwnerConnectionWhere {
  AND: [TagOwnerConnectionWhere!]
  OR: [TagOwnerConnectionWhere!]
  node: UserWhere
  node_NOT: UserWhere
}

input TagOwnerCreateFieldInput {
  node: UserCreateInput!
}

input TagOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: TagOwnerConnectionWhere
}

input TagOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: TagOwnerConnectionWhere
}

input TagOwnerFieldInput {
  connect: TagOwnerConnectFieldInput
  connectOrCreate: TagOwnerConnectOrCreateFieldInput
  create: TagOwnerCreateFieldInput
}

input TagOwnerNodeAggregationWhereInput {
  AND: [TagOwnerNodeAggregationWhereInput!]
  OR: [TagOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

type TagOwnerRelationship {
  cursor: String!
  node: User!
}

input TagOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input TagOwnerUpdateFieldInput {
  connect: TagOwnerConnectFieldInput
  connectOrCreate: TagOwnerConnectOrCreateFieldInput
  create: TagOwnerCreateFieldInput
  delete: TagOwnerDeleteFieldInput
  disconnect: TagOwnerDisconnectFieldInput
  update: TagOwnerUpdateConnectionInput
  where: TagOwnerConnectionWhere
}

input TagParentAggregateInput {
  AND: [TagParentAggregateInput!]
  OR: [TagParentAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: TagParentNodeAggregationWhereInput
}

input TagParentConnectFieldInput {
  connect: TagConnectInput
  where: TagConnectWhere
}

input TagParentConnectOrCreateFieldInput {
  onCreate: TagParentConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input TagParentConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type TagParentConnection {
  edges: [TagParentRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TagParentConnectionSort {
  node: TagSort
}

input TagParentConnectionWhere {
  AND: [TagParentConnectionWhere!]
  OR: [TagParentConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input TagParentCreateFieldInput {
  node: TagCreateInput!
}

input TagParentDeleteFieldInput {
  delete: TagDeleteInput
  where: TagParentConnectionWhere
}

input TagParentDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: TagParentConnectionWhere
}

input TagParentFieldInput {
  connect: TagParentConnectFieldInput
  connectOrCreate: TagParentConnectOrCreateFieldInput
  create: TagParentCreateFieldInput
}

input TagParentNodeAggregationWhereInput {
  AND: [TagParentNodeAggregationWhereInput!]
  OR: [TagParentNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type TagParentRelationship {
  cursor: String!
  node: Tag!
}

input TagParentUpdateConnectionInput {
  node: TagUpdateInput
}

input TagParentUpdateFieldInput {
  connect: TagParentConnectFieldInput
  connectOrCreate: TagParentConnectOrCreateFieldInput
  create: TagParentCreateFieldInput
  delete: TagParentDeleteFieldInput
  disconnect: TagParentDisconnectFieldInput
  update: TagParentUpdateConnectionInput
  where: TagParentConnectionWhere
}

input TagRelationInput {
  children: [TagChildrenCreateFieldInput!]
  owner: TagOwnerCreateFieldInput
  parent: TagParentCreateFieldInput
}

"""
Fields to sort Tags by. The order in which sorts are applied is not guaranteed when specifying many fields in one TagSort object.
"""
input TagSort {
  id: SortDirection
  isRoot: SortDirection
  name: SortDirection
}

type TagTagChildrenAggregationSelection {
  count: Int!
  node: TagTagChildrenNodeAggregateSelection
}

type TagTagChildrenNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

type TagTagParentAggregationSelection {
  count: Int!
  node: TagTagParentNodeAggregateSelection
}

type TagTagParentNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TagUniqueWhere {
  id: ID
  name: String
}

input TagUpdateInput {
  children: [TagChildrenUpdateFieldInput!]
  id: ID
  name: String
  owner: TagOwnerUpdateFieldInput
  parent: TagParentUpdateFieldInput
}

type TagUserOwnerAggregationSelection {
  count: Int!
  node: TagUserOwnerNodeAggregateSelection
}

type TagUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input TagWhere {
  AND: [TagWhere!]
  OR: [TagWhere!]
  childrenAggregate: TagChildrenAggregateInput
  childrenConnection_ALL: TagChildrenConnectionWhere
  childrenConnection_NONE: TagChildrenConnectionWhere
  childrenConnection_SINGLE: TagChildrenConnectionWhere
  childrenConnection_SOME: TagChildrenConnectionWhere

  """
  Return Tags where all of the related Tags match this filter
  """
  children_ALL: TagWhere

  """
  Return Tags where none of the related Tags match this filter
  """
  children_NONE: TagWhere

  """
  Return Tags where one of the related Tags match this filter
  """
  children_SINGLE: TagWhere

  """
  Return Tags where some of the related Tags match this filter
  """
  children_SOME: TagWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: TagOwnerAggregateInput
  ownerConnection: TagOwnerConnectionWhere
  ownerConnection_NOT: TagOwnerConnectionWhere
  owner_NOT: UserWhere
  parent: TagWhere
  parentAggregate: TagParentAggregateInput
  parentConnection: TagParentConnectionWhere
  parentConnection_NOT: TagParentConnectionWhere
  parent_NOT: TagWhere
}

type TagsConnection {
  edges: [TagEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

interface TypeBase {
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
}

input TypeBaseConnectInput {
  _on: TypeBaseImplementationsConnectInput
  owner: TypeBaseOwnerConnectFieldInput
}

input TypeBaseConnectWhere {
  node: TypeBaseWhere!
}

input TypeBaseCreateInput {
  ActionType: ActionTypeCreateInput
  AppType: AppTypeCreateInput
  ArrayType: ArrayTypeCreateInput
  CodeMirrorType: CodeMirrorTypeCreateInput
  ElementType: ElementTypeCreateInput
  EnumType: EnumTypeCreateInput
  InterfaceType: InterfaceTypeCreateInput
  LambdaType: LambdaTypeCreateInput
  PageType: PageTypeCreateInput
  PrimitiveType: PrimitiveTypeCreateInput
  ReactNodeType: ReactNodeTypeCreateInput
  RenderPropsType: RenderPropsTypeCreateInput
  UnionType: UnionTypeCreateInput
}

input TypeBaseDeleteInput {
  _on: TypeBaseImplementationsDeleteInput
  owner: TypeBaseOwnerDeleteFieldInput
}

input TypeBaseDisconnectInput {
  _on: TypeBaseImplementationsDisconnectInput
  owner: TypeBaseOwnerDisconnectFieldInput
}

input TypeBaseImplementationsConnectInput {
  ActionType: [ActionTypeConnectInput!]
  AppType: [AppTypeConnectInput!]
  ArrayType: [ArrayTypeConnectInput!]
  CodeMirrorType: [CodeMirrorTypeConnectInput!]
  ElementType: [ElementTypeConnectInput!]
  EnumType: [EnumTypeConnectInput!]
  InterfaceType: [InterfaceTypeConnectInput!]
  LambdaType: [LambdaTypeConnectInput!]
  PageType: [PageTypeConnectInput!]
  PrimitiveType: [PrimitiveTypeConnectInput!]
  ReactNodeType: [ReactNodeTypeConnectInput!]
  RenderPropsType: [RenderPropsTypeConnectInput!]
  UnionType: [UnionTypeConnectInput!]
}

input TypeBaseImplementationsDeleteInput {
  ActionType: [ActionTypeDeleteInput!]
  AppType: [AppTypeDeleteInput!]
  ArrayType: [ArrayTypeDeleteInput!]
  CodeMirrorType: [CodeMirrorTypeDeleteInput!]
  ElementType: [ElementTypeDeleteInput!]
  EnumType: [EnumTypeDeleteInput!]
  InterfaceType: [InterfaceTypeDeleteInput!]
  LambdaType: [LambdaTypeDeleteInput!]
  PageType: [PageTypeDeleteInput!]
  PrimitiveType: [PrimitiveTypeDeleteInput!]
  ReactNodeType: [ReactNodeTypeDeleteInput!]
  RenderPropsType: [RenderPropsTypeDeleteInput!]
  UnionType: [UnionTypeDeleteInput!]
}

input TypeBaseImplementationsDisconnectInput {
  ActionType: [ActionTypeDisconnectInput!]
  AppType: [AppTypeDisconnectInput!]
  ArrayType: [ArrayTypeDisconnectInput!]
  CodeMirrorType: [CodeMirrorTypeDisconnectInput!]
  ElementType: [ElementTypeDisconnectInput!]
  EnumType: [EnumTypeDisconnectInput!]
  InterfaceType: [InterfaceTypeDisconnectInput!]
  LambdaType: [LambdaTypeDisconnectInput!]
  PageType: [PageTypeDisconnectInput!]
  PrimitiveType: [PrimitiveTypeDisconnectInput!]
  ReactNodeType: [ReactNodeTypeDisconnectInput!]
  RenderPropsType: [RenderPropsTypeDisconnectInput!]
  UnionType: [UnionTypeDisconnectInput!]
}

input TypeBaseImplementationsUpdateInput {
  ActionType: ActionTypeUpdateInput
  AppType: AppTypeUpdateInput
  ArrayType: ArrayTypeUpdateInput
  CodeMirrorType: CodeMirrorTypeUpdateInput
  ElementType: ElementTypeUpdateInput
  EnumType: EnumTypeUpdateInput
  InterfaceType: InterfaceTypeUpdateInput
  LambdaType: LambdaTypeUpdateInput
  PageType: PageTypeUpdateInput
  PrimitiveType: PrimitiveTypeUpdateInput
  ReactNodeType: ReactNodeTypeUpdateInput
  RenderPropsType: RenderPropsTypeUpdateInput
  UnionType: UnionTypeUpdateInput
}

input TypeBaseImplementationsWhere {
  ActionType: ActionTypeWhere
  AppType: AppTypeWhere
  ArrayType: ArrayTypeWhere
  CodeMirrorType: CodeMirrorTypeWhere
  ElementType: ElementTypeWhere
  EnumType: EnumTypeWhere
  InterfaceType: InterfaceTypeWhere
  LambdaType: LambdaTypeWhere
  PageType: PageTypeWhere
  PrimitiveType: PrimitiveTypeWhere
  ReactNodeType: ReactNodeTypeWhere
  RenderPropsType: RenderPropsTypeWhere
  UnionType: UnionTypeWhere
}

input TypeBaseOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TypeBaseSort objects to sort TypeBases by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TypeBaseSort]
}

input TypeBaseOwnerAggregateInput {
  AND: [TypeBaseOwnerAggregateInput!]
  OR: [TypeBaseOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: TypeBaseOwnerEdgeAggregationWhereInput
  node: TypeBaseOwnerNodeAggregationWhereInput
}

input TypeBaseOwnerConnectFieldInput {
  connect: UserConnectInput
  edge: OwnedByCreateInput!
  where: UserConnectWhere
}

input TypeBaseOwnerConnectOrCreateFieldInput {
  onCreate: TypeBaseOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input TypeBaseOwnerConnectOrCreateFieldInputOnCreate {
  edge: OwnedByCreateInput!
  node: UserOnCreateInput!
}

type TypeBaseOwnerConnection {
  edges: [TypeBaseOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TypeBaseOwnerConnectionSort {
  edge: OwnedBySort
  node: UserSort
}

input TypeBaseOwnerConnectionWhere {
  AND: [TypeBaseOwnerConnectionWhere!]
  OR: [TypeBaseOwnerConnectionWhere!]
  edge: OwnedByWhere
  edge_NOT: OwnedByWhere
  node: UserWhere
  node_NOT: UserWhere
}

input TypeBaseOwnerCreateFieldInput {
  edge: OwnedByCreateInput!
  node: UserCreateInput!
}

input TypeBaseOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: TypeBaseOwnerConnectionWhere
}

input TypeBaseOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: TypeBaseOwnerConnectionWhere
}

input TypeBaseOwnerEdgeAggregationWhereInput {
  AND: [TypeBaseOwnerEdgeAggregationWhereInput!]
  OR: [TypeBaseOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input TypeBaseOwnerFieldInput {
  connect: TypeBaseOwnerConnectFieldInput
  connectOrCreate: TypeBaseOwnerConnectOrCreateFieldInput
  create: TypeBaseOwnerCreateFieldInput
}

input TypeBaseOwnerNodeAggregationWhereInput {
  AND: [TypeBaseOwnerNodeAggregationWhereInput!]
  OR: [TypeBaseOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

type TypeBaseOwnerRelationship implements OwnedBy {
  cursor: String!
  data: String!
  node: User!
  value: String
}

input TypeBaseOwnerUpdateConnectionInput {
  edge: OwnedByUpdateInput
  node: UserUpdateInput
}

input TypeBaseOwnerUpdateFieldInput {
  connect: TypeBaseOwnerConnectFieldInput
  connectOrCreate: TypeBaseOwnerConnectOrCreateFieldInput
  create: TypeBaseOwnerCreateFieldInput
  delete: TypeBaseOwnerDeleteFieldInput
  disconnect: TypeBaseOwnerDisconnectFieldInput
  update: TypeBaseOwnerUpdateConnectionInput
  where: TypeBaseOwnerConnectionWhere
}

"""
Fields to sort TypeBases by. The order in which sorts are applied is not guaranteed when specifying many fields in one TypeBaseSort object.
"""
input TypeBaseSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input TypeBaseUpdateInput {
  _on: TypeBaseImplementationsUpdateInput
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
}

input TypeBaseWhere {
  _on: TypeBaseImplementationsWhere
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: TypeBaseOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
}

enum TypeKind {
  ActionType
  AppType
  ArrayType
  CodeMirrorType
  ElementType
  EnumType
  InterfaceType
  LambdaType
  PageType
  PrimitiveType
  ReactNodeType
  RenderPropsType
  UnionType
}

type TypeReference {
  """
  The type of resource - Atom, InterfaceType, etc.
  """
  label: String!

  """
  The name of the resource referencing the type
  """
  name: String!
}

type TypeReferenceAggregateSelection {
  count: Int!
  label: StringAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input TypeReferenceCreateInput {
  label: String!
  name: String!
}

type TypeReferenceEdge {
  cursor: String!
  node: TypeReference!
}

input TypeReferenceOptions {
  limit: Int
  offset: Int

  """
  Specify one or more TypeReferenceSort objects to sort TypeReferences by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [TypeReferenceSort!]
}

"""
Fields to sort TypeReferences by. The order in which sorts are applied is not guaranteed when specifying many fields in one TypeReferenceSort object.
"""
input TypeReferenceSort {
  label: SortDirection
  name: SortDirection
}

input TypeReferenceUpdateInput {
  label: String
  name: String
}

input TypeReferenceWhere {
  AND: [TypeReferenceWhere!]
  OR: [TypeReferenceWhere!]
  label: String
  label_CONTAINS: String
  label_ENDS_WITH: String
  label_IN: [String!]
  label_NOT: String
  label_NOT_CONTAINS: String
  label_NOT_ENDS_WITH: String
  label_NOT_IN: [String!]
  label_NOT_STARTS_WITH: String
  label_STARTS_WITH: String
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
}

type TypeReferencesConnection {
  edges: [TypeReferenceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Allows picking one of a set of types
"""
type UnionType implements TypeBase & WithDescendants {
  descendantTypesIds: [ID!]!
  id: ID!
  kind: TypeKind!
  name: String!
  owner(directed: Boolean = true, options: UserOptions, where: UserWhere): User!
  ownerAggregate(
    directed: Boolean = true
    where: UserWhere
  ): UnionTypeUserOwnerAggregationSelection
  ownerConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [TypeBaseOwnerConnectionSort!]
    where: TypeBaseOwnerConnectionWhere
  ): TypeBaseOwnerConnection!
  typesOfUnionType(
    directed: Boolean = true
    options: QueryOptions
    where: AnyTypeWhere
  ): [AnyType!]!
  typesOfUnionTypeConnection(
    after: String
    directed: Boolean = true
    first: Int
    where: UnionTypeTypesOfUnionTypeConnectionWhere
  ): UnionTypeTypesOfUnionTypeConnection!
}

type UnionTypeAggregateSelection {
  count: Int!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UnionTypeConnectInput {
  owner: TypeBaseOwnerConnectFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeConnectInput
}

input UnionTypeConnectOrCreateInput {
  owner: TypeBaseOwnerConnectOrCreateFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeConnectOrCreateInput
}

input UnionTypeConnectOrCreateWhere {
  node: UnionTypeUniqueWhere!
}

input UnionTypeConnectWhere {
  node: UnionTypeWhere!
}

input UnionTypeCreateInput {
  id: ID!
  kind: TypeKind! = UnionType
  name: String!
  owner: TypeBaseOwnerFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeCreateInput
}

input UnionTypeDeleteInput {
  owner: TypeBaseOwnerDeleteFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeDeleteInput
}

input UnionTypeDisconnectInput {
  owner: TypeBaseOwnerDisconnectFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeDisconnectInput
}

type UnionTypeEdge {
  cursor: String!
  node: UnionType!
}

input UnionTypeOnCreateInput {
  id: ID!
  name: String!
}

input UnionTypeOptions {
  limit: Int
  offset: Int

  """
  Specify one or more UnionTypeSort objects to sort UnionTypes by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [UnionTypeSort!]
}

input UnionTypeOwnerAggregateInput {
  AND: [UnionTypeOwnerAggregateInput!]
  OR: [UnionTypeOwnerAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: UnionTypeOwnerEdgeAggregationWhereInput
  node: UnionTypeOwnerNodeAggregationWhereInput
}

input UnionTypeOwnerEdgeAggregationWhereInput {
  AND: [UnionTypeOwnerEdgeAggregationWhereInput!]
  OR: [UnionTypeOwnerEdgeAggregationWhereInput!]
  data_AVERAGE_EQUAL: Float
  data_AVERAGE_GT: Float
  data_AVERAGE_GTE: Float
  data_AVERAGE_LT: Float
  data_AVERAGE_LTE: Float
  data_EQUAL: String
  data_GT: Int
  data_GTE: Int
  data_LONGEST_EQUAL: Int
  data_LONGEST_GT: Int
  data_LONGEST_GTE: Int
  data_LONGEST_LT: Int
  data_LONGEST_LTE: Int
  data_LT: Int
  data_LTE: Int
  data_SHORTEST_EQUAL: Int
  data_SHORTEST_GT: Int
  data_SHORTEST_GTE: Int
  data_SHORTEST_LT: Int
  data_SHORTEST_LTE: Int
  value_AVERAGE_EQUAL: Float
  value_AVERAGE_GT: Float
  value_AVERAGE_GTE: Float
  value_AVERAGE_LT: Float
  value_AVERAGE_LTE: Float
  value_EQUAL: String
  value_GT: Int
  value_GTE: Int
  value_LONGEST_EQUAL: Int
  value_LONGEST_GT: Int
  value_LONGEST_GTE: Int
  value_LONGEST_LT: Int
  value_LONGEST_LTE: Int
  value_LT: Int
  value_LTE: Int
  value_SHORTEST_EQUAL: Int
  value_SHORTEST_GT: Int
  value_SHORTEST_GTE: Int
  value_SHORTEST_LT: Int
  value_SHORTEST_LTE: Int
}

input UnionTypeOwnerNodeAggregationWhereInput {
  AND: [UnionTypeOwnerNodeAggregationWhereInput!]
  OR: [UnionTypeOwnerNodeAggregationWhereInput!]
  auth0Id_AVERAGE_EQUAL: Float
  auth0Id_AVERAGE_GT: Float
  auth0Id_AVERAGE_GTE: Float
  auth0Id_AVERAGE_LT: Float
  auth0Id_AVERAGE_LTE: Float
  auth0Id_EQUAL: String
  auth0Id_GT: Int
  auth0Id_GTE: Int
  auth0Id_LONGEST_EQUAL: Int
  auth0Id_LONGEST_GT: Int
  auth0Id_LONGEST_GTE: Int
  auth0Id_LONGEST_LT: Int
  auth0Id_LONGEST_LTE: Int
  auth0Id_LT: Int
  auth0Id_LTE: Int
  auth0Id_SHORTEST_EQUAL: Int
  auth0Id_SHORTEST_GT: Int
  auth0Id_SHORTEST_GTE: Int
  auth0Id_SHORTEST_LT: Int
  auth0Id_SHORTEST_LTE: Int
  email_AVERAGE_EQUAL: Float
  email_AVERAGE_GT: Float
  email_AVERAGE_GTE: Float
  email_AVERAGE_LT: Float
  email_AVERAGE_LTE: Float
  email_EQUAL: String
  email_GT: Int
  email_GTE: Int
  email_LONGEST_EQUAL: Int
  email_LONGEST_GT: Int
  email_LONGEST_GTE: Int
  email_LONGEST_LT: Int
  email_LONGEST_LTE: Int
  email_LT: Int
  email_LTE: Int
  email_SHORTEST_EQUAL: Int
  email_SHORTEST_GT: Int
  email_SHORTEST_GTE: Int
  email_SHORTEST_LT: Int
  email_SHORTEST_LTE: Int
  id_EQUAL: ID
  username_AVERAGE_EQUAL: Float
  username_AVERAGE_GT: Float
  username_AVERAGE_GTE: Float
  username_AVERAGE_LT: Float
  username_AVERAGE_LTE: Float
  username_EQUAL: String
  username_GT: Int
  username_GTE: Int
  username_LONGEST_EQUAL: Int
  username_LONGEST_GT: Int
  username_LONGEST_GTE: Int
  username_LONGEST_LT: Int
  username_LONGEST_LTE: Int
  username_LT: Int
  username_LTE: Int
  username_SHORTEST_EQUAL: Int
  username_SHORTEST_GT: Int
  username_SHORTEST_GTE: Int
  username_SHORTEST_LT: Int
  username_SHORTEST_LTE: Int
}

input UnionTypeRelationInput {
  owner: TypeBaseOwnerCreateFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeCreateFieldInput
}

"""
Fields to sort UnionTypes by. The order in which sorts are applied is not guaranteed when specifying many fields in one UnionTypeSort object.
"""
input UnionTypeSort {
  id: SortDirection
  kind: SortDirection
  name: SortDirection
}

input UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput {
  connect: [ActionTypeConnectInput!]
  where: ActionTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInputOnCreate!
  where: ActionTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInputOnCreate {
  node: ActionTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeActionTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeActionTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeActionTypeConnectionWhere!]
  node: ActionTypeWhere
  node_NOT: ActionTypeWhere
}

input UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput {
  node: ActionTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeActionTypeDeleteFieldInput {
  delete: ActionTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeActionTypeDisconnectFieldInput {
  disconnect: ActionTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeActionTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeActionTypeUpdateConnectionInput {
  node: ActionTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeActionTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeActionTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeActionTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeActionTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput {
  connect: [AppTypeConnectInput!]
  where: AppTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInputOnCreate!
  where: AppTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInputOnCreate {
  node: AppTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeAppTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeAppTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeAppTypeConnectionWhere!]
  node: AppTypeWhere
  node_NOT: AppTypeWhere
}

input UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput {
  node: AppTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeAppTypeDeleteFieldInput {
  delete: AppTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeAppTypeDisconnectFieldInput {
  disconnect: AppTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeAppTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeAppTypeUpdateConnectionInput {
  node: AppTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeAppTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeAppTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeAppTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeAppTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput {
  connect: [ArrayTypeConnectInput!]
  where: ArrayTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInputOnCreate!
  where: ArrayTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInputOnCreate {
  node: ArrayTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere!]
  node: ArrayTypeWhere
  node_NOT: ArrayTypeWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput {
  node: ArrayTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeArrayTypeDeleteFieldInput {
  delete: ArrayTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeDisconnectFieldInput {
  disconnect: ArrayTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeArrayTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeArrayTypeUpdateConnectionInput {
  node: ArrayTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeArrayTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeArrayTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeArrayTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeArrayTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput {
  connect: [CodeMirrorTypeConnectInput!]
  where: CodeMirrorTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInputOnCreate!
  where: CodeMirrorTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInputOnCreate {
  node: CodeMirrorTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere!]
  node: CodeMirrorTypeWhere
  node_NOT: CodeMirrorTypeWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput {
  node: CodeMirrorTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeDeleteFieldInput {
  delete: CodeMirrorTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeDisconnectFieldInput {
  disconnect: CodeMirrorTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateConnectionInput {
  node: CodeMirrorTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeConnectInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeConnectFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeConnectFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeConnectFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeConnectFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput!]
  RenderPropsType: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput!]
}

input UnionTypeTypesOfUnionTypeConnectOrCreateInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeConnectOrCreateFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeConnectOrCreateFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeConnectOrCreateFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectOrCreateFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput!]
  RenderPropsType: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectOrCreateFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput!]
}

type UnionTypeTypesOfUnionTypeConnection {
  edges: [UnionTypeTypesOfUnionTypeRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UnionTypeTypesOfUnionTypeConnectionWhere {
  ActionType: UnionTypeTypesOfUnionTypeActionTypeConnectionWhere
  AppType: UnionTypeTypesOfUnionTypeAppTypeConnectionWhere
  ArrayType: UnionTypeTypesOfUnionTypeArrayTypeConnectionWhere
  CodeMirrorType: UnionTypeTypesOfUnionTypeCodeMirrorTypeConnectionWhere
  ElementType: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
  EnumType: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
  InterfaceType: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
  LambdaType: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
  PageType: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
  PrimitiveType: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
  ReactNodeType: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
  RenderPropsType: UnionTypeTypesOfUnionTypeRenderPropsTypeConnectionWhere
  UnionType: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeCreateFieldInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeCreateFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeCreateFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeCreateFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeCreateFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeCreateFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput!]
  RenderPropsType: [UnionTypeTypesOfUnionTypeRenderPropsTypeCreateFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeCreateInput {
  ActionType: UnionTypeTypesOfUnionTypeActionTypeFieldInput
  AppType: UnionTypeTypesOfUnionTypeAppTypeFieldInput
  ArrayType: UnionTypeTypesOfUnionTypeArrayTypeFieldInput
  CodeMirrorType: UnionTypeTypesOfUnionTypeCodeMirrorTypeFieldInput
  ElementType: UnionTypeTypesOfUnionTypeElementTypeFieldInput
  EnumType: UnionTypeTypesOfUnionTypeEnumTypeFieldInput
  InterfaceType: UnionTypeTypesOfUnionTypeInterfaceTypeFieldInput
  LambdaType: UnionTypeTypesOfUnionTypeLambdaTypeFieldInput
  PageType: UnionTypeTypesOfUnionTypePageTypeFieldInput
  PrimitiveType: UnionTypeTypesOfUnionTypePrimitiveTypeFieldInput
  ReactNodeType: UnionTypeTypesOfUnionTypeReactNodeTypeFieldInput
  RenderPropsType: UnionTypeTypesOfUnionTypeRenderPropsTypeFieldInput
  UnionType: UnionTypeTypesOfUnionTypeUnionTypeFieldInput
}

input UnionTypeTypesOfUnionTypeDeleteInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeDeleteFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeDeleteFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeDeleteFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDeleteFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeDeleteFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeDeleteFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeDeleteFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeDeleteFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeDeleteFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeDeleteFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeDeleteFieldInput!]
  RenderPropsType: [UnionTypeTypesOfUnionTypeRenderPropsTypeDeleteFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeDeleteFieldInput!]
}

input UnionTypeTypesOfUnionTypeDisconnectInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeDisconnectFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeDisconnectFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeDisconnectFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeDisconnectFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeDisconnectFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeDisconnectFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeDisconnectFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeDisconnectFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeDisconnectFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeDisconnectFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeDisconnectFieldInput!]
  RenderPropsType: [UnionTypeTypesOfUnionTypeRenderPropsTypeDisconnectFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeDisconnectFieldInput!]
}

input UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput {
  connect: [ElementTypeConnectInput!]
  where: ElementTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInputOnCreate!
  where: ElementTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInputOnCreate {
  node: ElementTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeElementTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeElementTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeElementTypeConnectionWhere!]
  node: ElementTypeWhere
  node_NOT: ElementTypeWhere
}

input UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput {
  node: ElementTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeElementTypeDeleteFieldInput {
  delete: ElementTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeElementTypeDisconnectFieldInput {
  disconnect: ElementTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeElementTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeElementTypeUpdateConnectionInput {
  node: ElementTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeElementTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeElementTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeElementTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeElementTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeElementTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeElementTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeElementTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeElementTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput {
  connect: [EnumTypeConnectInput!]
  where: EnumTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInputOnCreate!
  where: EnumTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInputOnCreate {
  node: EnumTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere!]
  node: EnumTypeWhere
  node_NOT: EnumTypeWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput {
  node: EnumTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeEnumTypeDeleteFieldInput {
  delete: EnumTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeDisconnectFieldInput {
  disconnect: EnumTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeEnumTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeEnumTypeUpdateConnectionInput {
  node: EnumTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeEnumTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeEnumTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeEnumTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeEnumTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeEnumTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeEnumTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeEnumTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeEnumTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput {
  connect: [InterfaceTypeConnectInput!]
  where: InterfaceTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInputOnCreate!
  where: InterfaceTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInputOnCreate {
  node: InterfaceTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere!]
  node: InterfaceTypeWhere
  node_NOT: InterfaceTypeWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput {
  node: InterfaceTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeInterfaceTypeDeleteFieldInput {
  delete: InterfaceTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeDisconnectFieldInput {
  disconnect: InterfaceTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeInterfaceTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeInterfaceTypeUpdateConnectionInput {
  node: InterfaceTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeInterfaceTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeInterfaceTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeInterfaceTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeInterfaceTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeInterfaceTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeInterfaceTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeInterfaceTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput {
  connect: [LambdaTypeConnectInput!]
  where: LambdaTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInputOnCreate!
  where: LambdaTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInputOnCreate {
  node: LambdaTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere!]
  node: LambdaTypeWhere
  node_NOT: LambdaTypeWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput {
  node: LambdaTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeLambdaTypeDeleteFieldInput {
  delete: LambdaTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeDisconnectFieldInput {
  disconnect: LambdaTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeLambdaTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeLambdaTypeUpdateConnectionInput {
  node: LambdaTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeLambdaTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeLambdaTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeLambdaTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeLambdaTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeLambdaTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeLambdaTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeLambdaTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeLambdaTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePageTypeConnectFieldInput {
  connect: [PageTypeConnectInput!]
  where: PageTypeConnectWhere
}

input UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInputOnCreate!
  where: PageTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInputOnCreate {
  node: PageTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypePageTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypePageTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypePageTypeConnectionWhere!]
  node: PageTypeWhere
  node_NOT: PageTypeWhere
}

input UnionTypeTypesOfUnionTypePageTypeCreateFieldInput {
  node: PageTypeCreateInput!
}

input UnionTypeTypesOfUnionTypePageTypeDeleteFieldInput {
  delete: PageTypeDeleteInput
  where: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePageTypeDisconnectFieldInput {
  disconnect: PageTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePageTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypePageTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePageTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypePageTypeUpdateConnectionInput {
  node: PageTypeUpdateInput
}

input UnionTypeTypesOfUnionTypePageTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypePageTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePageTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePageTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypePageTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypePageTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypePageTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypePageTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput {
  connect: [PrimitiveTypeConnectInput!]
  where: PrimitiveTypeConnectWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInputOnCreate!
  where: PrimitiveTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInputOnCreate {
  node: PrimitiveTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere!]
  node: PrimitiveTypeWhere
  node_NOT: PrimitiveTypeWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput {
  node: PrimitiveTypeCreateInput!
}

input UnionTypeTypesOfUnionTypePrimitiveTypeDeleteFieldInput {
  delete: PrimitiveTypeDeleteInput
  where: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeDisconnectFieldInput {
  disconnect: PrimitiveTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypePrimitiveTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypePrimitiveTypeUpdateConnectionInput {
  node: PrimitiveTypeUpdateInput
}

input UnionTypeTypesOfUnionTypePrimitiveTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypePrimitiveTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypePrimitiveTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypePrimitiveTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypePrimitiveTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypePrimitiveTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypePrimitiveTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput {
  connect: [ReactNodeTypeConnectInput!]
  where: ReactNodeTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInputOnCreate!
  where: ReactNodeTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInputOnCreate {
  node: ReactNodeTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere!]
  node: ReactNodeTypeWhere
  node_NOT: ReactNodeTypeWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput {
  node: ReactNodeTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeReactNodeTypeDeleteFieldInput {
  delete: ReactNodeTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeDisconnectFieldInput {
  disconnect: ReactNodeTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeReactNodeTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeReactNodeTypeUpdateConnectionInput {
  node: ReactNodeTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeReactNodeTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeReactNodeTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeReactNodeTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeReactNodeTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeReactNodeTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeReactNodeTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeReactNodeTypeConnectionWhere
}

type UnionTypeTypesOfUnionTypeRelationship {
  cursor: String!
  node: AnyType!
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeConnectFieldInput {
  connect: [RenderPropsTypeConnectInput!]
  where: RenderPropsTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeRenderPropsTypeConnectOrCreateFieldInputOnCreate!
  where: RenderPropsTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeConnectOrCreateFieldInputOnCreate {
  node: RenderPropsTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectionWhere!]
  node: RenderPropsTypeWhere
  node_NOT: RenderPropsTypeWhere
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeCreateFieldInput {
  node: RenderPropsTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeDeleteFieldInput {
  delete: RenderPropsTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeRenderPropsTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeDisconnectFieldInput {
  disconnect: RenderPropsTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeRenderPropsTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeRenderPropsTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeUpdateConnectionInput {
  node: RenderPropsTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeRenderPropsTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeRenderPropsTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeRenderPropsTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeRenderPropsTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeRenderPropsTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeRenderPropsTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeRenderPropsTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput {
  connect: [UnionTypeConnectInput!]
  where: UnionTypeConnectWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput {
  onCreate: UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInputOnCreate!
  where: UnionTypeConnectOrCreateWhere!
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInputOnCreate {
  node: UnionTypeOnCreateInput!
}

input UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere {
  AND: [UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere!]
  OR: [UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere!]
  node: UnionTypeWhere
  node_NOT: UnionTypeWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput {
  node: UnionTypeCreateInput!
}

input UnionTypeTypesOfUnionTypeUnionTypeDeleteFieldInput {
  delete: UnionTypeDeleteInput
  where: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeDisconnectFieldInput {
  disconnect: UnionTypeDisconnectInput
  where: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUnionTypeFieldInput {
  connect: [UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput!]
}

input UnionTypeTypesOfUnionTypeUnionTypeUpdateConnectionInput {
  node: UnionTypeUpdateInput
}

input UnionTypeTypesOfUnionTypeUnionTypeUpdateFieldInput {
  connect: [UnionTypeTypesOfUnionTypeUnionTypeConnectFieldInput!]
  connectOrCreate: [UnionTypeTypesOfUnionTypeUnionTypeConnectOrCreateFieldInput!]
  create: [UnionTypeTypesOfUnionTypeUnionTypeCreateFieldInput!]
  delete: [UnionTypeTypesOfUnionTypeUnionTypeDeleteFieldInput!]
  disconnect: [UnionTypeTypesOfUnionTypeUnionTypeDisconnectFieldInput!]
  update: UnionTypeTypesOfUnionTypeUnionTypeUpdateConnectionInput
  where: UnionTypeTypesOfUnionTypeUnionTypeConnectionWhere
}

input UnionTypeTypesOfUnionTypeUpdateInput {
  ActionType: [UnionTypeTypesOfUnionTypeActionTypeUpdateFieldInput!]
  AppType: [UnionTypeTypesOfUnionTypeAppTypeUpdateFieldInput!]
  ArrayType: [UnionTypeTypesOfUnionTypeArrayTypeUpdateFieldInput!]
  CodeMirrorType: [UnionTypeTypesOfUnionTypeCodeMirrorTypeUpdateFieldInput!]
  ElementType: [UnionTypeTypesOfUnionTypeElementTypeUpdateFieldInput!]
  EnumType: [UnionTypeTypesOfUnionTypeEnumTypeUpdateFieldInput!]
  InterfaceType: [UnionTypeTypesOfUnionTypeInterfaceTypeUpdateFieldInput!]
  LambdaType: [UnionTypeTypesOfUnionTypeLambdaTypeUpdateFieldInput!]
  PageType: [UnionTypeTypesOfUnionTypePageTypeUpdateFieldInput!]
  PrimitiveType: [UnionTypeTypesOfUnionTypePrimitiveTypeUpdateFieldInput!]
  ReactNodeType: [UnionTypeTypesOfUnionTypeReactNodeTypeUpdateFieldInput!]
  RenderPropsType: [UnionTypeTypesOfUnionTypeRenderPropsTypeUpdateFieldInput!]
  UnionType: [UnionTypeTypesOfUnionTypeUnionTypeUpdateFieldInput!]
}

input UnionTypeUniqueWhere {
  id: ID
  name: String
}

input UnionTypeUpdateInput {
  id: ID
  name: String
  owner: TypeBaseOwnerUpdateFieldInput
  typesOfUnionType: UnionTypeTypesOfUnionTypeUpdateInput
}

type UnionTypeUserOwnerAggregationSelection {
  count: Int!
  edge: UnionTypeUserOwnerEdgeAggregateSelection
  node: UnionTypeUserOwnerNodeAggregateSelection
}

type UnionTypeUserOwnerEdgeAggregateSelection {
  data: StringAggregateSelectionNonNullable!
  value: StringAggregateSelectionNullable!
}

type UnionTypeUserOwnerNodeAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

input UnionTypeWhere {
  AND: [UnionTypeWhere!]
  OR: [UnionTypeWhere!]
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  kind: TypeKind
  kind_IN: [TypeKind!]
  kind_NOT: TypeKind
  kind_NOT_IN: [TypeKind!]
  name: String
  name_CONTAINS: String
  name_ENDS_WITH: String
  name_IN: [String!]
  name_NOT: String
  name_NOT_CONTAINS: String
  name_NOT_ENDS_WITH: String
  name_NOT_IN: [String!]
  name_NOT_STARTS_WITH: String
  name_STARTS_WITH: String
  owner: UserWhere
  ownerAggregate: UnionTypeOwnerAggregateInput
  ownerConnection: TypeBaseOwnerConnectionWhere
  ownerConnection_NOT: TypeBaseOwnerConnectionWhere
  owner_NOT: UserWhere
  typesOfUnionTypeConnection_ALL: UnionTypeTypesOfUnionTypeConnectionWhere
  typesOfUnionTypeConnection_NONE: UnionTypeTypesOfUnionTypeConnectionWhere
  typesOfUnionTypeConnection_SINGLE: UnionTypeTypesOfUnionTypeConnectionWhere
  typesOfUnionTypeConnection_SOME: UnionTypeTypesOfUnionTypeConnectionWhere
}

type UnionTypesConnection {
  edges: [UnionTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UpdateActionTypesMutationResponse {
  actionTypes: [ActionType!]!
  info: UpdateInfo!
}

type UpdateApiActionsMutationResponse {
  apiActions: [ApiAction!]!
  info: UpdateInfo!
}

type UpdateAppTypesMutationResponse {
  appTypes: [AppType!]!
  info: UpdateInfo!
}

type UpdateAppsMutationResponse {
  apps: [App!]!
  info: UpdateInfo!
}

type UpdateArrayTypesMutationResponse {
  arrayTypes: [ArrayType!]!
  info: UpdateInfo!
}

type UpdateAtomsMutationResponse {
  atoms: [Atom!]!
  info: UpdateInfo!
}

type UpdateCodeActionsMutationResponse {
  codeActions: [CodeAction!]!
  info: UpdateInfo!
}

type UpdateCodeMirrorTypesMutationResponse {
  codeMirrorTypes: [CodeMirrorType!]!
  info: UpdateInfo!
}

type UpdateComponentsMutationResponse {
  components: [Component!]!
  info: UpdateInfo!
}

type UpdateCreateInfosMutationResponse {
  createInfos: [CreateInfo!]!
  info: UpdateInfo!
}

type UpdateDeleteInfosMutationResponse {
  deleteInfos: [DeleteInfo!]!
  info: UpdateInfo!
}

input UpdateDomainMutationInput {
  appId: String!
  id: ID!
  name: String!
}

type UpdateDomainsMutationResponse {
  domains: [Domain!]!
  info: UpdateInfo!
}

type UpdateElementTypesMutationResponse {
  elementTypes: [ElementType!]!
  info: UpdateInfo!
}

type UpdateElementsMutationResponse {
  elements: [Element!]!
  info: UpdateInfo!
}

type UpdateEnumTypeValuesMutationResponse {
  enumTypeValues: [EnumTypeValue!]!
  info: UpdateInfo!
}

type UpdateEnumTypesMutationResponse {
  enumTypes: [EnumType!]!
  info: UpdateInfo!
}

type UpdateHooksMutationResponse {
  hooks: [Hook!]!
  info: UpdateInfo!
}

type UpdateInfo {
  bookmark: String
  nodesCreated: Int!
  nodesDeleted: Int!
  relationshipsCreated: Int!
  relationshipsDeleted: Int!
}

type UpdateInterfaceTypesMutationResponse {
  info: UpdateInfo!
  interfaceTypes: [InterfaceType!]!
}

type UpdateLambdaTypesMutationResponse {
  info: UpdateInfo!
  lambdaTypes: [LambdaType!]!
}

type UpdatePageTypesMutationResponse {
  info: UpdateInfo!
  pageTypes: [PageType!]!
}

type UpdatePagesMutationResponse {
  info: UpdateInfo!
  pages: [Page!]!
}

type UpdatePrimitiveTypesMutationResponse {
  info: UpdateInfo!
  primitiveTypes: [PrimitiveType!]!
}

type UpdatePropMapBindingsMutationResponse {
  info: UpdateInfo!
  propMapBindings: [PropMapBinding!]!
}

type UpdatePropsMutationResponse {
  info: UpdateInfo!
  props: [Prop!]!
}

type UpdateReactNodeTypesMutationResponse {
  info: UpdateInfo!
  reactNodeTypes: [ReactNodeType!]!
}

type UpdateRenderPropsTypesMutationResponse {
  info: UpdateInfo!
  renderPropsTypes: [RenderPropsType!]!
}

type UpdateResetDatabaseMutationResponsesMutationResponse {
  info: UpdateInfo!
  resetDatabaseMutationResponses: [ResetDatabaseMutationResponse!]!
}

type UpdateResourcesMutationResponse {
  info: UpdateInfo!
  resources: [Resource!]!
}

type UpdateStoresMutationResponse {
  info: UpdateInfo!
  stores: [Store!]!
}

type UpdateTagsMutationResponse {
  info: UpdateInfo!
  tags: [Tag!]!
}

type UpdateTypeReferencesMutationResponse {
  info: UpdateInfo!
  typeReferences: [TypeReference!]!
}

type UpdateUnionTypesMutationResponse {
  info: UpdateInfo!
  unionTypes: [UnionType!]!
}

type UpdateVercelDomainConfigDataMutationResponse {
  info: UpdateInfo!
  vercelDomainConfigData: [VercelDomainConfigData!]!
}

type UpdateVercelProjectDomainDataMutationResponse {
  info: UpdateInfo!
  vercelProjectDomainData: [VercelProjectDomainData!]!
}

type User {
  apps(directed: Boolean = true, options: AppOptions, where: AppWhere): [App!]!
  appsAggregate(
    directed: Boolean = true
    where: AppWhere
  ): UserAppAppsAggregationSelection
  appsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserAppsConnectionSort!]
    where: UserAppsConnectionWhere
  ): UserAppsConnection!
  auth0Id: String!
  components(
    directed: Boolean = true
    options: ComponentOptions
    where: ComponentWhere
  ): [Component!]!
  componentsAggregate(
    directed: Boolean = true
    where: ComponentWhere
  ): UserComponentComponentsAggregationSelection
  componentsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserComponentsConnectionSort!]
    where: UserComponentsConnectionWhere
  ): UserComponentsConnection!
  elements(
    directed: Boolean = true
    options: ElementOptions
    where: ElementWhere
  ): [Element!]!
  elementsAggregate(
    directed: Boolean = true
    where: ElementWhere
  ): UserElementElementsAggregationSelection
  elementsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserElementsConnectionSort!]
    where: UserElementsConnectionWhere
  ): UserElementsConnection!
  email: String!
  id: ID!
  roles: [Role!]!
  tags(directed: Boolean = true, options: TagOptions, where: TagWhere): [Tag!]!
  tagsAggregate(
    directed: Boolean = true
    where: TagWhere
  ): UserTagTagsAggregationSelection
  tagsConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserTagsConnectionSort!]
    where: UserTagsConnectionWhere
  ): UserTagsConnection!
  types(
    directed: Boolean = true
    options: TypeBaseOptions
    where: TypeBaseWhere
  ): [TypeBase!]!
  typesConnection(
    after: String
    directed: Boolean = true
    first: Int
    sort: [UserTypesConnectionSort!]
    where: UserTypesConnectionWhere
  ): UserTypesConnection!
  username: String!
}

type UserAggregateSelection {
  auth0Id: StringAggregateSelectionNonNullable!
  count: Int!
  email: StringAggregateSelectionNonNullable!
  id: IDAggregateSelectionNonNullable!
  username: StringAggregateSelectionNonNullable!
}

type UserAppAppsAggregationSelection {
  count: Int!
  node: UserAppAppsNodeAggregateSelection
}

type UserAppAppsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
  slug: StringAggregateSelectionNonNullable!
}

input UserAppsAggregateInput {
  AND: [UserAppsAggregateInput!]
  OR: [UserAppsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserAppsNodeAggregationWhereInput
}

input UserAppsConnectFieldInput {
  connect: [AppConnectInput!]
  where: AppConnectWhere
}

input UserAppsConnectOrCreateFieldInput {
  onCreate: UserAppsConnectOrCreateFieldInputOnCreate!
  where: AppConnectOrCreateWhere!
}

input UserAppsConnectOrCreateFieldInputOnCreate {
  node: AppOnCreateInput!
}

type UserAppsConnection {
  edges: [UserAppsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserAppsConnectionSort {
  node: AppSort
}

input UserAppsConnectionWhere {
  AND: [UserAppsConnectionWhere!]
  OR: [UserAppsConnectionWhere!]
  node: AppWhere
  node_NOT: AppWhere
}

input UserAppsCreateFieldInput {
  node: AppCreateInput!
}

input UserAppsDeleteFieldInput {
  delete: AppDeleteInput
  where: UserAppsConnectionWhere
}

input UserAppsDisconnectFieldInput {
  disconnect: AppDisconnectInput
  where: UserAppsConnectionWhere
}

input UserAppsFieldInput {
  connect: [UserAppsConnectFieldInput!]
  connectOrCreate: [UserAppsConnectOrCreateFieldInput!]
  create: [UserAppsCreateFieldInput!]
}

input UserAppsNodeAggregationWhereInput {
  AND: [UserAppsNodeAggregationWhereInput!]
  OR: [UserAppsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  slug_AVERAGE_EQUAL: Float
  slug_AVERAGE_GT: Float
  slug_AVERAGE_GTE: Float
  slug_AVERAGE_LT: Float
  slug_AVERAGE_LTE: Float
  slug_EQUAL: String
  slug_GT: Int
  slug_GTE: Int
  slug_LONGEST_EQUAL: Int
  slug_LONGEST_GT: Int
  slug_LONGEST_GTE: Int
  slug_LONGEST_LT: Int
  slug_LONGEST_LTE: Int
  slug_LT: Int
  slug_LTE: Int
  slug_SHORTEST_EQUAL: Int
  slug_SHORTEST_GT: Int
  slug_SHORTEST_GTE: Int
  slug_SHORTEST_LT: Int
  slug_SHORTEST_LTE: Int
}

type UserAppsRelationship {
  cursor: String!
  node: App!
}

input UserAppsUpdateConnectionInput {
  node: AppUpdateInput
}

input UserAppsUpdateFieldInput {
  connect: [UserAppsConnectFieldInput!]
  connectOrCreate: [UserAppsConnectOrCreateFieldInput!]
  create: [UserAppsCreateFieldInput!]
  delete: [UserAppsDeleteFieldInput!]
  disconnect: [UserAppsDisconnectFieldInput!]
  update: UserAppsUpdateConnectionInput
  where: UserAppsConnectionWhere
}

type UserComponentComponentsAggregationSelection {
  count: Int!
  node: UserComponentComponentsNodeAggregateSelection
}

type UserComponentComponentsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserComponentsAggregateInput {
  AND: [UserComponentsAggregateInput!]
  OR: [UserComponentsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserComponentsNodeAggregationWhereInput
}

input UserComponentsConnectFieldInput {
  connect: [ComponentConnectInput!]
  where: ComponentConnectWhere
}

input UserComponentsConnectOrCreateFieldInput {
  onCreate: UserComponentsConnectOrCreateFieldInputOnCreate!
  where: ComponentConnectOrCreateWhere!
}

input UserComponentsConnectOrCreateFieldInputOnCreate {
  node: ComponentOnCreateInput!
}

type UserComponentsConnection {
  edges: [UserComponentsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserComponentsConnectionSort {
  node: ComponentSort
}

input UserComponentsConnectionWhere {
  AND: [UserComponentsConnectionWhere!]
  OR: [UserComponentsConnectionWhere!]
  node: ComponentWhere
  node_NOT: ComponentWhere
}

input UserComponentsCreateFieldInput {
  node: ComponentCreateInput!
}

input UserComponentsDeleteFieldInput {
  delete: ComponentDeleteInput
  where: UserComponentsConnectionWhere
}

input UserComponentsDisconnectFieldInput {
  disconnect: ComponentDisconnectInput
  where: UserComponentsConnectionWhere
}

input UserComponentsFieldInput {
  connect: [UserComponentsConnectFieldInput!]
  connectOrCreate: [UserComponentsConnectOrCreateFieldInput!]
  create: [UserComponentsCreateFieldInput!]
}

input UserComponentsNodeAggregationWhereInput {
  AND: [UserComponentsNodeAggregationWhereInput!]
  OR: [UserComponentsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type UserComponentsRelationship {
  cursor: String!
  node: Component!
}

input UserComponentsUpdateConnectionInput {
  node: ComponentUpdateInput
}

input UserComponentsUpdateFieldInput {
  connect: [UserComponentsConnectFieldInput!]
  connectOrCreate: [UserComponentsConnectOrCreateFieldInput!]
  create: [UserComponentsCreateFieldInput!]
  delete: [UserComponentsDeleteFieldInput!]
  disconnect: [UserComponentsDisconnectFieldInput!]
  update: UserComponentsUpdateConnectionInput
  where: UserComponentsConnectionWhere
}

input UserConnectInput {
  apps: [UserAppsConnectFieldInput!]
  components: [UserComponentsConnectFieldInput!]
  elements: [UserElementsConnectFieldInput!]
  tags: [UserTagsConnectFieldInput!]
  types: [UserTypesConnectFieldInput!]
}

input UserConnectOrCreateWhere {
  node: UserUniqueWhere!
}

input UserConnectWhere {
  node: UserWhere!
}

input UserCreateInput {
  apps: UserAppsFieldInput
  auth0Id: String!
  components: UserComponentsFieldInput
  elements: UserElementsFieldInput
  email: String!
  roles: [Role!]!
  tags: UserTagsFieldInput
  types: UserTypesFieldInput
  username: String!
}

input UserDeleteInput {
  apps: [UserAppsDeleteFieldInput!]
  components: [UserComponentsDeleteFieldInput!]
  elements: [UserElementsDeleteFieldInput!]
  tags: [UserTagsDeleteFieldInput!]
  types: [UserTypesDeleteFieldInput!]
}

input UserDisconnectInput {
  apps: [UserAppsDisconnectFieldInput!]
  components: [UserComponentsDisconnectFieldInput!]
  elements: [UserElementsDisconnectFieldInput!]
  tags: [UserTagsDisconnectFieldInput!]
  types: [UserTypesDisconnectFieldInput!]
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserElementElementsAggregationSelection {
  count: Int!
  node: UserElementElementsNodeAggregateSelection
}

type UserElementElementsNodeAggregateSelection {
  customCss: StringAggregateSelectionNullable!
  guiCss: StringAggregateSelectionNullable!
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNullable!
  postRenderActionId: StringAggregateSelectionNullable!
  preRenderActionId: StringAggregateSelectionNullable!
  propTransformationJs: StringAggregateSelectionNullable!
  renderForEachPropKey: StringAggregateSelectionNullable!
  renderIfPropKey: StringAggregateSelectionNullable!
}

input UserElementsAggregateInput {
  AND: [UserElementsAggregateInput!]
  OR: [UserElementsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserElementsNodeAggregationWhereInput
}

input UserElementsConnectFieldInput {
  connect: [ElementConnectInput!]
  where: ElementConnectWhere
}

input UserElementsConnectOrCreateFieldInput {
  onCreate: UserElementsConnectOrCreateFieldInputOnCreate!
  where: ElementConnectOrCreateWhere!
}

input UserElementsConnectOrCreateFieldInputOnCreate {
  node: ElementOnCreateInput!
}

type UserElementsConnection {
  edges: [UserElementsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserElementsConnectionSort {
  node: ElementSort
}

input UserElementsConnectionWhere {
  AND: [UserElementsConnectionWhere!]
  OR: [UserElementsConnectionWhere!]
  node: ElementWhere
  node_NOT: ElementWhere
}

input UserElementsCreateFieldInput {
  node: ElementCreateInput!
}

input UserElementsDeleteFieldInput {
  delete: ElementDeleteInput
  where: UserElementsConnectionWhere
}

input UserElementsDisconnectFieldInput {
  disconnect: ElementDisconnectInput
  where: UserElementsConnectionWhere
}

input UserElementsFieldInput {
  connect: [UserElementsConnectFieldInput!]
  connectOrCreate: [UserElementsConnectOrCreateFieldInput!]
  create: [UserElementsCreateFieldInput!]
}

input UserElementsNodeAggregationWhereInput {
  AND: [UserElementsNodeAggregationWhereInput!]
  OR: [UserElementsNodeAggregationWhereInput!]
  customCss_AVERAGE_EQUAL: Float
  customCss_AVERAGE_GT: Float
  customCss_AVERAGE_GTE: Float
  customCss_AVERAGE_LT: Float
  customCss_AVERAGE_LTE: Float
  customCss_EQUAL: String
  customCss_GT: Int
  customCss_GTE: Int
  customCss_LONGEST_EQUAL: Int
  customCss_LONGEST_GT: Int
  customCss_LONGEST_GTE: Int
  customCss_LONGEST_LT: Int
  customCss_LONGEST_LTE: Int
  customCss_LT: Int
  customCss_LTE: Int
  customCss_SHORTEST_EQUAL: Int
  customCss_SHORTEST_GT: Int
  customCss_SHORTEST_GTE: Int
  customCss_SHORTEST_LT: Int
  customCss_SHORTEST_LTE: Int
  guiCss_AVERAGE_EQUAL: Float
  guiCss_AVERAGE_GT: Float
  guiCss_AVERAGE_GTE: Float
  guiCss_AVERAGE_LT: Float
  guiCss_AVERAGE_LTE: Float
  guiCss_EQUAL: String
  guiCss_GT: Int
  guiCss_GTE: Int
  guiCss_LONGEST_EQUAL: Int
  guiCss_LONGEST_GT: Int
  guiCss_LONGEST_GTE: Int
  guiCss_LONGEST_LT: Int
  guiCss_LONGEST_LTE: Int
  guiCss_LT: Int
  guiCss_LTE: Int
  guiCss_SHORTEST_EQUAL: Int
  guiCss_SHORTEST_GT: Int
  guiCss_SHORTEST_GTE: Int
  guiCss_SHORTEST_LT: Int
  guiCss_SHORTEST_LTE: Int
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
  postRenderActionId_AVERAGE_EQUAL: Float
  postRenderActionId_AVERAGE_GT: Float
  postRenderActionId_AVERAGE_GTE: Float
  postRenderActionId_AVERAGE_LT: Float
  postRenderActionId_AVERAGE_LTE: Float
  postRenderActionId_EQUAL: String
  postRenderActionId_GT: Int
  postRenderActionId_GTE: Int
  postRenderActionId_LONGEST_EQUAL: Int
  postRenderActionId_LONGEST_GT: Int
  postRenderActionId_LONGEST_GTE: Int
  postRenderActionId_LONGEST_LT: Int
  postRenderActionId_LONGEST_LTE: Int
  postRenderActionId_LT: Int
  postRenderActionId_LTE: Int
  postRenderActionId_SHORTEST_EQUAL: Int
  postRenderActionId_SHORTEST_GT: Int
  postRenderActionId_SHORTEST_GTE: Int
  postRenderActionId_SHORTEST_LT: Int
  postRenderActionId_SHORTEST_LTE: Int
  preRenderActionId_AVERAGE_EQUAL: Float
  preRenderActionId_AVERAGE_GT: Float
  preRenderActionId_AVERAGE_GTE: Float
  preRenderActionId_AVERAGE_LT: Float
  preRenderActionId_AVERAGE_LTE: Float
  preRenderActionId_EQUAL: String
  preRenderActionId_GT: Int
  preRenderActionId_GTE: Int
  preRenderActionId_LONGEST_EQUAL: Int
  preRenderActionId_LONGEST_GT: Int
  preRenderActionId_LONGEST_GTE: Int
  preRenderActionId_LONGEST_LT: Int
  preRenderActionId_LONGEST_LTE: Int
  preRenderActionId_LT: Int
  preRenderActionId_LTE: Int
  preRenderActionId_SHORTEST_EQUAL: Int
  preRenderActionId_SHORTEST_GT: Int
  preRenderActionId_SHORTEST_GTE: Int
  preRenderActionId_SHORTEST_LT: Int
  preRenderActionId_SHORTEST_LTE: Int
  propTransformationJs_AVERAGE_EQUAL: Float
  propTransformationJs_AVERAGE_GT: Float
  propTransformationJs_AVERAGE_GTE: Float
  propTransformationJs_AVERAGE_LT: Float
  propTransformationJs_AVERAGE_LTE: Float
  propTransformationJs_EQUAL: String
  propTransformationJs_GT: Int
  propTransformationJs_GTE: Int
  propTransformationJs_LONGEST_EQUAL: Int
  propTransformationJs_LONGEST_GT: Int
  propTransformationJs_LONGEST_GTE: Int
  propTransformationJs_LONGEST_LT: Int
  propTransformationJs_LONGEST_LTE: Int
  propTransformationJs_LT: Int
  propTransformationJs_LTE: Int
  propTransformationJs_SHORTEST_EQUAL: Int
  propTransformationJs_SHORTEST_GT: Int
  propTransformationJs_SHORTEST_GTE: Int
  propTransformationJs_SHORTEST_LT: Int
  propTransformationJs_SHORTEST_LTE: Int
  renderForEachPropKey_AVERAGE_EQUAL: Float
  renderForEachPropKey_AVERAGE_GT: Float
  renderForEachPropKey_AVERAGE_GTE: Float
  renderForEachPropKey_AVERAGE_LT: Float
  renderForEachPropKey_AVERAGE_LTE: Float
  renderForEachPropKey_EQUAL: String
  renderForEachPropKey_GT: Int
  renderForEachPropKey_GTE: Int
  renderForEachPropKey_LONGEST_EQUAL: Int
  renderForEachPropKey_LONGEST_GT: Int
  renderForEachPropKey_LONGEST_GTE: Int
  renderForEachPropKey_LONGEST_LT: Int
  renderForEachPropKey_LONGEST_LTE: Int
  renderForEachPropKey_LT: Int
  renderForEachPropKey_LTE: Int
  renderForEachPropKey_SHORTEST_EQUAL: Int
  renderForEachPropKey_SHORTEST_GT: Int
  renderForEachPropKey_SHORTEST_GTE: Int
  renderForEachPropKey_SHORTEST_LT: Int
  renderForEachPropKey_SHORTEST_LTE: Int
  renderIfPropKey_AVERAGE_EQUAL: Float
  renderIfPropKey_AVERAGE_GT: Float
  renderIfPropKey_AVERAGE_GTE: Float
  renderIfPropKey_AVERAGE_LT: Float
  renderIfPropKey_AVERAGE_LTE: Float
  renderIfPropKey_EQUAL: String
  renderIfPropKey_GT: Int
  renderIfPropKey_GTE: Int
  renderIfPropKey_LONGEST_EQUAL: Int
  renderIfPropKey_LONGEST_GT: Int
  renderIfPropKey_LONGEST_GTE: Int
  renderIfPropKey_LONGEST_LT: Int
  renderIfPropKey_LONGEST_LTE: Int
  renderIfPropKey_LT: Int
  renderIfPropKey_LTE: Int
  renderIfPropKey_SHORTEST_EQUAL: Int
  renderIfPropKey_SHORTEST_GT: Int
  renderIfPropKey_SHORTEST_GTE: Int
  renderIfPropKey_SHORTEST_LT: Int
  renderIfPropKey_SHORTEST_LTE: Int
}

type UserElementsRelationship {
  cursor: String!
  node: Element!
}

input UserElementsUpdateConnectionInput {
  node: ElementUpdateInput
}

input UserElementsUpdateFieldInput {
  connect: [UserElementsConnectFieldInput!]
  connectOrCreate: [UserElementsConnectOrCreateFieldInput!]
  create: [UserElementsCreateFieldInput!]
  delete: [UserElementsDeleteFieldInput!]
  disconnect: [UserElementsDisconnectFieldInput!]
  update: UserElementsUpdateConnectionInput
  where: UserElementsConnectionWhere
}

input UserOnCreateInput {
  auth0Id: String!
  email: String!
  username: String!
}

input UserOptions {
  limit: Int
  offset: Int

  """
  Specify one or more UserSort objects to sort Users by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [UserSort!]
}

"""
Fields to sort Users by. The order in which sorts are applied is not guaranteed when specifying many fields in one UserSort object.
"""
input UserSort {
  auth0Id: SortDirection
  email: SortDirection
  id: SortDirection
  username: SortDirection
}

type UserTagTagsAggregationSelection {
  count: Int!
  node: UserTagTagsNodeAggregateSelection
}

type UserTagTagsNodeAggregateSelection {
  id: IDAggregateSelectionNonNullable!
  name: StringAggregateSelectionNonNullable!
}

input UserTagsAggregateInput {
  AND: [UserTagsAggregateInput!]
  OR: [UserTagsAggregateInput!]
  count: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: UserTagsNodeAggregationWhereInput
}

input UserTagsConnectFieldInput {
  connect: [TagConnectInput!]
  where: TagConnectWhere
}

input UserTagsConnectOrCreateFieldInput {
  onCreate: UserTagsConnectOrCreateFieldInputOnCreate!
  where: TagConnectOrCreateWhere!
}

input UserTagsConnectOrCreateFieldInputOnCreate {
  node: TagOnCreateInput!
}

type UserTagsConnection {
  edges: [UserTagsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserTagsConnectionSort {
  node: TagSort
}

input UserTagsConnectionWhere {
  AND: [UserTagsConnectionWhere!]
  OR: [UserTagsConnectionWhere!]
  node: TagWhere
  node_NOT: TagWhere
}

input UserTagsCreateFieldInput {
  node: TagCreateInput!
}

input UserTagsDeleteFieldInput {
  delete: TagDeleteInput
  where: UserTagsConnectionWhere
}

input UserTagsDisconnectFieldInput {
  disconnect: TagDisconnectInput
  where: UserTagsConnectionWhere
}

input UserTagsFieldInput {
  connect: [UserTagsConnectFieldInput!]
  connectOrCreate: [UserTagsConnectOrCreateFieldInput!]
  create: [UserTagsCreateFieldInput!]
}

input UserTagsNodeAggregationWhereInput {
  AND: [UserTagsNodeAggregationWhereInput!]
  OR: [UserTagsNodeAggregationWhereInput!]
  id_EQUAL: ID
  name_AVERAGE_EQUAL: Float
  name_AVERAGE_GT: Float
  name_AVERAGE_GTE: Float
  name_AVERAGE_LT: Float
  name_AVERAGE_LTE: Float
  name_EQUAL: String
  name_GT: Int
  name_GTE: Int
  name_LONGEST_EQUAL: Int
  name_LONGEST_GT: Int
  name_LONGEST_GTE: Int
  name_LONGEST_LT: Int
  name_LONGEST_LTE: Int
  name_LT: Int
  name_LTE: Int
  name_SHORTEST_EQUAL: Int
  name_SHORTEST_GT: Int
  name_SHORTEST_GTE: Int
  name_SHORTEST_LT: Int
  name_SHORTEST_LTE: Int
}

type UserTagsRelationship {
  cursor: String!
  node: Tag!
}

input UserTagsUpdateConnectionInput {
  node: TagUpdateInput
}

input UserTagsUpdateFieldInput {
  connect: [UserTagsConnectFieldInput!]
  connectOrCreate: [UserTagsConnectOrCreateFieldInput!]
  create: [UserTagsCreateFieldInput!]
  delete: [UserTagsDeleteFieldInput!]
  disconnect: [UserTagsDisconnectFieldInput!]
  update: UserTagsUpdateConnectionInput
  where: UserTagsConnectionWhere
}

input UserTypesConnectFieldInput {
  connect: TypeBaseConnectInput
  edge: OwnedByCreateInput!
  where: TypeBaseConnectWhere
}

type UserTypesConnection {
  edges: [UserTypesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input UserTypesConnectionSort {
  edge: OwnedBySort
  node: TypeBaseSort
}

input UserTypesConnectionWhere {
  AND: [UserTypesConnectionWhere!]
  OR: [UserTypesConnectionWhere!]
  edge: OwnedByWhere
  edge_NOT: OwnedByWhere
  node: TypeBaseWhere
  node_NOT: TypeBaseWhere
}

input UserTypesCreateFieldInput {
  edge: OwnedByCreateInput!
  node: TypeBaseCreateInput!
}

input UserTypesDeleteFieldInput {
  delete: TypeBaseDeleteInput
  where: UserTypesConnectionWhere
}

input UserTypesDisconnectFieldInput {
  disconnect: TypeBaseDisconnectInput
  where: UserTypesConnectionWhere
}

input UserTypesFieldInput {
  connect: [UserTypesConnectFieldInput!]
  create: [UserTypesCreateFieldInput!]
}

type UserTypesRelationship implements OwnedBy {
  cursor: String!
  data: String!
  node: TypeBase!
  value: String
}

input UserTypesUpdateConnectionInput {
  edge: OwnedByUpdateInput
  node: TypeBaseUpdateInput
}

input UserTypesUpdateFieldInput {
  connect: [UserTypesConnectFieldInput!]
  create: [UserTypesCreateFieldInput!]
  delete: [UserTypesDeleteFieldInput!]
  disconnect: [UserTypesDisconnectFieldInput!]
  update: UserTypesUpdateConnectionInput
  where: UserTypesConnectionWhere
}

input UserUniqueWhere {
  auth0Id: String
  id: ID
  username: String
}

input UserUpdateInput {
  apps: [UserAppsUpdateFieldInput!]
  auth0Id: String
  components: [UserComponentsUpdateFieldInput!]
  elements: [UserElementsUpdateFieldInput!]
  email: String
  roles: [Role!]
  tags: [UserTagsUpdateFieldInput!]
  types: [UserTypesUpdateFieldInput!]
  username: String
}

input UserWhere {
  AND: [UserWhere!]
  OR: [UserWhere!]
  appsAggregate: UserAppsAggregateInput
  appsConnection_ALL: UserAppsConnectionWhere
  appsConnection_NONE: UserAppsConnectionWhere
  appsConnection_SINGLE: UserAppsConnectionWhere
  appsConnection_SOME: UserAppsConnectionWhere

  """
  Return Users where all of the related Apps match this filter
  """
  apps_ALL: AppWhere

  """
  Return Users where none of the related Apps match this filter
  """
  apps_NONE: AppWhere

  """
  Return Users where one of the related Apps match this filter
  """
  apps_SINGLE: AppWhere

  """
  Return Users where some of the related Apps match this filter
  """
  apps_SOME: AppWhere
  auth0Id: String
  auth0Id_CONTAINS: String
  auth0Id_ENDS_WITH: String
  auth0Id_IN: [String!]
  auth0Id_NOT: String
  auth0Id_NOT_CONTAINS: String
  auth0Id_NOT_ENDS_WITH: String
  auth0Id_NOT_IN: [String!]
  auth0Id_NOT_STARTS_WITH: String
  auth0Id_STARTS_WITH: String
  componentsAggregate: UserComponentsAggregateInput
  componentsConnection_ALL: UserComponentsConnectionWhere
  componentsConnection_NONE: UserComponentsConnectionWhere
  componentsConnection_SINGLE: UserComponentsConnectionWhere
  componentsConnection_SOME: UserComponentsConnectionWhere

  """
  Return Users where all of the related Components match this filter
  """
  components_ALL: ComponentWhere

  """
  Return Users where none of the related Components match this filter
  """
  components_NONE: ComponentWhere

  """
  Return Users where one of the related Components match this filter
  """
  components_SINGLE: ComponentWhere

  """
  Return Users where some of the related Components match this filter
  """
  components_SOME: ComponentWhere
  elementsAggregate: UserElementsAggregateInput
  elementsConnection_ALL: UserElementsConnectionWhere
  elementsConnection_NONE: UserElementsConnectionWhere
  elementsConnection_SINGLE: UserElementsConnectionWhere
  elementsConnection_SOME: UserElementsConnectionWhere

  """
  Return Users where all of the related Elements match this filter
  """
  elements_ALL: ElementWhere

  """
  Return Users where none of the related Elements match this filter
  """
  elements_NONE: ElementWhere

  """
  Return Users where one of the related Elements match this filter
  """
  elements_SINGLE: ElementWhere

  """
  Return Users where some of the related Elements match this filter
  """
  elements_SOME: ElementWhere
  email: String
  email_CONTAINS: String
  email_ENDS_WITH: String
  email_IN: [String!]
  email_NOT: String
  email_NOT_CONTAINS: String
  email_NOT_ENDS_WITH: String
  email_NOT_IN: [String!]
  email_NOT_STARTS_WITH: String
  email_STARTS_WITH: String
  id: ID
  id_CONTAINS: ID
  id_ENDS_WITH: ID
  id_IN: [ID!]
  id_NOT: ID
  id_NOT_CONTAINS: ID
  id_NOT_ENDS_WITH: ID
  id_NOT_IN: [ID!]
  id_NOT_STARTS_WITH: ID
  id_STARTS_WITH: ID
  roles: [Role!]
  roles_INCLUDES: Role
  roles_NOT: [Role!]
  roles_NOT_INCLUDES: Role
  tagsAggregate: UserTagsAggregateInput
  tagsConnection_ALL: UserTagsConnectionWhere
  tagsConnection_NONE: UserTagsConnectionWhere
  tagsConnection_SINGLE: UserTagsConnectionWhere
  tagsConnection_SOME: UserTagsConnectionWhere

  """
  Return Users where all of the related Tags match this filter
  """
  tags_ALL: TagWhere

  """
  Return Users where none of the related Tags match this filter
  """
  tags_NONE: TagWhere

  """
  Return Users where one of the related Tags match this filter
  """
  tags_SINGLE: TagWhere

  """
  Return Users where some of the related Tags match this filter
  """
  tags_SOME: TagWhere
  typesConnection_ALL: UserTypesConnectionWhere
  typesConnection_NONE: UserTypesConnectionWhere
  typesConnection_SINGLE: UserTypesConnectionWhere
  typesConnection_SOME: UserTypesConnectionWhere
  username: String
  username_CONTAINS: String
  username_ENDS_WITH: String
  username_IN: [String!]
  username_NOT: String
  username_NOT_CONTAINS: String
  username_NOT_ENDS_WITH: String
  username_NOT_IN: [String!]
  username_NOT_STARTS_WITH: String
  username_STARTS_WITH: String
}

type UsersConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type VercelDomainConfigData {
  misconfigured: Boolean!
}

type VercelDomainConfigDataAggregateSelection {
  count: Int!
}

type VercelDomainConfigDataConnection {
  edges: [VercelDomainConfigDataEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input VercelDomainConfigDataCreateInput {
  misconfigured: Boolean!
}

type VercelDomainConfigDataEdge {
  cursor: String!
  node: VercelDomainConfigData!
}

input VercelDomainConfigDataOptions {
  limit: Int
  offset: Int

  """
  Specify one or more VercelDomainConfigDataSort objects to sort VercelDomainConfigData by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [VercelDomainConfigDataSort!]
}

"""
Fields to sort VercelDomainConfigData by. The order in which sorts are applied is not guaranteed when specifying many fields in one VercelDomainConfigDataSort object.
"""
input VercelDomainConfigDataSort {
  misconfigured: SortDirection
}

input VercelDomainConfigDataUpdateInput {
  misconfigured: Boolean
}

input VercelDomainConfigDataWhere {
  AND: [VercelDomainConfigDataWhere!]
  OR: [VercelDomainConfigDataWhere!]
  misconfigured: Boolean
  misconfigured_NOT: Boolean
}

type VercelProjectDomainData {
  verified: Boolean!
}

type VercelProjectDomainDataAggregateSelection {
  count: Int!
}

type VercelProjectDomainDataConnection {
  edges: [VercelProjectDomainDataEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input VercelProjectDomainDataCreateInput {
  verified: Boolean!
}

type VercelProjectDomainDataEdge {
  cursor: String!
  node: VercelProjectDomainData!
}

input VercelProjectDomainDataOptions {
  limit: Int
  offset: Int

  """
  Specify one or more VercelProjectDomainDataSort objects to sort VercelProjectDomainData by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [VercelProjectDomainDataSort!]
}

"""
Fields to sort VercelProjectDomainData by. The order in which sorts are applied is not guaranteed when specifying many fields in one VercelProjectDomainDataSort object.
"""
input VercelProjectDomainDataSort {
  verified: SortDirection
}

input VercelProjectDomainDataUpdateInput {
  verified: Boolean
}

input VercelProjectDomainDataWhere {
  AND: [VercelProjectDomainDataWhere!]
  OR: [VercelProjectDomainDataWhere!]
  verified: Boolean
  verified_NOT: Boolean
}

interface WithDescendants {
  descendantTypesIds: [ID!]!
}

interface WithOwner {
  owner: User!
  ownerConnection: WithOwnerOwnerConnection!
}

input WithOwnerOwnerConnectFieldInput {
  connect: UserConnectInput
  where: UserConnectWhere
}

input WithOwnerOwnerConnectOrCreateFieldInput {
  onCreate: WithOwnerOwnerConnectOrCreateFieldInputOnCreate!
  where: UserConnectOrCreateWhere!
}

input WithOwnerOwnerConnectOrCreateFieldInputOnCreate {
  node: UserOnCreateInput!
}

type WithOwnerOwnerConnection {
  edges: [WithOwnerOwnerRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input WithOwnerOwnerConnectionSort {
  node: UserSort
}

input WithOwnerOwnerConnectionWhere {
  AND: [WithOwnerOwnerConnectionWhere!]
  OR: [WithOwnerOwnerConnectionWhere!]
  node: UserWhere
  node_NOT: UserWhere
}

input WithOwnerOwnerCreateFieldInput {
  node: UserCreateInput!
}

input WithOwnerOwnerDeleteFieldInput {
  delete: UserDeleteInput
  where: WithOwnerOwnerConnectionWhere
}

input WithOwnerOwnerDisconnectFieldInput {
  disconnect: UserDisconnectInput
  where: WithOwnerOwnerConnectionWhere
}

input WithOwnerOwnerFieldInput {
  connect: WithOwnerOwnerConnectFieldInput
  connectOrCreate: WithOwnerOwnerConnectOrCreateFieldInput
  create: WithOwnerOwnerCreateFieldInput
}

type WithOwnerOwnerRelationship {
  cursor: String!
  node: User!
}

input WithOwnerOwnerUpdateConnectionInput {
  node: UserUpdateInput
}

input WithOwnerOwnerUpdateFieldInput {
  connect: WithOwnerOwnerConnectFieldInput
  connectOrCreate: WithOwnerOwnerConnectOrCreateFieldInput
  create: WithOwnerOwnerCreateFieldInput
  delete: WithOwnerOwnerDeleteFieldInput
  disconnect: WithOwnerOwnerDisconnectFieldInput
  update: WithOwnerOwnerUpdateConnectionInput
  where: WithOwnerOwnerConnectionWhere
}
