{
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": ["classProperty"],
            "format": ["camelCase"]
          },
          {
            "selector": ["objectLiteralProperty"],
            "format": ["camelCase", "PascalCase"],
            "filter": {
              "regex": "_CONTAINS$|_ENDS_WITH$|_IN$|_STARTS_WITH$|_NOT$|_ALL$|_NONE$|_SINGLE$|_SOME$|^[#.].*|^[0-9]*$",
              "match": false
            }
          },
          {
            "selector": ["interface"],
            "format": ["PascalCase"]
          }
        ]
      }
    },
    {
      "plugins": ["react"],
      "files": ["*.tsx"],
      "rules": {
        "unicorn/filename-case": [
          "error",
          {
            "cases": {
              "camelCase": false,
              "pascalCase": true
            },
            "ignore": [".*\\.hook\\.tsx?$"]
          }
        ]
      }
    },
    {
      "files": ["*.hook.ts", "*.hook.tsx"],
      "rules": {
        "unicorn/filename-case": [
          "error",
          {
            "cases": {
              "camelCase": true,
              "pascalCase": false
            }
          }
        ]
      }
    },
    {
      "files": ["*.ts"],
      "rules": {
        "unicorn/filename-case": [
          "error",
          {
            "cases": {
              "camelCase": false,
              "pascalCase": false,
              "kebabCase": true
            },
            "ignore": [".*\\.hook\\.tsx?$"]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": ["typeProperty"],
            "format": ["camelCase", "PascalCase"],
            "filter": {
              "regex": "^data-",
              "match": false
            },
            "leadingUnderscore": "allowDouble"
          }
        ]
      }
    }
  ]
}
