import unicornPlugin from 'eslint-plugin-unicorn'

// GENERATED BY CURSOR
export default [
  // Config 1: *.tsx (React/Unicorn Naming)
  {
    files: ['**/*.tsx'],
    plugins: {
      unicorn: unicornPlugin,
    },
    rules: {
      'react/display-name': 'error', // Enforce display name for React components
      'unicorn/filename-case': [
        'error',
        {
          case: 'pascalCase', // Components should be PascalCase
          ignore: [
            '.*\\.hook(\\.spec)?\\.tsx?$', // Ignore hooks (use camelCase - see below)
            '.*\\.spec\\.tsx?$', // Ignore spec files
            '^preview\\.tsx',
          ],
        },
      ],
    },
  },
  // Config 2: *.hook.ts(x) (Unicorn Naming for Hooks)
  {
    files: ['**/*.hook.ts', '**/*.hook.tsx'],
    plugins: {
      unicorn: unicornPlugin,
    },
    rules: {
      'unicorn/filename-case': [
        'error',
        {
          case: 'camelCase', // Hooks should be camelCase
        },
      ],
    },
  },
  // Config 3: *.ts (Unicorn/TypeScript Naming)
  {
    files: ['**/*.ts'],
    plugins: {
      unicorn: unicornPlugin,
    },
    rules: {
      'unicorn/filename-case': [
        'error',
        {
          cases: {
            camelCase: false,
            pascalCase: false,
            kebabCase: true, // Non-hook/component TS files should be kebab-case
          },
          ignore: ['.*\\.hook(\\.spec)?\\.ts(x)?$'], // Ignore hooks (covered above)
        },
      ],
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: ['typeProperty'],
          format: ['camelCase', 'PascalCase'],
          filter: {
            regex: '^data-', // Allow data-* attributes
            match: false,
          },
          leadingUnderscore: 'allowSingleOrDouble', // Allow leading underscores
        },
        // DTO rule (parameter, variable)
        {
          selector: ['parameter', 'variable'],
          format: ['camelCase'],
          filter: {
            regex: 'DTO$', // Must end with DTO
            match: true,
          },
          custom: {
            regex: '^[a-zA-Z]+Dto$', // Starts with letters, ends with Dto (camelCase implied by format)
            match: true,
          },
        },
        // DTO rule (typeAlias, interface) - Added from JSON comments
        // {
        //   selector: ['typeAlias', 'interface'],
        //   format: ['PascalCase'],
        //   filter: {
        //     regex: 'DTO$', // Ends with DTO
        //     match: true,
        //   },
        //   custom: {
        //     regex: '^[A-Z][a-zA-Z]*Dto$', // Must be PascalCase ending in Dto
        //     match: true,
        //   },
        // },
      ],
    },
  },
  {
    // Path is relative from the root of the project
    files: ['app/**/{page,layout,loading,error,default,template}.tsx'],
    rules: {
      'unicorn/filename-case': 'off', // ðŸš« no PascalCase check here
    },
  },
]
