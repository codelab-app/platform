filters-pr: &filters-pr
  filters:
    branches:
      ignore:
        - master

filters-master: &filters-master
  filters:
    branches:
      only:
        - master

executor-params: &executor-params
  parameters:
    e:
      type: executor
      default: machine-ubuntu
  executor: << parameters.e >>

executor-config: &executor-config
  environment:
    DOCKER_TAG_VERSION: 0.02
    # CircleCI
    GITHUB_ANTON_M: antonmihaylov
    SLACK_ANTON_M: <@U01HWRY2USE>
    GITHUB_WEBBER: webberwang
    SLACK_WEBBER: <@U0J401GAH>
    GITHUB_ASSIM: assimhabeek
    SLACK_ASSIM: <@U02GJN72TKR>
    GITHUB_NGHIA: phmngocnghia
    SLACK_NGHIA: <@U02DX6U7YGP>
    GITHUB_HARRY: harryjin
    SLACK_HARRY: <@U02TVECJA8Z>
    GITHUB_MING: rihnoo
    SLACK_MING: <@U02TU52M0HZ>
    SLACK_CHANNEL_UPDATE: CQVPNKS8K
    COLOR_SUCCESS: '#b7eb8f'
    COLOR_FAILURE: '#ffccc7'
    NODE_OPTIONS: --max_old_space_size=16384
    NODE_ENV: production
    CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
  working_directory: ~/project

version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  node: circleci/node@4.7.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecs: circleci/aws-ecs@2.2.1
  browser-tools: circleci/browser-tools@1.2.3
  nx: nrwl/nx@1.1.3

executors:
  machine-ubuntu:
    <<: *executor-config
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202010-01
    resource_class: large
  docker-node:
    <<: *executor-config
    docker:
      - image: cimg/node:14.18-browsers
    resource_class: large
  cypress-node:
    <<: *executor-config
    docker:
      - image: cypress/browsers:chrome77
    resource_class: large
  docker-python:
    <<: *executor-config
    docker:
      - image: circleci/python:3.7
    resource_class: large

commands:
  setup-workspace:
    description: 'Setup workspace'
    steps:
      - checkout
      - attach_workspace:
          at: ..
      - run:
          name: 'Install NVM'
          command: |
            # Set path before install, otherwise paths will be different in the executors
            echo 'export NODE_OPTIONS=$NODE_OPTIONS' >> $BASH_ENV
            source $BASH_ENV

            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV

            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      - run:
          name: 'Set node version'
          command: |
            nvm install 14.18.0
            nvm alias default 14.18.0
            node -v
      - run:
          name: 'Install Bower'
          command: |
            npm install -g bower
      - run:
          name: 'Setup env'
          command: |
            # git settings
            echo 'export GIT_COMMIT_MSG=$(git log --format="format:%s" -n 1 ${CIRCLE_SHA1})' >> $BASH_ENV

            # slack settings
            if [ $CIRCLE_USERNAME == $GITHUB_ANTON_M ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_ANTOM_M}' >> $BASH_ENV

            elif [ $CIRCLE_USERNAME == $GITHUB_ASSIM ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_ASSIM}' >> $BASH_ENV

            elif [ $CIRCLE_USERNAME == $GITHUB_NGHIA ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_NGHIA}' >> $BASH_ENV

            elif [ $CIRCLE_USERNAME == $GITHUB_HARRY ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_HARRY}' >> $BASH_ENV

            elif [ $CIRCLE_USERNAME == $GITHUB_MING ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_MING}' >> $BASH_ENV

            else
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_WEBBER}' >> $BASH_ENV
            fi

            # finally import bash env
            source $BASH_ENV
      - nx/set-shas:
          main-branch-name: master

  package-install-dev:
    steps:
      - restore_cache:
          name: 'Restore Yarn cache'
          keys:
            - dep-cache-staging-{{ checksum "yarn.lock" }}
            # https://discuss.circleci.com/t/circle-2-0-caching-is-too-limited-to-be-very-useful/11694
            # - dep-cache-staging-
      - run:
          name: 'Install NPM packages'
          command: yarn install --immutable
      - run:
          name: 'Install Bower packages'
          command: bower install --no-interactive

  notify-failure:
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_CHANNEL_UPDATE
          template: basic_fail_1

  setup-dgraph:
    description: 'Setup Dgraph'
    steps:
      - run:
          name: 'Update Dgraph Schema'
          command: yarn cli dgraph update-schema --env ci
      - run:
          name: 'Reset Dgraph Data'
          command: yarn cli dgraph reset-data --env ci

  build-push-docker-image:
    description: 'Build docker image'
    steps:
      - setup-workspace
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.8
      - aws-cli/setup
      - run:
          name: 'Setup common environment variables'
          command: |
            echo 'export ECR_REPOSITORY_NAME="clab-api"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: 'Build Docker image'
          command: |
            docker build -t $FULL_IMAGE_NAME -f .docker/Dockerfile .
      - run:
          name: 'Push image to ECR'
          command: |
            aws ecr get-login-password | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/clab-api"
            docker push $FULL_IMAGE_NAME

jobs:
  install-and-build-workspace:
    <<: *executor-params
    steps:
      - setup-workspace
      - package-install-dev
      - run:
          name: 'NX_BASE'
          command: echo $NX_BASE
      - run:
          name: 'NX_HEAD'
          command: echo $NX_HEAD
      - run:
          name: 'Clear Cache'
          command: |
            rm -rf ~/project/node_modules/nx/.cache
          # npx cypress cache path
          # npx jest --clearCache
      - run:
          name: 'Build CI'
          command: npx nx run-many --target=build --projects=api,web,cmd,cli,tools-rtk-query --configuration-ci --verbose
      - save_cache:
          name: 'Save Cache'
          key: dep-cache-staging-{{ checksum "yarn.lock" }}
          paths:
            - ~/.yarn
            # - ~/.cache/yarn
            # Not required since yarn cache can easily build this
            - ~/project/node_modules
      - persist_to_workspace:
          root: ~/
          paths:
            - project/node_modules
            - project/dist
      - notify-failure

  lint:
    <<: *executor-params
    environment:
      CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
      CIRCLE_REVISION: << pipeline.git.revision >>
    steps:
      - setup-workspace
      - run: yarn cli tasks eslint --env ci
      # Check to see if codegen works, all files should be committed locally
      - run:
          name: 'GraphQL Codegen'
          command: yarn codegen
      - run:
          name: 'Circular Dependencies Check'
          command: yarn cli tasks circular-lint --env ci
      - run:
          name: 'Commitlint'
          command: ./scripts/lint/commitlint-ci.sh
      - notify-failure

  unit:
    <<: *executor-params
    steps:
      - setup-workspace
      - run: yarn cli tasks unit --env ci
      - notify-failure

  integration:
    <<: *executor-params
    steps:
      - setup-workspace
      # Since integration doesn't require frontend, we reserve 8081 for e2e & use 8082 here instead
      - run: |
          echo 'export CODELAB_DG_ENDPOINT=$CODELAB_INT_DG_ENDPOINT' >> $BASH_ENV
          echo 'export DG_ADMIN_API_KEY=$CODELAB_INT_DG_ADMIN_API_KEY' >> $BASH_ENV
      - setup-dgraph
      - run: yarn cli tasks int --env ci
      - notify-failure

  e2e:
    <<: *executor-params
    steps:
      - setup-workspace
      - browser-tools/install-firefox
      - run: |
          echo 'export CODELAB_DG_ENDPOINT=$CODELAB_E2E_DG_ENDPOINT' >> $BASH_ENV
          echo 'export DG_ADMIN_API_KEY=$CODELAB_E2E_DG_ADMIN_API_KEY' >> $BASH_ENV
      - setup-dgraph
      - run: npx cypress install
      - run: npx cypress verify
      - run: yarn cli tasks e2e --env ci
      - store_artifacts:
          path: ~/project/apps/web-e2e/src/videos
          destination: cypress-videos
      - store_artifacts:
          path: ~/project/apps/web-e2e/src/screenshots
          destination: cypress-screenshots
      - notify-failure

  notify-success:
    <<: *executor-params
    steps:
      - setup-workspace
      - slack/notify:
          event: pass
          channel: $SLACK_CHANNEL_UPDATE
          custom: |
            {
            	"text": "CircleCI job succeeded!",
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Job Succeeded. :white_check_mark:",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Job*: ${CIRCLE_JOB}"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Project*:\n $CIRCLE_PROJECT_REPONAME"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Branch*:\n $CIRCLE_BRANCH"
                            },
                            {
            					"type": "mrkdwn",
            					"text": "*Commit*:\n $CIRCLE_SHA1"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Author*:\n $CIRCLE_USERNAME"
            				}
            			],
            			"accessory": {
            				"type": "image",
            				"image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
            				"alt_text": "CircleCI logo"
            			}
            		},
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Mentions*:\n $SLACK_PARAM_MENTIONS"
                    }
                  ]
                },
            		{
            			"type": "actions",
            			"elements": [
            				{
            					"type": "button",
            					"text": {
            						"type": "plain_text",
            						"text": "View Job"
            					},
            					"url": "${CIRCLE_BUILD_URL}"
            				}
            			]
            		}
            	]
            }

  build-push-docker-image-ecr:
    <<: *executor-params
    steps:
      - build-push-docker-image

workflows:
  app-pr:
    jobs:
      - install-and-build-workspace:
          <<: *filters-pr
          e: docker-node
          context: CI
      - lint:
          <<: *filters-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - integration:
          <<: *filters-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - e2e:
          <<: *filters-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-pr
          context: CI
          e: docker-node
          requires:
            - lint
            - unit
            - integration
            - e2e

  app-master:
    jobs:
      - install-and-build-workspace:
          <<: *filters-master
          e: docker-node
          context: CI
      - build-push-docker-image-ecr:
          <<: *filters-master
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-pr
          context: CI
          e: docker-node
          requires:
            - build-push-docker-image-ecr
