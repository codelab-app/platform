commands:
    build-repo:
        description: Build Repo
        steps:
            - run: npx nx run-many --target=build --projects=platform,cli,landing,websites --parallel=4 --verbose -c ci --nx-bail
            - save_cache:
                key: nx-cache-{{ checksum "node_modules/.cache/nx/lockfile.hash" }}
                name: Save Cache
                paths:
                    - ~/project/dist/apps/platform/.next/cache
                    - ~/project/dist/apps/landing/.next/cache
                    - ~/project/dist/apps/websites/.next/cache
    init-repo:
        description: Init Repo
        steps:
            - checkout
            - attach_workspace:
                at: ..
            - restore_cache:
                keys:
                    - npm-cache-{{ checksum "yarn.lock" }}
                    - nvm-cache-{{ checksum ".nvmrc" }}
                    - nx-cache-{{ checksum "node_modules/.cache/nx/lockfile.hash" }}
                name: Restore Cache
            - install-nvm
            - run:
                command: |
                    # git settings
                    echo 'export GIT_COMMIT_MSG=$(git log --format="format:%s" -n 1 ${CIRCLE_SHA1})' >> $BASH_ENV

                    # slack settings
                    if [ "$CIRCLE_USERNAME" == "$GITHUB_ANTON_M" ]; then
                      echo 'export SLACK_PARAM_MENTIONS=${SLACK_ANTOM_M}' >> $BASH_ENV

                    elif [ "$CIRCLE_USERNAME" == "$GITHUB_ASSIM" ]; then
                      echo 'export SLACK_PARAM_MENTIONS=${SLACK_ASSIM}' >> $BASH_ENV

                    elif [ "$CIRCLE_USERNAME" == "$GITHUB_NGHIA" ]; then
                      echo 'export SLACK_PARAM_MENTIONS=${SLACK_NGHIA}' >> $BASH_ENV

                    elif [ "$CIRCLE_USERNAME" == "$GITHUB_YASEEN" ]; then
                      echo 'export SLACK_PARAM_MENTIONS=${SLACK_YASEEN}' >> $BASH_ENV

                    else
                      echo 'export SLACK_PARAM_MENTIONS=${SLACK_WEBBER}' >> $BASH_ENV
                    fi

                    # finally import bash env
                    source $BASH_ENV
                name: Setup Env
            - nx/set-shas:
                main-branch-name: master
    install-npm:
        steps:
            - run:
                command: yarn install --immutable
                name: Install NPM Packages
            - save_cache:
                key: npm-cache-{{ checksum "yarn.lock" }}
                name: Save Cache
                paths:
                    - ~/.yarn
                    - ~/.cache/Cypress
                    - ~/project/node_modules
    install-nvm:
        steps:
            - run:
                command: |
                    # Set path before install, otherwise paths will be different in the executors
                    echo 'export NODE_OPTIONS=$NODE_OPTIONS' >> $BASH_ENV
                    source $BASH_ENV

                    echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
                    echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV

                    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

                    #if [ ! -d "$NVM_DIR" ]; then
                    #  wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
                    #fi
                name: Install NVM
            - save_cache:
                key: nvm-cache-{{ checksum ".nvmrc" }}
                name: Save NVM Cache
                paths:
                    - ~/.nvm
            - run:
                command: |
                    nvm install 18.16.0
                    nvm alias default 18.16.0
                    node -v
                name: Set Node Version
    install-terraform:
        description: Setup Infra Workspace
        steps:
            - run:
                command: |
                    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DA418C88A3219F7B
                    curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
                    sudo apt-add-repository --yes "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
                    sudo apt update
                    sudo apt install terraform
                name: Install Terraform
environment:
    CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
    COLOR_FAILURE: '#ffccc7'
    COLOR_SUCCESS: '#b7eb8f'
    GITHUB_ANTON_M: antonmihaylov
    GITHUB_ASSIM: assimhabeek
    GITHUB_ELHAM: melhamin
    GITHUB_HAU: hauleIT
    GITHUB_NGHIA: phmngocnghia
    GITHUB_WEBBER: webberwang
    GITHUB_YASEEN: mohasarc
    NEO4J_PASSWORD: password
    NEO4J_URI: bolt://127.0.0.1:7687
    NEO4J_USER: neo4j
    NODE_OPTIONS: --max_old_space_size=8192
    SLACK_ANTON_M: <@U01HWRY2USE>
    SLACK_ASSIM: <@U02GJN72TKR>
    SLACK_CHANNEL_UPDATE: CQVPNKS8K
    SLACK_ELHAM: <U0406P3J9T6>
    SLACK_HAU: <U040GU0PQ81>
    SLACK_NGHIA: <@U02DX6U7YGP>
    SLACK_WEBBER: <@U0J401GAH>
    SLACK_YASEEN: <@U03B5N7J2N9>
executors:
    docker-node:
        docker:
            - image: cimg/node:18.16.0-browsers
    docker-node-neo4j:
        docker:
            - image: cimg/node:18.16.0-browsers
            - command:
                - neo4j
                - start
              environment:
                NEO4J_AUTH: neo4j/password
                NEO4J_PLUGINS: '["apoc"]'
              image: neo4j:5.4.0
    machine-ubuntu:
        machine:
            docker_layer_caching: true
            image: ubuntu-2004:2022.04.1
    terraform:
        docker:
            - image: hashicorp/terraform:1.3.1
        environment:
            TF_WORKSPACE: prod
jobs:
    apply:
        executor: docker-node
        steps:
            - init-repo
            - run:
                command: yarn cli terraform --stage=prod apply
                name: Terraform Apply
    codegen:
        executor: docker-node-neo4j
        resource_class: medium
        steps:
            - init-repo
            - run:
                command: yarn cli tasks codegen --stage ci
                name: GraphQL Codegen
    e2e:
        executor: docker-node-neo4j
        parallelism: 4
        resource_class: large
        steps:
            - init-repo
            - setup_remote_docker:
                docker_layer_caching: true
                version: 20.10.14
            - run: npx cypress install
            - run: npx cypress verify
            - run:
                command: yarn cli tasks e2e --stage ci
                name: Run E2E Tests
            - store_artifacts:
                destination: cypress/videos
                path: ~/project/apps/platform-e2e/src/videos
            - store_artifacts:
                destination: cypress/screenshots
                path: ~/project/apps/platform-e2e/src/screenshots
            - store_artifacts:
                destination: cypress/data
                path: ~/project/apps/platform-e2e/src/data
    integration:
        executor: docker-node-neo4j
        resource_class: large
        steps:
            - init-repo
            - run:
                command: yarn cli tasks int --stage ci
                name: Run Integration Tests
                no_output_timeout: 20m
    lint:
        environment:
            CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
            CIRCLE_REVISION: << pipeline.git.revision >>
        executor: docker-node
        resource_class: medium
        steps:
            - init-repo
            - run:
                command: yarn cli tasks lint --stage ci
                name: Run Lint on Repository
            - run:
                command: yarn cli tasks commitlint --stage ci
                name: Commitlint
    notify-failure:
        executor: machine-ubuntu
        resource_class: small
        steps:
            - swissknife/wait_for_job:
                job-name: install-and-build-workspace,lint,unit,e2e,codegen
            - slack/notify:
                channel: $SLACK_CHANNEL_UPDATE
                event: fail
                template: basic_fail_1
    notify-success:
        executor: docker-node
        steps:
            - slack/notify:
                channel: $SLACK_CHANNEL_UPDATE
                custom: |
                    {
                    	"text": "CircleCI job succeeded!",
                    	"blocks": [
                    		{
                    			"type": "header",
                    			"text": {
                    				"type": "plain_text",
                    				"text": "Job Succeeded. :white_check_mark:",
                    				"emoji": true
                    			}
                    		},
                    		{
                    			"type": "section",
                    			"fields": [
                    				{
                    					"type": "mrkdwn",
                    					"text": "*Job*: ${CIRCLE_JOB}"
                    				}
                    			]
                    		},
                    		{
                    			"type": "section",
                    			"fields": [
                    				{
                    					"type": "mrkdwn",
                    					"text": "*Project*:\n $CIRCLE_PROJECT_REPONAME"
                    				},
                    				{
                    					"type": "mrkdwn",
                    					"text": "*Branch*:\n $CIRCLE_BRANCH"
                                    },
                                    {
                    					"type": "mrkdwn",
                    					"text": "*Commit*:\n $CIRCLE_SHA1"
                    				},
                    				{
                    					"type": "mrkdwn",
                    					"text": "*Author*:\n $CIRCLE_USERNAME"
                    				}
                    			],
                    			"accessory": {
                    				"type": "image",
                    				"image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
                    				"alt_text": "CircleCI logo"
                    			}
                    		},
                        {
                          "type": "section",
                          "fields": [
                            {
                              "type": "mrkdwn",
                              "text": "*Mentions*:\n $SLACK_PARAM_MENTIONS"
                            }
                          ]
                        },
                    		{
                    			"type": "actions",
                    			"elements": [
                    				{
                    					"type": "button",
                    					"text": {
                    						"type": "plain_text",
                    						"text": "View Job"
                    					},
                    					"url": "${CIRCLE_BUILD_URL}"
                    				}
                    			]
                    		}
                    	]
                    }
                event: pass
    plan:
        executor: docker-node
        steps:
            - init-repo
            - run:
                command: |
                    echo "credentials \"app.terraform.io\" {token = \"$TERRAFORM_TOKEN\"}" >> $HOME/.terraformrc
                name: Create .terraformrc file locally
            - run: terraform --version
            - run:
                command: terraform -chdir=terraform fmt
                name: Terraform Format
            - run:
                command: yarn cli terraform --stage=prod init
                name: Terraform Init
            - run:
                command: yarn cli terraform --stage=prod validate
                name: Terraform Validate
            - run:
                command: yarn cli terraform --stage=prod plan
                name: Terraform Plan
            - persist_to_workspace:
                paths:
                    - .terraformrc
                    - project/terraform/.terraform
                root: ~/
    setup-infra-workspace:
        executor: docker-node
        resource_class: medium
        steps:
            - init-repo
            - install-terraform
            - install-nvm
            - install-npm
            - build-repo
            - persist_to_workspace:
                paths:
                    - project/node_modules
                    - project/dist
                root: ~/
    setup-workspace:
        executor: docker-node
        resource_class: large
        steps:
            - init-repo
            - install-npm
            - build-repo
            - run:
                command: |
                    cd ~/
                    du -hd1
            - persist_to_workspace:
                paths:
                    - project/dist
                root: ~/
    unit:
        executor: docker-node
        resource_class: medium
        steps:
            - init-repo
            - run:
                command: yarn cli tasks unit --stage ci
                name: Run Unit Tests
            - store_test_results:
                path: /tmp/test-reports
orbs:
    node: circleci/node@5.1.0
    nx: nrwl/nx@1.6.1
    queue: eddiewebb/queue@2.2.1
    slack: circleci/slack@4.12.5
    swissknife: roopakv/swissknife@0.69.0
    terraform: circleci/terraform@3.2.1
version: 2.1
workflows:
    app:
        jobs:
            - notify-success:
                filters:
                    branches:
                        only:
                            - master
    app-pr:
        jobs:
            - setup-workspace:
                filters:
                    branches:
                        ignore:
                            - master
            - lint:
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - setup-workspace
            - codegen:
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - setup-workspace
            - unit:
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - setup-workspace
            - integration:
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - setup-workspace
            - e2e:
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - setup-workspace
            - notify-success:
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - lint
                    - codegen
                    - unit
                    - integration
                    - e2e
    infra:
        jobs:
            - setup-infra-workspace:
                filters:
                    branches:
                        only:
                            - master
            - plan:
                filters:
                    branches:
                        only:
                            - master
                requires:
                    - setup-infra-workspace
            - hold-apply:
                filters:
                    branches:
                        only:
                            - master
                requires:
                    - plan
                type: approval
            - apply:
                filters:
                    branches:
                        only:
                            - master
                requires:
                    - hold-apply
working_directory: ~/project

