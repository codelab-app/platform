filters-pr: &filters-pr
  filters:
    branches:
      ignore:
        - master

filters-master: &filters-master
  filters:
    branches:
      only:
        - master

executor-params: &executor-params
  parameters:
    e:
      type: executor
      default: machine-ubuntu
  executor: << parameters.e >>

executor-config: &executor-config
  environment:
    DOCKER_TAG_VERSION: 0.02
    # CircleCI
    GITHUB_ANTON_M: antonmihaylov
    SLACK_ANTON_M: <@U01HWRY2USE>
    GITHUB_WEBBER: webberwang
    SLACK_WEBBER: <@U0J401GAH>
    GITHUB_ASSIM: assimhabeek
    SLACK_ASSIM: <@U02GJN72TKR>
    GITHUB_NGHIA: phmngocnghia
    SLACK_NGHIA: <@U02DX6U7YGP>
    GITHUB_YASEEN: mohasarc
    SLACK_YASEEN: <@U03B5N7J2N9>
    GITHUB_HAU: hauleIT
    SLACK_HAU: <U040GU0PQ81>
    GITHUB_ELHAM: melhamin
    SLACK_ELHAM: <U0406P3J9T6>
    SLACK_CHANNEL_UPDATE: CQVPNKS8K
    COLOR_SUCCESS: '#b7eb8f'
    COLOR_FAILURE: '#ffccc7'
    NODE_OPTIONS: --max_old_space_size=16384
    NODE_ENV: production
    CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
  working_directory: ~/project

version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  node: circleci/node@4.7.0
  nx: nrwl/nx@1.6.0
  queue: eddiewebb/queue@1.7.0

executors:
  machine-ubuntu:
    <<: *executor-config
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:2022.04.1
    resource_class: large
  docker-node:
    <<: *executor-config
    docker:
      - image: cimg/node:16.15.1-browsers
    resource_class: large
  docker-node-neo4j:
    <<: *executor-config
    # Docker containers work on a merged networking stack, the second container should make it available in localhost
    # https://discuss.circleci.com/t/whats-the-docker-hostname-for-the-second-container/20101
    docker:
      - image: cimg/node:16.15.1-browsers
      # https://circleci.com/docs/using-docker#using-multiple-docker-images
      # The `command` key is the command issued to the image
      - image: neo4j:4.4.10
        environment:
          NEO4J_AUTH: neo4j/test
          NEO4JLABS_PLUGINS: '["apoc"]'
        command: ['neo4j', 'start']
    resource_class: large

commands:
  setup-workspace:
    description: 'Setup Workspace'
    steps:
      - checkout
      - attach_workspace:
          at: ..
      - run:
          name: 'Install NVM'
          command: |
            # Set path before install, otherwise paths will be different in the executors
            echo 'export NODE_OPTIONS=$NODE_OPTIONS' >> $BASH_ENV
            source $BASH_ENV

            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV

            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      - run:
          name: 'Set Node Version'
          command: |
            nvm install 14.18.0
            nvm alias default 14.18.0
            node -v
      - run:
          name: 'Setup Env'
          command: |
            # git settings
            echo 'export GIT_COMMIT_MSG=$(git log --format="format:%s" -n 1 ${CIRCLE_SHA1})' >> $BASH_ENV

            # slack settings
            if [ $CIRCLE_USERNAME == $GITHUB_ANTON_M ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_ANTOM_M}' >> $BASH_ENV

            elif [ $CIRCLE_USERNAME == $GITHUB_ASSIM ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_ASSIM}' >> $BASH_ENV

            elif [ $CIRCLE_USERNAME == $GITHUB_NGHIA ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_NGHIA}' >> $BASH_ENV

            elif [ $CIRCLE_USERNAME == $GITHUB_YASEEN ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_YASEEN}' >> $BASH_ENV

            else
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_WEBBER}' >> $BASH_ENV
            fi

            # finally import bash env
            source $BASH_ENV
      - nx/set-shas:
          main-branch-name: master

  install-package:
    steps:
      - restore_cache:
          name: 'Restore Cache'
          keys:
            - dep-cache-{{ checksum "yarn.lock" }}
          # https://discuss.circleci.com/t/circle-2-0-caching-is-too-limited-to-be-very-useful/11694
      - run:
          name: 'Install NPM Packages'
          command: yarn install --immutable

  notify-failure:
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_CHANNEL_UPDATE
          template: basic_fail_1

jobs:
  install-and-build-workspace:
    <<: *executor-params
    steps:
      - setup-workspace
      - install-package
      - run:
          name: 'Clear Cache'
          # clear cache here because NX cache can get quite large, we rely on remote cache instead
          command: |
            rm -rf ~/project/node_modules/nx/.cache
      #            npx cypress cache clear
      #            npx jest --clearCache
      - run:
          name: 'Build CI'
          # Can't use `yarn cli` doesn't exist yet
          command: npx nx run-many --target=build --projects=builder,cli -c ci --verbose
      - save_cache:
          name: 'Save Cache'
          key: dep-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.yarn
            - ~/project/dist/apps/builder/.next/cache
            - ~/project/node_modules
      - persist_to_workspace:
          root: ~/
          paths:
            - project/node_modules
            - project/dist
      - notify-failure

  lint:
    <<: *executor-params
    environment:
      CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
      CIRCLE_REVISION: << pipeline.git.revision >>
    steps:
      - setup-workspace
      - run:
          name: 'Run Lint on Workspace'
          command: yarn cli tasks lint --env ci
      - run:
          name: 'GraphQL Codegen'
          command: yarn cli tasks codegen --env ci
      - run:
          name: 'Commitlint'
          command: yarn cli tasks commitlint --env ci
      - notify-failure

  unit:
    <<: *executor-params
    environment:
      NODE_ENV: test
    steps:
      - setup-workspace
      - run:
          name: 'Run Unit Tests'
          command: yarn cli tasks unit --env ci
      # Upload test results
      - store_test_results:
          path: /tmp/test-reports
      - notify-failure

  integration:
    <<: *executor-params
    steps:
      - setup-workspace
      - run:
          name: 'Run Integration Tests'
          command: yarn cli tasks int --env ci
      - notify-failure

  e2e:
    <<: *executor-params
    # Cypress requires record for parallel to work according to https://github.com/cypress-io/cypress/issues/2520
    parallelism: 4
    environment:
      NEO4J_URI: bolt://127.0.0.1:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: test
    steps:
      - queue/until_front_of_line:
          consider-branch: false
      - setup-workspace
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: 'Check Docker Processes'
          command: |
            docker ps
            echo ${DOCKER_HOST}
            curl http://127.0.0.1:7474/db/data/
      - run: npx cypress install
      - run: npx cypress verify
      - run:
          name: 'Run E2E Tests'
          command: yarn cli tasks e2e --env ci
      - store_artifacts:
          path: ~/project/apps/builder-e2e/src/videos
          destination: cypress/videos
      - store_artifacts:
          path: ~/project/apps/builder-e2e/src/screenshots
          destination: cypress/screenshots
      - notify-failure

  notify-success:
    <<: *executor-params
    steps:
      #      - setup-workspace
      - slack/notify:
          event: pass
          channel: $SLACK_CHANNEL_UPDATE
          custom: |
            {
            	"text": "CircleCI job succeeded!",
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Job Succeeded. :white_check_mark:",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Job*: ${CIRCLE_JOB}"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Project*:\n $CIRCLE_PROJECT_REPONAME"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Branch*:\n $CIRCLE_BRANCH"
                            },
                            {
            					"type": "mrkdwn",
            					"text": "*Commit*:\n $CIRCLE_SHA1"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Author*:\n $CIRCLE_USERNAME"
            				}
            			],
            			"accessory": {
            				"type": "image",
            				"image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
            				"alt_text": "CircleCI logo"
            			}
            		},
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Mentions*:\n $SLACK_PARAM_MENTIONS"
                    }
                  ]
                },
            		{
            			"type": "actions",
            			"elements": [
            				{
            					"type": "button",
            					"text": {
            						"type": "plain_text",
            						"text": "View Job"
            					},
            					"url": "${CIRCLE_BUILD_URL}"
            				}
            			]
            		}
            	]
            }

workflows:
  app-pr:
    jobs:
      - install-and-build-workspace:
          <<: *filters-pr
          # Can't build with machine image, causes build issues
          e: docker-node
          context: CI
      - lint:
          <<: *filters-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - e2e:
          <<: *filters-pr
          e: docker-node-neo4j
          context: CI
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-pr
          context: CI
          e: docker-node
          requires:
            - lint
            - unit
            - e2e

  app:
    jobs:
      - install-and-build-workspace:
          <<: *filters-master
          e: docker-node
          context: CI
      - lint:
          <<: *filters-master
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-master
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-master
          context: CI
          e: docker-node
          requires:
            - lint
            - unit
