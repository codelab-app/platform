commands:
  build-nx-apps:
    description: Build Nx Apps
    steps:
      - nx/set-shas:
          main-branch-name: master
      - restore-nx-cache:
          cache_name: apps
      - run:
          command: pnpm nx run-many --target=build --projects=web,api -c ci
          name: Build Nx Apps (web, api)
      - save-nx-cache:
          cache_name: apps
          extra_paths: dist/apps/web/.next/cache
      - persist_to_workspace:
          paths:
            - project/dist/apps/web
            - project/dist/apps/api
          root: ~/
  build-nx-libs:
    description: Build Nx Libs
    steps:
      - nx/set-shas:
          main-branch-name: master
      - restore-nx-cache:
          cache_name: libs
      - run:
          command: pnpm nx run-many --target=build --all --exclude=web,api -c ci
          name: Build Nx Libs
      - save-nx-cache:
          cache_name: libs
  clear-jest-cache:
    description: Clear Jest Spec
    steps:
      - run:
          command: |
            pnpm jest --clearCache
  install-cypher-shell:
    steps:
      - run:
          command: |
            # Install Java 21 from Adoptium (Eclipse Temurin)
            apt-get update
            apt-get install -y wget apt-transport-https lsb-release

            # Add Adoptium repository for Java 21
            wget -qO - https://packages.adoptium.net/artifactory/api/gpg/key/public | gpg --dearmor -o /etc/apt/keyrings/adoptium.gpg
            # Use bookworm as the codename for Debian 12
            echo "deb [signed-by=/etc/apt/keyrings/adoptium.gpg] https://packages.adoptium.net/artifactory/deb bookworm main" | tee /etc/apt/sources.list.d/adoptium.list

            apt-get update
            apt-get install -y temurin-21-jre

            # https://neo4j.com/docs/operations-manual/current/installation/linux/debian/
            wget -O - https://debian.neo4j.com/neotechnology.gpg.key | gpg --dearmor -o /etc/apt/keyrings/neotechnology.gpg

            echo 'deb [signed-by=/etc/apt/keyrings/neotechnology.gpg] https://debian.neo4j.com stable latest' | tee -a /etc/apt/sources.list.d/neo4j.list

            apt-get update

            apt-get install -y neo4j cypher-shell
          name: Install Cypher Shell
  install-docker-cli:
    description: Install Docker CLI
    steps:
      - run:
          command: |
            apt-get update
            apt-get install -y ca-certificates curl
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
            chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            apt-get install -y docker-ce-cli docker-buildx-plugin
          name: Install Docker CLI
  install-doctl:
    description: Install DigitalOcean CLI (doctl)
    steps:
      - run:
          command: |-
            echo "Installing DigitalOcean CLI..."

            DOCTL_VERSION="1.104.0"
            ARCH=$(uname -m)
            if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
              DOCTL_ARCH="linux-arm64"
            else
              DOCTL_ARCH="linux-amd64"
            fi

            cd /tmp
            wget -q "https://github.com/digitalocean/doctl/releases/download/v${DOCTL_VERSION}/doctl-${DOCTL_VERSION}-${DOCTL_ARCH}.tar.gz"
            tar xf "doctl-${DOCTL_VERSION}-${DOCTL_ARCH}.tar.gz"
            mv doctl /usr/local/bin
            rm "doctl-${DOCTL_VERSION}-${DOCTL_ARCH}.tar.gz"

            # Verify installation
            doctl version
            echo "DigitalOcean CLI installation completed"
          name: Install doctl
  install-nvm:
    steps:
      - restore_cache:
          keys:
            - nvm-cache-{{ checksum ".nvmrc" }}
          name: Restore NVM Cache
      - run:
          command: source .circleci/config/install-nvm.sh
          name: Install NVM
      - save_cache:
          key: nvm-cache-{{ checksum ".nvmrc" }}
          name: Save NVM Cache
          paths:
            - ~/.nvm
      - run:
          command: |
            source $BASH_ENV
            nvm install 22.14.0
            nvm alias default 22.14.0
            node -v
            which node
            npm -v
            which npm
            npx -v
            which npx
          name: Set Node Version
  install-packages:
    steps:
      - restore_cache:
          keys:
            - pnpm-cache-v2-{{ checksum "pnpm-lock.yaml" }}
            - pnpm-cache-v2
          name: Restore pnpm Package Cache
      - run:
          command: pnpm install --frozen-lockfile
          name: Install NPM Packages
      - save_cache:
          key: pnpm-cache-v2-{{ checksum "pnpm-lock.yaml" }}
          name: Save pnpm Cache
          paths:
            - ~/.pnpm-store
      - run:
          command: scripts/circleci/generate-dist-checksum.sh
          name: Generate dist libs checksum for cache key
      - save_cache:
          key: node-modules-cache-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "/tmp/dist-libs-checksum.txt" }}
          name: Save node_modules Cache
          paths:
            - node_modules
  install-packer:
    description: Install Packer
    steps:
      - run:
          command: |
            set -x

            curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -

            apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

            apt-get update && apt-get install -y packer
          name: Install Packer
  install-pnpm:
    steps:
      - run:
          command: |
            set -x

            # Install corepack using the correct path
            # https://github.com/pnpm/pnpm/issues/9029
            npm install -g corepack@0.31.0

            corepack enable
            corepack prepare pnpm@9.15.5 --activate
            pnpm config set store-dir ~/.pnpm-store
          name: Install pnpm package manager
  install-terraform:
    description: Install Terraform
    steps:
      - run:
          command: |
            set -x

            apt-get update && apt-get install -y gnupg software-properties-common

            apt list upgrade

            wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null

            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            tee /etc/apt/sources.list.d/hashicorp.list

            gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint

            apt update
            apt install -y terraform=1.7.0-*
          name: Install Terraform
  load-nvm:
    steps:
      - run:
          command: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          name: Load NVM
  login-docker:
    description: Login to Docker
    steps:
      - run:
          command: |
            echo "$DIGITALOCEAN_ACCESS_TOKEN" | docker login --username codelabapp --password-stdin registry.digitalocean.com
          name: Login to Docker Registry
  restore-nx-cache:
    description: Restore Nx << parameters.cache_name >> cache
    parameters:
      cache_name:
        description: The name of the cache (e.g., lint, unit, integration, e2e, apps, libs)
        type: string
    steps:
      - restore_cache:
          keys:
            - v{{ .Environment.CI_CACHE_VERSION }}-nx-<< parameters.cache_name >>-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "pnpm-lock.yaml" }}
            - v{{ .Environment.CI_CACHE_VERSION }}-nx-<< parameters.cache_name >>-cache-{{ .Environment.CIRCLE_BRANCH }}-
            - v{{ .Environment.CI_CACHE_VERSION }}-nx-<< parameters.cache_name >>-cache-
          name: Restore Nx << parameters.cache_name >> Cache
  restore-workspace:
    description: Restore Workspace
    steps:
      - checkout
      - setup-env
      - attach_workspace:
          at: ~/
      - run:
          command: scripts/circleci/generate-dist-checksum.sh
          name: Generate dist libs checksum for cache key
      - restore_cache:
          keys:
            - node-modules-cache-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "/tmp/dist-libs-checksum.txt" }}
            - node-modules-cache-{{ checksum "pnpm-lock.yaml" }}
            - node-modules-cache-
          name: Restore node_modules Cache
      - restore_cache:
          keys:
            - nvm-cache-{{ checksum ".nvmrc" }}
          name: Restore NVM Cache
      - install-pnpm
  restore-workspace-database:
    description: Restore Workspace
    steps:
      - checkout
      - setup-env
      - attach_workspace:
          at: ~/
      - run:
          command: scripts/circleci/generate-dist-checksum.sh
          name: Generate dist libs checksum for cache key
      - restore_cache:
          keys:
            - node-modules-cache-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "/tmp/dist-libs-checksum.txt" }}
            - node-modules-cache-{{ checksum "pnpm-lock.yaml" }}-
            - node-modules-cache-
          name: Restore node_modules Cache
      - restore_cache:
          keys:
            - nvm-cache-{{ checksum ".nvmrc" }}
          name: Restore NVM Cache
      - install-pnpm
      - install-cypher-shell
  restore-workspace-infra:
    description: Restore Infra Workspace
    steps:
      - restore-workspace
      - install-terraform
  save-nx-cache:
    description: Save Nx << parameters.cache_name >> cache
    parameters:
      cache_name:
        description: The name of the cache (e.g., lint, unit, integration, e2e, apps, libs)
        type: string
      extra_paths:
        default: ''
        description: Additional paths to cache (optional)
        type: string
    steps:
      - when:
          condition:
            not:
              equal:
                - << parameters.extra_paths >>
                - ''
          steps:
            - save_cache:
                key: v{{ .Environment.CI_CACHE_VERSION }}-nx-<< parameters.cache_name >>-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "pnpm-lock.yaml" }}
                name: Save Nx << parameters.cache_name >> Cache
                paths:
                  - .nx/cache-<< parameters.cache_name >>
                  - << parameters.extra_paths >>
      - unless:
          condition:
            not:
              equal:
                - << parameters.extra_paths >>
                - ''
          steps:
            - save_cache:
                key: v{{ .Environment.CI_CACHE_VERSION }}-nx-<< parameters.cache_name >>-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "pnpm-lock.yaml" }}
                name: Save Nx << parameters.cache_name >> Cache
                paths:
                  - .nx/cache-<< parameters.cache_name >>
  setup-env:
    description: Setup Env
    steps:
      - run:
          command: source .circleci/config/env.sh
          name: Setup Env
  setup-neo4j:
    description: Setup Neo4j
    steps:
      - run:
          command: |
            neo4j-admin server memory-recommendation --docker
          name: Run Neo4j Memory Recommendations
      - run:
          command: |
            ./enable-cdc.sh
          name: Enable CDC
          working_directory: .docker/cypher/scripts
      - run:
          command: |
            ./apply-constraints.sh
          name: Apply Neo4j Constraints
          working_directory: .docker/cypher/scripts
environment: null
executors:
  docker-browser-amd64:
    docker:
      - image: cimg/node:22.14.0-browsers
  docker-node-amd64:
    docker:
      - image: cimg/node:22.14.0
  docker-node-arm64:
    docker:
      - image: node:22
  docker-node-neo4j-arm64:
    docker:
      - image: node:22
      - environment:
          NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
          NEO4J_AUTH: neo4j/password
          NEO4J_PLUGINS: '["apoc"]'
          NEO4J_server_jvm_additional: -XX:+ExitOnOutOfMemoryError
        image: neo4j:5.26.3-enterprise
jobs:
  build-nx-apps:
    environment:
      NODE_OPTIONS: --max-old-space-size=<< parameters.max_old_space_size >>
      NX_CACHE_DIRECTORY: .nx/cache-apps
      NX_VERBOSE_LOGGING: true
    executor: docker-node-arm64
    parameters:
      max_old_space_size:
        type: integer
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - restore-workspace
      - build-nx-apps
  build-nx-libs:
    environment:
      NODE_OPTIONS: --max-old-space-size=<< parameters.max_old_space_size >>
      NX_CACHE_DIRECTORY: .nx/cache-libs
    executor: docker-node-arm64
    parameters:
      max_old_space_size:
        type: integer
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - restore-workspace
      - build-nx-libs
  codegen:
    executor: docker-node-neo4j-arm64
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - restore-workspace-database
      - setup-neo4j
      - run:
          command: pnpm cli tasks graphql-codegen --stage ci
          name: Check GraphQL Codegen
      - run:
          command: pnpm cli tasks workspace-codegen --stage ci
          name: Check Generate Workspace
  docker-api:
    executor: docker-node-amd64
    resource_class: medium
    steps:
      - restore-workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: docker buildx bake --file .docker/prod/base.bake.hcl --file .docker/prod/api.bake.hcl --push --progress=plain
          name: Build and Push API Docker Image
  docker-landing:
    environment:
      NODE_OPTIONS: --max-old-space-size=6144
    executor: docker-node-amd64
    resource_class: large
    steps:
      - restore-workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: docker buildx bake --file .docker/prod/base.bake.hcl --file .docker/prod/landing.bake.hcl --push --progress=plain
          name: Build and Push Landing Docker Image
  docker-sites:
    environment:
      NODE_OPTIONS: --max-old-space-size=6144
    executor: docker-node-amd64
    resource_class: large
    steps:
      - restore-workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: docker buildx bake --file .docker/prod/base.bake.hcl --file .docker/prod/sites.bake.hcl --push --progress=plain
          name: Build and Push Sites Docker Image
  docker-web:
    environment:
      NODE_OPTIONS: --max-old-space-size=6144
    executor: docker-node-amd64
    resource_class: large
    steps:
      - restore-workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
          name: Setup Docker Buildx
      - run:
          command: docker buildx bake --file .docker/prod/base.bake.hcl --file .docker/prod/web.bake.hcl --push --progress=plain
          name: Build and Push Web Docker Image
  e2e:
    environment:
      NODE_OPTIONS: --max-old-space-size=<< parameters.max_old_space_size >>
      NX_CACHE_DIRECTORY: .nx/cache-e2e
    executor: docker-node-neo4j-arm64
    parallelism: 4
    parameters:
      max_old_space_size:
        type: integer
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - setup_remote_docker:
          version: default
      - restore-workspace-database
      - restore-nx-cache:
          cache_name: e2e
      - run:
          command: |
            echo "=== Checking restored workspace ==="
            echo "Current directory: $(pwd)"
            echo ""
            echo "Checking ~/project/dist/apps:"
            ls -la ~/project/dist/apps/ 2>/dev/null || echo "No ~/project/dist/apps directory"
            echo ""
            echo "Checking dist/apps (relative):"
            ls -la dist/apps/ 2>/dev/null || echo "No dist/apps directory"
            echo ""
            echo "Checking for web and api builds:"
            ls -la dist/apps/web/ 2>/dev/null | head -10 || echo "No web build found"
            ls -la dist/apps/api/ 2>/dev/null | head -10 || echo "No api build found"
          name: Check workspace after restore
      - setup-neo4j
      - run: pnpm npx playwright install-deps
      - run:
          command: |
            # Original test command
            SHARD="$((${CIRCLE_NODE_INDEX}+1))"
            echo $SHARD;
            echo $CIRCLE_NODE_TOTAL;

            pnpm nx e2e web-e2e -c ci \
              --shard=${SHARD}/${CIRCLE_NODE_TOTAL}
          name: Run E2E Tests
          no_output_timeout: 15m
      - save-nx-cache:
          cache_name: e2e
      - run:
          command: |
            apt-get update && apt-get install -y docker.io
          name: Install Docker CLI
      - run:
          command: |
            set -x

            mkdir -p tmp/logs

            docker logs $(docker ps --filter "ancestor=neo4j:5.26.3-enterprise" --format "{{.ID}}") > tmp/logs/neo4j.log 2>&1
          name: Capture Docker logs
          when: always
      - store_artifacts:
          destination: docker-logs
          path: tmp/logs
      - store_artifacts:
          destination: playwright-report
          path: tmp/reports/e2e
      - store_test_results:
          path: tmp/reports/e2e/junit
  flux-reconcile:
    executor: docker-node-amd64
    resource_class: small
    steps:
      - run:
          command: |-
            # Trigger Flux webhook to reconcile
            curl -X POST \
              -H "Host: flux.codelab.app" \
              http://159.89.243.147/hook/32f81c88f9f3c3d35c4cfb394757bb2fa3feaf2fc87f95a66156ce17d20e292b \
              --fail \
              --show-error

            echo "Flux webhook triggered successfully"
          name: Trigger Flux reconciliation via webhook
  integration:
    environment:
      NODE_OPTIONS: --max-old-space-size=<< parameters.max_old_space_size >>
      NX_CACHE_DIRECTORY: .nx/cache-integration
    executor: docker-node-neo4j-arm64
    parameters:
      max_old_space_size:
        type: integer
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - restore-workspace-database
      - restore-nx-cache:
          cache_name: integration
      - setup-neo4j
      - run:
          command: pnpm cli tasks int --stage ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./tmp/reports/test-integration
          name: Run Integration Tests
          no_output_timeout: 10m
      - save-nx-cache:
          cache_name: integration
      - store_test_results:
          path: ./tmp/reports/test-integration
  lint:
    environment:
      CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
      CIRCLE_REVISION: << pipeline.git.revision >>
      NODE_OPTIONS: --max-old-space-size=<< parameters.max_old_space_size >>
      NX_CACHE_DIRECTORY: .nx/cache-lint
    executor: docker-node-arm64
    parameters:
      max_old_space_size:
        type: integer
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - restore-workspace
      - restore-nx-cache:
          cache_name: lint
      - run:
          command: pnpm cli tasks lint --stage ci
          name: Run Lint on Repository
      - save-nx-cache:
          cache_name: lint
      - store_test_results:
          path: ./tmp/reports/lint
  notify-failure:
    executor: docker-browser-amd64
    resource_class: medium
    steps:
      - swissknife/wait_for_job:
          job-name: install-and-build-workspace,lint,unit,e2e,codegen
      - slack/notify:
          channel: $SLACK_CHANNEL_UPDATE
          event: fail
          template: basic_fail_1
  notify-success:
    executor: docker-browser-amd64
    resource_class: medium
    steps:
      - slack/notify:
          channel: $SLACK_CHANNEL_UPDATE
          custom: |
            {
            	"text": "CircleCI job succeeded!",
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Job Succeeded. :white_check_mark:",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Job*: ${CIRCLE_JOB}"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Project*:\n $CIRCLE_PROJECT_REPONAME"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Branch*:\n $CIRCLE_BRANCH"
                            },
                            {
            					"type": "mrkdwn",
            					"text": "*Commit*:\n $CIRCLE_SHA1"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Author*:\n $CIRCLE_USERNAME"
            				}
            			],
            			"accessory": {
            				"type": "image",
            				"image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
            				"alt_text": "CircleCI logo"
            			}
            		},
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Mentions*:\n $SLACK_PARAM_MENTIONS"
                    }
                  ]
                },
            		{
            			"type": "actions",
            			"elements": [
            				{
            					"type": "button",
            					"text": {
            						"type": "plain_text",
            						"text": "View Job"
            					},
            					"url": "${CIRCLE_BUILD_URL}"
            				}
            			]
            		}
            	]
            }
          event: pass
  packer-image:
    executor: docker-node-arm64
    resource_class: arm.medium
    steps:
      - restore-workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: (./scripts/docker/prod/build-landing.sh)
          name: Build landing Docker image
      - run:
          command: docker compose --verbose -f .docker/prod/build.docker-compose.yaml push landing
          name: Push Docker Image
  setup-infra-workspace:
    executor: docker-node-amd64
    resource_class: large
    steps:
      - checkout
      - setup-env
      - install-pnpm
      - install-packages
      - login-docker
      - persist_to_workspace:
          paths:
            - .docker/config.json
          root: ~/
  setup-workspace:
    environment:
      NODE_OPTIONS: --max-old-space-size=<< parameters.max_old_space_size >>
    executor: docker-node-arm64
    parameters:
      max_old_space_size:
        type: integer
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - setup-env
      - install-nvm
      - install-pnpm
      - install-packages
  tf-apply:
    executor: docker-node-arm64
    parameters:
      stage:
        enum:
          - prod
          - ci
        type: enum
    steps:
      - restore-workspace-infra
      - run:
          command: pnpm cli terraform --stage << parameters.stage >> init
          name: Terraform Init
      - run:
          command: pnpm cli terraform --stage << parameters.stage >> --autoApprove apply
          name: Terraform Apply
  tf-plan:
    executor: docker-node-arm64
    parameters:
      stage:
        enum:
          - prod
          - ci
        type: enum
    steps:
      - restore-workspace-infra
      - run:
          command: |
            echo "credentials \"app.terraform.io\" {token = \"$TERRAFORM_USER_TOKEN\"}" >> $HOME/.terraformrc
          name: Create .terraformrc file locally
      - run: terraform --version
      - run:
          command: terraform -chdir=infra/terraform fmt
          name: Terraform Format
      - run:
          command: pnpm cli terraform --stage << parameters.stage >> init
          name: Terraform Init
      - run:
          command: pnpm cli terraform --stage << parameters.stage >> validate
          name: Terraform Validate
      - run:
          command: pnpm cli terraform --stage << parameters.stage >> plan
          name: Terraform Plan
      - persist_to_workspace:
          paths:
            - .terraformrc
            - project/terraform/.terraform
          root: ~/
  tsc-check:
    executor: docker-node-arm64
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - restore-workspace
      - run:
          command: pnpm nx run-many --target=tsc-check --target=tsc-check:spec
          name: Run tsc Check
  unit:
    environment:
      NX_CACHE_DIRECTORY: .nx/cache-unit
    executor: docker-node-arm64
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - restore-workspace
      - restore-nx-cache:
          cache_name: unit
      - run:
          command: pnpm cli tasks unit --stage ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./tmp/reports/test-unit
          name: Run Unit Tests
      - save-nx-cache:
          cache_name: unit
      - store_test_results:
          path: ./tmp/reports/test-unit
orbs:
  node: circleci/node@7.1.0
  nx: nrwl/nx@1.6.2
  queue: eddiewebb/queue@2.2.1
  slack: circleci/slack@4.12.5
  swissknife: roopakv/swissknife@0.69.0
  terraform: circleci/terraform@3.2.1
version: 2.1
workflows:
  app:
    jobs:
      - setup-workspace:
          filters:
            branches:
              only:
                - master
          max_old_space_size: 6144
          resource_class: arm.large
      - hold-deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - setup-workspace
          type: approval
      - tf-plan:
          filters:
            branches:
              only:
                - staging
          name: tf-plan-ci
          requires:
            - hold-deploy
          stage: ci
      - tf-apply:
          filters:
            branches:
              only:
                - staging
          name: tf-apply-ci
          requires:
            - tf-plan-ci
          stage: ci
      - setup-infra-workspace:
          filters:
            branches:
              only:
                - master
          requires:
            - hold-deploy
      - docker-web:
          context:
            - prod
          filters:
            branches:
              only:
                - master
          requires:
            - setup-infra-workspace
      - docker-api:
          context:
            - prod
          filters:
            branches:
              only:
                - master
          requires:
            - setup-infra-workspace
      - docker-sites:
          context:
            - prod
          filters:
            branches:
              only:
                - master
          requires:
            - setup-infra-workspace
      - docker-landing:
          context:
            - prod
          filters:
            branches:
              only:
                - master
          requires:
            - setup-infra-workspace
      - tf-plan:
          filters:
            branches:
              only:
                - master
          requires:
            - docker-web
            - docker-api
            - docker-sites
            - docker-landing
          stage: prod
      - hold-apply:
          filters:
            branches:
              only:
                - master
          requires:
            - tf-plan
          type: approval
      - tf-apply:
          filters:
            branches:
              only:
                - master
          requires:
            - hold-apply
          stage: prod
  app-pr:
    jobs:
      - setup-workspace:
          context:
            - build
          filters:
            branches:
              ignore:
                - master
                - staging
          max_old_space_size: 6144
          resource_class: arm.large
      - lint:
          filters:
            branches:
              ignore:
                - master
                - staging
          max_old_space_size: 8192
          requires:
            - setup-workspace
          resource_class: arm.large
      - build-nx-apps:
          filters:
            branches:
              ignore:
                - master
                - staging
          max_old_space_size: 4096
          requires:
            - setup-workspace
          resource_class: arm.large
      - build-nx-libs:
          filters:
            branches:
              ignore:
                - master
                - staging
          max_old_space_size: 4096
          requires:
            - setup-workspace
          resource_class: arm.large
      - tsc-check:
          filters:
            branches:
              ignore:
                - master
                - staging
          requires:
            - setup-workspace
          resource_class: arm.large
      - codegen:
          filters:
            branches:
              ignore:
                - master
                - staging
          requires:
            - setup-workspace
          resource_class: arm.medium
      - unit:
          filters:
            branches:
              ignore:
                - master
                - staging
          requires:
            - setup-workspace
          resource_class: arm.large
      - integration:
          filters:
            branches:
              ignore:
                - master
                - staging
          max_old_space_size: 8192
          requires:
            - setup-workspace
          resource_class: arm.large
      - e2e:
          filters:
            branches:
              ignore:
                - master
                - staging
          max_old_space_size: 4096
          requires:
            - build-nx-apps
          resource_class: arm.large
      - notify-success:
          filters:
            branches:
              ignore:
                - master
                - staging
          requires:
            - lint
            - codegen
            - unit
            - integration
            - build-nx-libs
            - build-nx-apps
            - tsc-check
            - e2e
  infra-pr:
    jobs:
      - flux-reconcile:
          context:
            - prod
          filters:
            branches:
              only:
                - staging
            tags:
              only: /^([0-9]+\.[0-9]+\.[0-9]+|latest)$/
working_directory: ~/project
