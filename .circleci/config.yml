# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Success notification is added to end of workflow, while failure notification is added to end of each job.

filters-dev-pr: &filters-dev-pr
  filters:
    branches:
      ignore:
        - master
        - production
        - staging

filters-master: &filters-master
  filters:
    branches:
      only:
        - master

filters-staging: &filters-staging
  filters:
    branches:
      only:
        - staging

filters-prod: &filters-prod
  filters:
    branches:
      only:
        - production

executor-params: &executor-params
  parameters:
    e:
      type: executor
      default: machine-ubuntu
  executor: << parameters.e >>

executor-config: &executor-config
  environment:
    DOCKER_TAG_VERSION: 0.02
    # CircleCI
    GITHUB_ANTON_M: antonmihaylov
    SLACK_ANTON_M: <@U01HWRY2USE>
    GITHUB_WEBBER: webberwang
    SLACK_WEBBER: <@U0J401GAH>
    SLACK_CHANNEL_UPDATE: CQVPNKS8K
    COLOR_SUCCESS: '#b7eb8f'
    COLOR_FAILURE: '#ffccc7'
    NODE_OPTIONS: --max_old_space_size=16384
    NODE_ENV: production
  working_directory: ~/project

version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  node: circleci/node@4.7.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecs: circleci/aws-ecs@2.2.1

executors:
  machine-ubuntu:
    <<: *executor-config
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202010-01
    resource_class: large
  docker-node:
    <<: *executor-config
    docker:
      - image: cimg/node:14.16.0-browsers
    resource_class: large
  cypress-node:
    <<: *executor-config
    docker:
      - image: cypress/browsers:chrome77
    resource_class: large
  docker-python:
    <<: *executor-config
    docker:
      - image: circleci/python:3.7
    resource_class: large

commands:
  setup-workspace:
    description: 'Setup workspace'
    steps:
      - checkout
      - attach_workspace:
          at: ..
      - run:
          name: 'Install NVM'
          command: |
            # Set path before install, otherwise paths will be different in the executors
            echo 'export NODE_OPTIONS=$NODE_OPTIONS' >> $BASH_ENV
            source $BASH_ENV
            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
      - run:
          name: 'Setup env'
          command: |
            # git settings
            echo 'export GIT_COMMIT_MSG=$(git log --format="format:%s" -n 1 ${CIRCLE_SHA1})' >> $BASH_ENV
            # slack settings
            if [ $CIRCLE_USERNAME == $GITHUB_ANTON_M ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_ANTOM_M}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_OLEK ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_OLEK}' >> $BASH_ENV
            elif [ $CIRCLE_USERNAME == $GITHUB_ANGEL ]; then
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_ANGEL}' >> $BASH_ENV
            else
              echo 'export SLACK_PARAM_MENTIONS=${SLACK_WEBBER}' >> $BASH_ENV
            fi
            # finally import bash env
            source $BASH_ENV
      - run:
          name: 'Set node version'
          command: |
            nvm install 14.16.0
            nvm alias default 14.16.0
            node -v

  yarn-install-dev:
    steps:
      - restore_cache:
          name: 'Restore Yarn cache'
          keys:
            - dep-cache-staging-{{ checksum "yarn.lock" }}
            # https://discuss.circleci.com/t/circle-2-0-caching-is-too-limited-to-be-very-useful/11694
            - dep-cache-staging-
      - run:
          name: 'Install NPM packages'
          command: yarn install --frozen-lockfile --prod=false

  yarn-install-prod:
    description: 'Install prod dependencies'
    steps:
      - run:
          name: 'Install Yarn'
          command: npm install --global yarn
      - restore_cache:
          name: 'Restore Yarn cache'
          keys:
            - dep-cache-prod-{{ checksum "yarn.lock" }}
            - dep-cache-prod-
      - run:
          name: 'Install NPM packages'
          command: yarn install --frozen-lockfile --prod=true
      - save_cache:
          name: 'Save cache'
          key: dep-cache-prod-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress

  notify-failure:
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_CHANNEL_UPDATE
          template: basic_fail_1

  setup-dgraph:
    description: 'Setup Dgraph'
    steps:
      - run:
          name: 'Update Dgraph Schema'
          command: yarn cli dgraph update-schema --env ci
      - run:
          name: 'Reset Dgraph Data'
          command: yarn cli dgraph reset-data --env ci

  build-docker-image:
    description: 'Build docker image'
    steps:
      - setup-workspace
      - setup_remote_docker:
          version: 19.03.8
      - aws-cli/setup
      - run:
          name: 'Setup common environment variables'
          command: |
            echo 'export ECR_REPOSITORY_NAME="${APP_PREFIX}-api"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: 'Build Docker image'
          command: |
            docker build -t $FULL_IMAGE_NAME -f .docker/Dockerfile .
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image

  deploy-to-ecs:
    description: 'Deploy the docker to ecs instance'
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.8
      - attach_workspace:
          at: workspace
      - aws-cli/setup
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECS_CLUSTER_NAME="${APP_PREFIX}-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="${APP_PREFIX}-service"' >> $BASH_ENV
            echo 'export ECS_TASK_FAMILTY="${APP_PREFIX}-app-task"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_PREFIX}-api:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            aws ecr get-login-password | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_PREFIX}-api"
            docker push $FULL_IMAGE_NAME
      - aws-ecs/update-service:
          family: '${ECS_TASK_FAMILTY}'
          cluster-name: '${ECS_CLUSTER_NAME}'
          service-name: '${ECS_SERVICE_NAME}'
          container-image-name-updates: 'container=${APP_PREFIX}-app,tag=${CIRCLE_SHA1}'
          force-new-deployment: true
          verify-revision-is-deployed: true

  setup-staging:
    description: 'Setup staging deployment'
    steps:
      - run: echo 'export APP_PREFIX="${APP_STAGING_PREFIX}"' >> $BASH_ENV

  setup-prod:
    description: 'Setup prod deployment'
    steps:
      - run: echo 'export APP_PREFIX="${APP_PROD_PREFIX}"' >> $BASH_ENV

jobs:
  install-and-build-workspace:
    <<: *executor-params
    steps:
      - setup-workspace
      - yarn-install-dev
      - run:
          name: 'Build CI'
          command: make build-ci
      - run:
          name: 'Remove Unused Cache'
          command: |
            npx cypress cache path
            rm -rf ~/project/node_modules/.cache
      #            npx cypress cache prune
      - save_cache:
          name: 'Save Cache'
          key: dep-cache-staging-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
            - ~/project/node_modules
            - ~/project/dist/apps/web/.next/cache
      - persist_to_workspace:
          root: ~/
          paths:
            - project/node_modules
            - project/dist
            - .cache/Cypress
      - notify-failure

  lint:
    <<: *executor-params
    environment:
      CIRCLE_BASE_REVISION: << pipeline.git.base_revision >>
      CIRCLE_REVISION: << pipeline.git.revision >>
    steps:
      - setup-workspace
      - run: make lint-eslint-ci
      - run:
          name: 'Circular Dependencies Check'
          command: make lint-circular-dep
      - run:
          name: 'Commitlint'
          command: ./scripts/lint/commitlint-ci.sh
      - notify-failure

  unit:
    <<: *executor-params
    steps:
      - setup-workspace
      - run: make unit-ci
      - notify-failure

  integration:
    <<: *executor-params
    steps:
      - setup-workspace
      # Since integration doesn't require frontend, we reserve 8081 for e2e & use 8082 here instead
      - run: echo 'export CODELAB_DGRAPH_ENDPOINT="${CODELAB_DGRAPH_INTEGRATION_ENDPOINT}"'
      - setup-dgraph
      - run: make integration-ci
      - notify-failure

  e2e:
    <<: *executor-params
    steps:
      - setup-workspace
      # Since e2e requires frontend, we use 8081 here
      - run: echo 'export CODELAB_DGRAPH_ENDPOINT="${CODELAB_DGRAPH_E2E_ENDPOINT}"'
      - setup-dgraph
      - run: npx cypress install
      - run: npx cypress verify
      - run: make e2e-ci-affected
      - notify-failure

  notify-success:
    <<: *executor-params
    steps:
      - setup-workspace
      - slack/notify:
          event: pass
          channel: $SLACK_CHANNEL_UPDATE
          custom: |
            {
            	"text": "CircleCI job succeeded!",
            	"blocks": [
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "Job Succeeded. :white_check_mark:",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Job*: ${CIRCLE_JOB}"
            				}
            			]
            		},
            		{
            			"type": "section",
            			"fields": [
            				{
            					"type": "mrkdwn",
            					"text": "*Project*:\n $CIRCLE_PROJECT_REPONAME"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Branch*:\n $CIRCLE_BRANCH"
                            },
                            {
            					"type": "mrkdwn",
            					"text": "*Commit*:\n $CIRCLE_SHA1"
            				},
            				{
            					"type": "mrkdwn",
            					"text": "*Author*:\n $CIRCLE_USERNAME"
            				}
            			],
            			"accessory": {
            				"type": "image",
            				"image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
            				"alt_text": "CircleCI logo"
            			}
            		},
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Mentions*:\n $SLACK_PARAM_MENTIONS"
                    }
                  ]
                },
            		{
            			"type": "actions",
            			"elements": [
            				{
            					"type": "button",
            					"text": {
            						"type": "plain_text",
            						"text": "View Job"
            					},
            					"url": "${CIRCLE_BUILD_URL}"
            				}
            			]
            		}
            	]
            }

  build-docker-staging:
    <<: *executor-params
    steps:
      - setup-staging
      - build-docker-image

  deploy-to-staging:
    <<: *executor-params
    steps:
      - setup-staging
      - deploy-to-ecs

  build-docker-prod:
    <<: *executor-params
    steps:
      - setup-prod
      - build-docker-image

  deploy-to-prod:
    <<: *executor-params
    steps:
      - setup-prod
      - deploy-to-ecs

workflows:
  app-dev-pr:
    jobs:
      - install-and-build-workspace:
          <<: *filters-dev-pr
          e: docker-node
          context: CI
      - lint:
          <<: *filters-dev-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-dev-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - integration:
          <<: *filters-dev-pr
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - e2e:
          <<: *filters-dev-pr
          e: docker-node
          context: CI
          requires:
            - integration
            - install-and-build-workspace
      - notify-success:
          <<: *filters-dev-pr
          context: CI
          e: docker-node
          requires:
            - lint
            - unit
            - integration
            - e2e

  app-master:
    jobs:
      - install-and-build-workspace:
          <<: *filters-master
          e: docker-node
          context: CI
      - lint:
          <<: *filters-master
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - notify-success:
          <<: *filters-master
          context: CI
          e: docker-node
          requires:
            - lint

  app-staging:
    jobs:
      - install-and-build-workspace:
          <<: *filters-staging
          e: docker-node
          context: CI
      - lint:
          <<: *filters-staging
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-staging
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - integration:
          <<: *filters-staging
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - e2e:
          <<: *filters-staging
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - build-docker-staging:
          <<: *filters-staging
          e: docker-node
          context: CI
          requires:
            - e2e
      - deploy-to-staging:
          <<: *filters-staging
          e: docker-python
          context: CI
          requires:
            - build-docker-staging
      - notify-success:
          <<: *filters-staging
          e: docker-node
          context: CI
          requires:
            - deploy-to-staging

  app-prod:
    jobs:
      - install-and-build-workspace:
          <<: *filters-prod
          e: docker-node
          context: CI
      - lint:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - unit:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - integration:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - e2e:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - install-and-build-workspace
      - build-docker-prod:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - lint
            - unit
            - integration
            - e2e
      - deploy-to-prod:
          <<: *filters-prod
          e: docker-python
          context: CI
          requires:
            - build-docker-prod
      - notify-success:
          <<: *filters-prod
          e: docker-node
          context: CI
          requires:
            - deploy-to-prod
