parameters:
  resource_class:
    type: string

executor: docker-node-neo4j

resource_class: << parameters.resource_class >>

steps:
  - restore-workspace-database
  - setup-neo4j
  - run:
      name: 'Check GraphQL Codegen'
      command: pnpm cli tasks graphql-codegen --stage ci
  - run:
      name: 'Debug: Check dist folder structure'
      command: |
        echo "=== Checking dist/libs/tools/workspace structure ==="
        ls -la dist/libs/tools/workspace/ || echo "Directory not found"
        echo ""
        echo "=== Checking generators.json ==="
        cat dist/libs/tools/workspace/generators.json || echo "generators.json not found"
        echo ""
        echo "=== Checking src/generators directory ==="
        ls -la dist/libs/tools/workspace/src/generators/ || echo "Generators directory not found"
        echo ""
        echo "=== Checking nx-project-config generator files ==="
        ls -la dist/libs/tools/workspace/src/generators/nx-project-config/ || echo "nx-project-config directory not found"
        echo ""
        echo "=== Checking if JavaScript files exist ==="
        test -f dist/libs/tools/workspace/src/generators/nx-project-config/nx-project-config.js && echo "nx-project-config.js EXISTS" || echo "nx-project-config.js NOT FOUND"
  - run:
      name: 'Debug: Check pnpm workspace protocol linking'
      command: |
        echo "=== Checking pnpm list for @codelab/tools-workspace ==="
        pnpm list @codelab/tools-workspace || echo "Package not listed"
        echo ""
        echo "=== Checking node_modules/.pnpm for workspace package ==="
        ls -la node_modules/.pnpm/ | grep "@codelab+tools-workspace" || echo "Not found in .pnpm"
        echo ""
        echo "=== Checking actual installed location ==="
        find node_modules/.pnpm -name "tools-workspace" -type d 2>/dev/null | head -5
        echo ""
        echo "=== Checking symlink in node_modules ==="
        ls -la node_modules/@codelab/tools-workspace || echo "Symlink not found"
        echo ""
        echo "=== Checking if pnpm installed workspace packages correctly ==="
        pnpm list --depth=0 | grep "file:dist" || echo "No file: protocol packages found"
  - run:
      name: 'Debug: Verify workspace package contents'
      command: |
        echo "=== Finding the actual @codelab/tools-workspace in node_modules ==="
        WORKSPACE_PATH=$(find node_modules/.pnpm -path "*/@codelab/tools-workspace" -type d 2>/dev/null | head -1)
        if [ -n "$WORKSPACE_PATH" ]; then
          echo "Found at: $WORKSPACE_PATH"
          echo ""
          echo "=== Contents of installed workspace package ==="
          ls -la "$WORKSPACE_PATH"
          echo ""
          echo "=== Checking generators in installed location ==="
          ls -la "$WORKSPACE_PATH/src/generators/nx-project-config/" || echo "Generators not found in installed location"
        else
          echo "Could not find @codelab/tools-workspace in node_modules"
        fi
  - run:
      name: 'Debug: Check pnpm workspace and file protocol'
      command: |
        echo "=== Current working directory ==="
        pwd
        echo ""
        echo "=== Checking pnpm-workspace.yaml ==="
        cat pnpm-workspace.yaml || echo "pnpm-workspace.yaml not found"
        echo ""
        echo "=== Checking package.json devDependencies for file: protocol ==="
        cat package.json | jq '.devDependencies | to_entries[] | select(.value | startswith("file:"))' || echo "Failed to parse package.json"
        echo ""
        echo "=== Checking if pnpm install was run ==="
        test -f pnpm-lock.yaml && echo "pnpm-lock.yaml EXISTS" || echo "pnpm-lock.yaml NOT FOUND"
        echo ""
        echo "=== Checking Node.js and pnpm versions ==="
        node --version
        pnpm --version
        echo ""
        echo "=== Re-installing @codelab/tools-workspace specifically ==="
        pnpm install @codelab/tools-workspace --force || echo "Failed to reinstall"
  - run:
      name: 'Debug: Try running the generator directly'
      command: |
        echo "=== Attempting to run generator directly with more verbose output ==="
        pnpm nx generate @codelab/tools-workspace:nx-project-config --no-interactive --verbose || true
        echo ""
        echo "=== Checking nx.json for generator configuration ==="
        cat nx.json | jq '.generators' || echo "No generators config in nx.json"
  - run:
      name: 'Debug: Check pnpm workspace and file protocol resolution'
      command: |
        echo "=== Checking pnpm workspace configuration ==="
        cat pnpm-workspace.yaml || echo "pnpm-workspace.yaml not found"
        echo ""
        echo "=== Checking package.json for file: protocol references ==="
        grep -A2 -B2 "@codelab/tools-workspace" package.json || echo "Not found in package.json"
        echo ""
        echo "=== Checking if pnpm install was run correctly ==="
        pnpm store status || echo "pnpm store status failed"
        echo ""
        echo "=== Checking pnpm lockfile for workspace package ==="
        grep -A5 "@codelab/tools-workspace" pnpm-lock.yaml | head -20 || echo "Not found in lockfile"
        echo ""
        echo "=== Environment info ==="
        echo "Node version: $(node --version)"
        echo "pnpm version: $(pnpm --version)"
        echo "Current directory: $(pwd)"
        echo ""
        echo "=== Checking if dist was built correctly ==="
        find dist/libs/tools/workspace -name "*.js" -type f | head -10 || echo "No JS files found"
  - run:
      name: 'Debug: Try to manually resolve the generator path'
      command: |
        echo "=== Testing manual path resolution ==="
        NODE_PATH=$(pnpm node -e "console.log(require.resolve('@codelab/tools-workspace'))")
        echo "Resolved path: $NODE_PATH"
        echo ""
        echo "=== Checking what Nx sees ==="
        pnpm nx list @codelab/tools-workspace || echo "Nx cannot list the package"
        echo ""
        echo "=== Attempting to run generator with verbose output ==="
        pnpm nx generate @codelab/tools-workspace:nx-project-config --no-interactive --verbose || echo "Generator failed with verbose output"
  - run:
      name: 'Debug: Check if this is a pnpm symlink issue'
      command: |
        echo "=== Checking if node_modules/@codelab exists ==="
        ls -la node_modules/@codelab/ || echo "@codelab directory not found"
        echo ""
        echo "=== Checking symlink for tools-workspace ==="
        ls -la node_modules/@codelab/tools-workspace || echo "tools-workspace symlink not found"
        echo ""
        echo "=== If symlink exists, check what it points to ==="
        readlink -f node_modules/@codelab/tools-workspace || echo "Could not resolve symlink"
        echo ""
        echo "=== Manually creating symlink as a test ==="
        mkdir -p node_modules/@codelab
        ln -sf ../../.pnpm/@codelab+tools-workspace@file+dist+libs+tools+workspace*/node_modules/@codelab/tools-workspace node_modules/@codelab/tools-workspace || echo "Failed to create symlink"
        echo ""
        echo "=== Testing if generator works after manual symlink ==="
        pnpm nx generate @codelab/tools-workspace:nx-project-config --no-interactive --dry-run || echo "Still fails after manual symlink"
  - run:
      name: 'Check Generate Workspace'
      command: pnpm cli tasks workspace-codegen --stage ci
