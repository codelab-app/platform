parameters:
  resource_class:
    type: string
  max_old_space_size:
    type: integer

executor: docker-node-neo4j

resource_class: << parameters.resource_class >>

environment:
  NODE_OPTIONS: --max-old-space-size=<< parameters.max_old_space_size >>

parallelism: 4
steps:
  - restore-workspace-database
  - setup-neo4j
  # We use workspace so it has the latest build
  # - restore_cache:
  #     name: 'Restore NX Cache'
  #     keys:
  #       # This is needed for e2e to run, the specs don't seem to run without the apps having pre-built
  #       - nx-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "pnpm-lock.yaml" }}-{{ checksum "scripts/circleci/cache-lock.yaml" }}
  #       - nx-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "pnpm-lock.yaml" }}
  #       - nx-cache-{{ .Environment.CIRCLE_BRANCH }}-
  #       - nx-cache-
  - run: pnpm npx playwright install-deps
  # No need since we're not building anything
  # Also very expensive in terms of storage
  # docker_layer_caching: true
  # - run:
  #     name: 'Check System Resources'
  #     command: |
  #       sudo apt-get update && sudo apt-get install -y htop
  #       # Use htop with supported flags
  #       htop -n 1
  # - run:
  #     name: 'Check Docker Memory'
  #     command: |
  #       echo "=== Docker Container Memory Stats ==="
  #       docker ps --format "{{.Names}}" | grep neo4j | xargs -I {} docker stats {} --no-stream --format "table {{.Name}}\t{{.MemUsage}}\t{{.MemPerc}}"
  - run:
      name: 'Run E2E Tests'
      # command: pnpm nx e2e web-e2e -c ci --verbose
      no_output_timeout: 15m
      command: |
        # Original test command
        SHARD="$((${CIRCLE_NODE_INDEX}+1))"
        echo $SHARD;
        echo $CIRCLE_NODE_TOTAL;

        pnpm nx e2e web-e2e -c ci \
          --shard=${SHARD}/${CIRCLE_NODE_TOTAL}

  # https://stackoverflow.com/questions/68916222/docker-build-error-cannot-connect-to-the-docker-daemon-at-unix-var-run-docke/68922177#68922177

  # This needs a separate job
  # - run:
  #     name: 'Merge Playwright Reports'
  #     command: |
  #       pnpm playwright merge-reports --reporter html ~/project/tmp/reports/e2e/all-blob-reports
  #     when: always
  - run:
      name: Install Docker CLI
      command: |
        apt-get update && apt-get install -y docker.io
  - run:
      name: Capture Docker logs
      command: |
        set -x

        mkdir -p ~/project/tmp/logs

        docker logs $(docker ps --filter "ancestor=neo4j:5.26.3-enterprise" --format "{{.ID}}") > ~/project/tmp/logs/neo4j.log 2>&1
      # This ensures logs are captured even if previous steps fail
      when: always
  - store_artifacts:
      path: ~/project/tmp/logs
      destination: docker-logs
  - store_artifacts:
      path: ~/project/tmp/reports/e2e
      destination: playwright-report
  # - store_artifacts:
  #     path: ~/project/tmp/reports/e2e/html-report
  #     destination: html-report
  #   - store_artifacts:
  #       path: ~/project/dist/.playwright/apps/web-e2e/src/screenshots
  #       destination: playwright/screenshots
  #   - store_artifacts:
  #       path: ~/project/dist/.playwright/apps/web-e2e/src/data
  #       destination: playwright/data
  - store_test_results:
      path: ~/project/tmp/reports/e2e/junit
