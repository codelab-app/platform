declare const Typebox: {
    DiscriminatedRef: <T extends string>(typename: T) => import('@sinclair/typebox').TObject<{
        __typename: import('@sinclair/typebox').TLiteral<`${T}`>;
        name: import('@sinclair/typebox').TOptional<import('@sinclair/typebox').TString>;
        id: import('@sinclair/typebox').TString;
    }>;
    IsUnion: (schema: Readonly<import('@sinclair/typebox').TSchema>) => schema is import('@sinclair/typebox').TUnion<Array<import('@sinclair/typebox').TObject>>;
    Nullish: <T extends import('@sinclair/typebox').TSchema>(schema: T) => import('@sinclair/typebox').TOptional<import('@sinclair/typebox').TUnion<[T, import('@sinclair/typebox').TNull]>>;
    OmitOwner: <T extends import('@sinclair/typebox').TObject>(schema: T) => import('@sinclair/typebox').TOmit<T, ["owner"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>;
    Overwrite: <T extends import('@sinclair/typebox').TObject, U extends import('@sinclair/typebox').TObject>(original: T, target: U) => import('@sinclair/typebox').TObject<Omit<T["properties"], keyof U["properties"]> & U["properties"]>;
    RefSchema: import('@sinclair/typebox').TObject<{
        id: import('@sinclair/typebox').TString;
    }>;
    Serialized: <T extends import('@sinclair/typebox').TObject>(schema: T) => import('@sinclair/typebox').TObject<import('@sinclair/typebox').Evaluate<import('@sinclair/typebox').TSetDistinct<["$modelType", ...import('@sinclair/typebox').TKeyOfPropertyKeys<T>], []> extends infer T_1 ? T_1 extends import('@sinclair/typebox').TSetDistinct<["$modelType", ...import('@sinclair/typebox').TKeyOfPropertyKeys<T>], []> ? T_1 extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? any : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
        $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
    }[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : {} : never : never>>;
    TRef: import('@sinclair/typebox').TKind;
};
export { Typebox };
export * from './schema';
export * from './validation';
