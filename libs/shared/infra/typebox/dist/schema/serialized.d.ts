import { Static, TObject } from '@sinclair/typebox';
export declare const SerializedSchema: TObject<{
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}>;
export type ISerialized = Static<typeof SerializedSchema>;
export declare const Serialized: <T extends TObject>(schema: T) => TObject<import('@sinclair/typebox').Evaluate<import('@sinclair/typebox').TSetDistinct<["$modelType", ...import('@sinclair/typebox').TKeyOfPropertyKeys<T>], []> extends infer T_1 ? T_1 extends import('@sinclair/typebox').TSetDistinct<["$modelType", ...import('@sinclair/typebox').TKeyOfPropertyKeys<T>], []> ? T_1 extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? any : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<L extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[L] : `${import('@sinclair/typebox').Assert<L, string | number>}` extends "$modelType" ? {
    $modelType: import('@sinclair/typebox').TLiteral<"serialized">;
}[import('@sinclair/typebox').Assert<L, string | number>] : import('@sinclair/typebox').TNever, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<T, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : {} : never : never>>;
