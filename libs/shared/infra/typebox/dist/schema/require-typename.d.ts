import { TObject } from '@sinclair/typebox';
export declare const RequireTypename: <T extends TObject>(schema: T) => TObject<import('@sinclair/typebox').Evaluate<import('@sinclair/typebox').TSetDistinct<[...import('@sinclair/typebox').TKeyOfPropertyKeys<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, ...import('@sinclair/typebox').TKeyOfPropertyKeys<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>>], []> extends infer T_1 ? T_1 extends import('@sinclair/typebox').TSetDistinct<[...import('@sinclair/typebox').TKeyOfPropertyKeys<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, ...import('@sinclair/typebox').TKeyOfPropertyKeys<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>>], []> ? T_1 extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? R extends [infer L extends PropertyKey, ...infer R extends PropertyKey[]] ? any : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : { [_ in L]: import('@sinclair/typebox').TIntersectEvaluated<import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> extends infer T_2 ? T_2 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TOmit<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>, L>, import('@sinclair/typebox').TSchema> ? T_2 extends import('@sinclair/typebox').TNever ? import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_3 ? T_3 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_3 extends import('@sinclair/typebox').TNever ? [] : [T_3] : never : never : import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> extends infer T_4 ? T_4 extends import('@sinclair/typebox').Assert<import('@sinclair/typebox').TIndexFromPropertyKey<import('@sinclair/typebox').TRequired<import('@sinclair/typebox').TPick<T, ["__typename"], T extends import('@sinclair/typebox').TRef<string> ? true : false, false>>, L>, import('@sinclair/typebox').TSchema> ? T_4 extends import('@sinclair/typebox').TNever ? [T_2] : [T_2, T_4] : never : never : never : never>; } : {} : never : never>>;
