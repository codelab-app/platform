query GetPrimitiveTypes(
  $options: PrimitiveTypeOptions
  $where: PrimitiveTypeWhere
) {
  types: primitiveTypes(where: $where, options: $options) {
    ...PrimitiveType
  }
}

query GetArrayTypes($options: ArrayTypeOptions, $where: ArrayTypeWhere) {
  types: arrayTypes(where: $where, options: $options) {
    ...ArrayTypeWithItemType
  }
}

query GetUnionTypes($options: UnionTypeOptions, $where: UnionTypeWhere) {
  types: unionTypes(where: $where, options: $options) {
    ...UnionType
  }
}

query GetInterfaceTypes(
  $options: InterfaceTypeOptions
  $where: InterfaceTypeWhere
) {
  types: interfaceTypes(where: $where, options: $options) {
    ...InterfaceType
  }
}

query GetInterfaceTypesWithFields(
  $options: InterfaceTypeOptions
  $where: InterfaceTypeWhere
) {
  types: interfaceTypes(where: $where, options: $options) {
    ...InterfaceTypeWithFields
  }
}

query GetInterfaceTypeGraphs(
  $options: InterfaceTypeOptions
  $where: InterfaceTypeWhere
) {
  types: interfaceTypes(where: $where, options: $options) {
    ...InterfaceTypeWithGraph
  }
}

query GetElementTypes($options: ElementTypeOptions, $where: ElementTypeWhere) {
  types: elementTypes(where: $where, options: $options) {
    ...ElementType
  }
}

query GetRenderPropsTypes(
  $options: RenderPropsTypeOptions
  $where: RenderPropsTypeWhere
) {
  types: renderPropsTypes(where: $where, options: $options) {
    ...RenderPropsType
  }
}

query GetEnumTypes($options: EnumTypeOptions, $where: EnumTypeWhere) {
  types: enumTypes(where: $where, options: $options) {
    ...EnumType
  }
}

query GetLambdaTypes($options: LambdaTypeOptions, $where: LambdaTypeWhere) {
  types: lambdaTypes(where: $where, options: $options) {
    ...LambdaType
  }
}

query GetPageTypes($options: PageTypeOptions, $where: PageTypeWhere) {
  types: pageTypes(where: $where, options: $options) {
    ...PageType
  }
}

query GetAppTypes($options: AppTypeOptions, $where: AppTypeWhere) {
  types: appTypes(where: $where, options: $options) {
    ...AppType
  }
}

query GetMonacoTypes($options: MonacoTypeOptions, $where: MonacoTypeWhere) {
  types: monacoTypes(where: $where, options: $options) {
    ...MonacoType
  }
}
