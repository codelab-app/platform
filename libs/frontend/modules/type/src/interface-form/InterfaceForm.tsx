import { FormUniforms } from '@codelab/frontend/view/components'
import * as _ from 'lodash'
import { mergeDeepRight } from 'ramda'
import React, { useEffect, useRef, useState } from 'react'
import { Bridge, DeepPartial } from 'uniforms'
import { uniformsFactory } from './mapSchemaToFields'
import { InterfaceFormProps } from './types'

/**
 * Uniforms form generated by an Interface
 */
export const InterfaceForm = <TData extends any>({
  interfaceTree,
  children,
  model,
  onSubmit,
  schema,
  onChange,
  ...props
}: React.PropsWithChildren<InterfaceFormProps<TData>>) => {
  const formChangedKey = useRef('')
  const [formSchema, setFormSchema] = useState<Bridge>(schema)

  const updateFormSchema = (formModel: DeepPartial<TData> = {}) => {
    const options = { jsonPropertiesMapper: uniformsFactory }

    const interfaceSchema = interfaceTree.toJsonSchema(
      options,
      formModel,
    ) as any

    const schemaOverride = schema || {}
    setFormSchema(mergeDeepRight(schemaOverride, interfaceSchema))
  }

  useEffect(() => {
    updateFormSchema(model)
  }, [interfaceTree])

  if (!formSchema) {
    return null
  }

  const onFormChange = (key: string, value: any) => {
    formChangedKey.current = key

    if (onChange) {
      onChange(key, value)
    }
  }

  const onChangeModel = (newModel: any) => {
    // E.g: loading.type -> loading.properties.type
    const formatChangedKey = formChangedKey.current
      ?.split('.')
      .join('.properties.')

    const isUnionTypeInput = _.get(
      formSchema,
      `properties.${formatChangedKey}.isUnionTypeInput`,
    )

    if (isUnionTypeInput) {
      updateFormSchema(newModel)
    }
  }

  return (
    <FormUniforms
      schema={formSchema}
      model={model}
      onChangeModel={onChangeModel}
      onChange={onFormChange}
      onSubmit={onSubmit}
      {...props}
    >
      {children}
    </FormUniforms>
  )
}

InterfaceForm.displayName = 'InterfaceForm'
