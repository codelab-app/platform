import { Form } from '@codelab/frontend/view/components'
import { mergeDeepRight } from 'ramda'
import React, { useMemo } from 'react'
import { getUiProperties } from './jsonSchemaUiProperties'
import { InterfaceFormProps } from './types'

/**
 * Uniforms form generated by an {@link IInterfaceType}
 */
export const InterfaceForm = <TData,>({
  interfaceTree,
  children,
  model,
  onSubmit,
  schema,
  onChange,
  submitRef,
  onSubmitError,
  onSubmitSuccess,
}: React.PropsWithChildren<InterfaceFormProps<TData>>) => {
  const formSchema = useMemo(() => {
    const typeTreeSchema = interfaceTree.toJsonSchema({
      extraProperties: getUiProperties,
    })

    console.log(typeTreeSchema)

    const schemaOverride = schema || {}

    return mergeDeepRight(schemaOverride, typeTreeSchema as any)
  }, [interfaceTree, schema])

  if (!formSchema) {
    return null
  }

  return (
    <Form
      model={model}
      onSubmit={onSubmit}
      onSubmitError={onSubmitError}
      onSubmitSuccess={onSubmitSuccess}
      schema={formSchema}
      submitRef={submitRef}
    >
      {children}
    </Form>
  )
}

InterfaceForm.displayName = 'InterfaceForm'
