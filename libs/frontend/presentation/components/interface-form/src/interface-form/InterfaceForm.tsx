import type {
  IInterfaceTypeModel,
  ITypeModel,
} from '@codelab/frontend/abstract/domain'
import type { FormProps, SubmitRef } from '@codelab/frontend/abstract/types'
import type { SetIsLoading } from '@codelab/frontend-presentation-components-form'
import { Form, useSubmit } from '@codelab/frontend-presentation-components-form'
import type { ObjectLike } from '@codelab/shared/abstract/types'
import type { JSONSchemaType } from 'ajv'
import { observer } from 'mobx-react-lite'
import type { PropsWithChildren } from 'react'
import { useMemo } from 'react'
import { mergeDeep } from 'remeda'
import type { Assign } from 'utility-types'
import {
  type InterfaceFormContext,
  uniformSchemaFactory,
} from './uniform-schema'

export type InterfaceFormProps<TData, TResponse> = PropsWithChildren<
  Assign<
    Omit<FormProps<TData, TResponse>, 'schema' | 'uiKey'>,
    SubmitRef & {
      context?: InterfaceFormContext
      initialSchema?: ObjectLike
      interfaceType: IInterfaceTypeModel
      setIsLoading?: SetIsLoading
    }
  >
>
/**
 * Uniforms form generated by an {@link IInterfaceType}
 */
export const InterfaceForm = observer(
  <TData, TResponse>({
    autosave,
    children,
    context,
    initialSchema,
    interfaceType,
    model,
    onChange,
    onSubmit,
    onSubmitError,
    onSubmitSuccess,
    setIsLoading,
    submitField,
    submitRef,
  }: InterfaceFormProps<TData, TResponse>) => {
    const uniforms = (type: ITypeModel) =>
      uniformSchemaFactory(type, context?.autocomplete)

    const formSchema = useMemo(() => {
      const jsonSchema = interfaceType.toJsonSchema({
        defaultValues: context?.defaultValues,
        fieldName: context?.fieldName,
        uniformSchema: uniforms,
        validationRules: context?.validationRules,
      })

      return mergeDeep(initialSchema ?? {}, jsonSchema as ObjectLike)
    }, [interfaceType, interfaceType.fields, initialSchema])

    return (
      <Form
        autosave={autosave}
        model={model}
        onChange={onChange}
        onSubmit={useSubmit<TData, TResponse>(onSubmit, setIsLoading)}
        onSubmitError={onSubmitError}
        onSubmitSuccess={onSubmitSuccess}
        schema={formSchema as JSONSchemaType<unknown>}
        submitField={submitField}
        submitRef={submitRef}
        // TODO: Need to find a way to have a domain key in this case
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        uiKey={'interface-form' as any}
      >
        {children}
      </Form>
    )
  },
)

InterfaceForm.displayName = 'InterfaceForm'
