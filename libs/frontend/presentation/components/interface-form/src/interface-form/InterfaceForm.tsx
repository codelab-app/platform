'use client'

import type {
  IInterfaceTypeModel,
  ITypeModel,
} from '@codelab/frontend-abstract-domain'
import type { SetIsLoading } from '@codelab/frontend-presentation-components-form'
import type { ObjectLike } from '@codelab/shared-abstract-types'
import type { JSONSchemaType } from 'ajv'
import type { PropsWithChildren } from 'react'
import type { Assign } from 'utility-types'

import {
  type FormProps,
  type SubmitRef,
  UiKey,
} from '@codelab/frontend-abstract-types'
import {
  Form,
  useAsyncHandler,
} from '@codelab/frontend-presentation-components-form'
import { useMemo } from 'react'
import { mergeDeep } from 'remeda'

import {
  type InterfaceFormContext,
  uniformSchemaFactory,
} from './uniform-schema'

export type InterfaceFormProps<
  TData extends ObjectLike,
  TResponse,
> = PropsWithChildren<
  Assign<
    Omit<FormProps<TData, TResponse>, 'schema' | 'uiKey'>,
    SubmitRef & {
      context?: InterfaceFormContext
      initialSchema?: ObjectLike
      interfaceType: IInterfaceTypeModel
      setIsLoading?: SetIsLoading
    }
  >
>

/**
 * Uniforms form generated by an {@link IInterfaceType}
 */
export const InterfaceForm = <TData extends ObjectLike, TResponse>({
  autosave,
  children,
  context,
  initialSchema,
  interfaceType,
  model,
  modelTransform,
  onChange,
  onSubmit,
  onSubmitError,
  onSubmitSuccess,
  setIsLoading,
  submitField,
  submitRef,
}: InterfaceFormProps<TData, TResponse>) => {
  const asyncHandler = useAsyncHandler<TData, TResponse>(setIsLoading)

  const uniforms = (type: ITypeModel) =>
    uniformSchemaFactory(type, context?.autocomplete)

  const formSchema = useMemo(() => {
    const jsonSchema = interfaceType.toJsonSchema({
      defaultValues: context?.defaultValues,
      fieldName: context?.fieldName,
      uniformSchema: uniforms,
      validationRules: context?.validationRules,
    })

    return mergeDeep(initialSchema ?? {}, jsonSchema as ObjectLike)
  }, [interfaceType, interfaceType.fields, initialSchema])

  return (
    <Form
      autosave={autosave}
      model={model}
      modelTransform={modelTransform}
      onChange={onChange}
      onSubmit={asyncHandler(onSubmit)}
      onSubmitError={onSubmitError}
      onSubmitSuccess={onSubmitSuccess}
      schema={formSchema as JSONSchemaType<unknown>}
      submitField={submitField}
      submitRef={submitRef}
      uiKey={UiKey.FormInterface}
    >
      {children}
    </Form>
  )
}

InterfaceForm.displayName = 'InterfaceForm'
