import {
  Form,
  handleFormSubmit,
  useFormContext,
} from '@codelab/frontend/view/components'
import type { JSONSchemaType } from 'ajv'
import { autorun } from 'mobx'
import { observer } from 'mobx-react-lite'
import { mergeDeepRight } from 'ramda'
import React, { useEffect, useState } from 'react'
import { schemaTransformer } from './type-schema.factory'
import type { InterfaceFormProps } from './types'

/**
 * Uniforms form generated by an {@link IInterfaceType}
 */
export const InterfaceForm = observer(
  <TData, TResponse = unknown>({
    interfaceType,
    children,
    model,
    onSubmit,
    initialSchema,
    onChange,
    onSubmitError,
    onSubmitSuccess,
    submitRef,
    setIsLoading,
    autosave,
    submitField,
  }: React.PropsWithChildren<InterfaceFormProps<TData, TResponse>>) => {
    const context = useFormContext()
    const [formSchema, setFormSchema] = useState(initialSchema ?? {})

    useEffect(
      () =>
        autorun(() => {
          const typeTreeSchema = schemaTransformer.transform(
            interfaceType,
            context,
          )

          setFormSchema(mergeDeepRight(initialSchema ?? {}, typeTreeSchema))
        }),
      [interfaceType, initialSchema, context],
    )

    return (
      <Form
        autosave={autosave}
        model={model}
        onChange={onChange}
        onSubmit={handleFormSubmit<TData, TResponse>(
          onSubmit,
          setIsLoading,
          onSubmitSuccess,
          onSubmitError,
        )}
        onSubmitError={onSubmitError}
        onSubmitSuccess={onSubmitSuccess}
        schema={formSchema as JSONSchemaType<unknown>}
        submitField={submitField}
        submitRef={submitRef}
      >
        {children}
      </Form>
    )
  },
)

InterfaceForm.displayName = 'InterfaceForm'
