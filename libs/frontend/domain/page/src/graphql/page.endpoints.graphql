mutation CreatePages($input: [PageCreateInput!]!) {
  createPages(input: $input) {
    pages {
      ...Page
    }
  }
}

mutation DeletePages($where: PageWhere, $delete: PageDeleteInput) {
  deletePages(where: $where, delete: $delete) {
    nodesDeleted
  }
}

mutation UpdatePages($where: PageWhere, $update: PageUpdateInput) {
  updatePages(where: $where, update: $update) {
    pages {
      ...Page
    }
  }
}

query GetPages($options: PageOptions, $where: PageWhere) {
  pages(options: $options, where: $where) {
    ...Page
  }
}

query GetRenderedPage($appId: ID!, $pageId: ID!, $typeIds: [ID!]) {
  apps(where: { id: $appId }) {
    ...PageBuilderApp
  }
  components {
    ...RenderedComponent
  }
  resources {
    ...Resource
  }
  #TODO: need to re-use this below somehow, maybe create a top level field resolver
  primitiveTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  arrayTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  unionTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  interfaceTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  elementTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  renderPropsTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  reactNodeTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  enumTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  lambdaTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  pageTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  appTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  actionTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
  codeMirrorTypes(where: { id_IN: $typeIds }) {
    ...Type
  }
}
