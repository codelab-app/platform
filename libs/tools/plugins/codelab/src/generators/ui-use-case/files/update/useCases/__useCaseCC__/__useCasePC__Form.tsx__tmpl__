import {
  <%= inputType %>,
  refetchGet<%= modelPC %>sQuery,
  use<%= useCasePC %>Mutation,
} from '@codelab/shared/abstract/codegen'
import {
  createNotificationHandler,
  EntityType,
  FormUniforms,
  UseCaseFormProps,
  useCrudModalMutationForm,
} from '@codelab/frontend/utils'
import React from 'react'
import { AutoFields } from 'uniforms-antd'
import { <%= useCaseCC %>Schema } from './<%= useCaseCC %>Schema'

export const <%= useCasePC %>Form = (props: UseCaseFormProps<<%= inputType %>>) => {
  const {
    crudModal: { reset, state: { metadata } },
    handleSubmit,
  } = useCrudModalMutationForm({
    entityType: EntityType.<%= modelPC %>,
    useMutationFunction: use<%= useCasePC %>Mutation,
    mutationOptions: { refetchQueries: [refetchGet<%= modelPC %>sQuery()] },
    mapVariables: ({ name }: <%= inputType %>, state) => ({ input: { data: { name }, id: state.updateId } }),
  })

  return (
    <FormUniforms<<%= inputType %>>
      onSubmit={handleSubmit}
      schema={<%= useCaseCC %>Schema}
      onSubmitError={createNotificationHandler({
        title: 'Error while updating <%= modelCC %> `${metadata?.name}`',
      })}
      onSubmitSuccess={() => reset()}
      {...props}
    >
      <AutoFields />
    </FormUniforms>
  )
}
