import { setupTestModule, teardownTestModule } from '@codelab/backend/nestjs'
import { INestApplication } from '@nestjs/common'
import { <%= modelPascalCase %>Module } from '../../../<%= model %>.module'
import { domainRequest } from '@codelab/backend/infra'
import { Role } from '@codelab/shared/abstract/core'
import { <%= modelPascalCase %> } from '../../../<%= model %>.module'

describe('<%= useCasePascalCase %>UseCase', () => {
  let guestApp: INestApplication
  let userApp: INestApplication
  let adminApp: INestApplication

  beforeAll(async () => {
    guestApp = await setupTestModule([<%= modelPascalCase %>Module], { role: Role.Guest })
    userApp = await setupTestModule([<%= modelPascalCase %>Module], { role: Role.User })
    adminApp = await setupTestModule([<%= modelPascalCase %>Module], { role: Role.Admin })
  })

  afterAll(async () => {
    await teardownTestModule(guestApp)
    await teardownTestModule(userApp)
    await teardownTestModule(adminApp)
  })

  describe('Guest', () => {
    it('should fail to create a <%= modelPascalCase %>', async () => {
      await domainRequest(guestApp, <%= useCasePascalCase %>Gql, createAppInput, {
        message: 'Unauthorized',
      })
    })
  })

 describe('User', () => {
    it('should create an App', async () => {
      const {
        createApp: { id: appId },
      } = await domainRequest<<%= useCasePascalCase %>Input, <%= useCasePascalCase %>Mutation>(
        userApp,
        <%= useCasePascalCase %>Gql,
        createAppInput,
      )

      expect(appId).toBeDefined()

      const { getApp: app } = await domainRequest<GetAppInput, GetAppQuery>(
        userApp,
        GetAppGql,
        { byId: { appId } },
      )

      expect(app).toMatchObject({ ...createAppInput, id: appId })
    })
  })
})
