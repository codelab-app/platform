import type {
  NxJsonConfiguration,
  ProjectConfiguration,
  Tree,
} from '@nx/devkit'

import {
  generateFiles,
  joinPathFragments,
  offsetFromRoot,
  readJson,
  readNxJson,
  writeJson,
} from '@nx/devkit'
import { join } from 'path'

import { getEntryFromExports } from './entry/get-entry-from-exports'

/**
 * Updates the package.json for a Vite library project.
 * GENERATED BY CURSOR
 */
const _updatePackageJsonForVite = (
  tree: Tree,
  projectConfig: ProjectConfiguration,
) => {
  const packageJsonPath = joinPathFragments(projectConfig.root, 'package.json')

  if (!tree.exists(packageJsonPath)) {
    console.warn(
      `Package.json not found at ${packageJsonPath}, skipping update.`,
    )

    return
  }

  const packageJson = readJson(tree, packageJsonPath)

  // Add or update the required fields
  packageJson.type = 'module'
  delete packageJson.main
  delete packageJson.module
  delete packageJson.types

  // Write the updated package.json back to the file
  writeJson(tree, packageJsonPath, packageJson)
  console.log(`Updated package.json at: ${packageJsonPath}`)

  // Return package json for potential use
  return packageJson
}

/**
 * Removes the compilerOptions.module property from tsconfig.lib.json if it exists.
 * GENERATED BY CURSOR
 */
const _updateTsConfigForVite = (
  tree: Tree,
  projectConfig: ProjectConfiguration,
) => {
  const tsconfigPath = joinPathFragments(
    projectConfig.root,
    'tsconfig.lib.json',
  )

  if (!tree.exists(tsconfigPath)) {
    console.warn(
      `Tsconfig.lib.json not found at ${tsconfigPath}, skipping update.`,
    )

    return
  }

  const tsconfigJson = readJson(tree, tsconfigPath)

  if (tsconfigJson.compilerOptions?.module) {
    delete tsconfigJson.compilerOptions.module
    writeJson(tree, tsconfigPath, tsconfigJson)
    console.log(`Removed compilerOptions.module from: ${tsconfigPath}`)
  } else {
    console.log(
      `compilerOptions.module not found or already removed in: ${tsconfigPath}`,
    )
  }
}

export const migrateToViteLibs = async (
  tree: Tree,
  projectConfig: ProjectConfiguration,
) => {
  console.log('Migrating to Vite libs:', projectConfig.name)

  // Update package.json and get package info
  const packageJson = _updatePackageJsonForVite(tree, projectConfig)

  // Update tsconfig.lib.json
  _updateTsConfigForVite(tree, projectConfig)

  // If package.json didn't exist or couldn't be read, we might need to handle it
  if (!packageJson) {
    console.error(
      `Could not retrieve package.json for ${projectConfig.name}. Aborting Vite config generation.`,
    )

    return
  }

  // Get library entries from package.json exports
  const entry = getEntryFromExports(tree, projectConfig.root, packageJson)

  const substitutions = {
    // Calculate cacheDir relative to workspace root
    cacheDir: joinPathFragments(
      offsetFromRoot(projectConfig.root),
      'node_modules/.vite',
      projectConfig.root,
    ),
    entry: JSON.stringify(entry, null, 2),
    libName: packageJson.name,
    // Replaces __tmpl__ portion of file
    tmpl: '',
    tsconfigPath: 'tsconfig.lib.json',
  }

  // Path to the template files directory
  const templateDir = join(__dirname, 'files')
  // Target directory (project root)
  const targetDir = projectConfig.root

  generateFiles(tree, templateDir, targetDir, substitutions)

  console.log(`Generated Vite config in: ${targetDir}`)
}
