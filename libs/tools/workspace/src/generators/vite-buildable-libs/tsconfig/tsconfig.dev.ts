import type { ProjectConfiguration, Tree } from '@nx/devkit'
import type { TsConfigJson } from 'type-fest'

import { joinPathFragments, writeJson } from '@nx/devkit'

/**
 * Creates a tsconfig.dev.json file for a library project.
 * This file extends tsconfig.lib.json and is intended for development scenarios
 * (e.g., IDE type-checking, running dev servers).
 * GENERATED BY CURSOR
 */
export const createTsConfigDev = (
  tree: Tree,
  projectConfig: ProjectConfiguration,
) => {
  const tsconfigDevPath = joinPathFragments(
    projectConfig.root,
    'tsconfig.dev.json',
  )

  // Relative path for extends
  const tsconfigLibPath = './tsconfig.lib.json'

  const tsconfigDevJson: TsConfigJson = {
    compilerOptions: {
      // Development specific overrides can go here if needed in the future.
      // For now, primarily inheriting from tsconfig.lib.json.
      // Ensure composite is false or removed if not needed for dev context specifically.
      // It's often true in the base build config (tsconfig.lib.json might inherit it).
    },
    exclude: [
      // Exclude test files from the primary dev context if desired
      '**/*.spec.ts',
      '**/*.test.ts',
      '**/*.spec.tsx',
      '**/*.test.tsx',
    ],
    extends: tsconfigLibPath,
    include: [
      // Files needed for development context (IDE, dev server)
      'src/**/*.ts',
      // Include if JSX/React is used
      'src/**/*.tsx',
      // Include Vite config for type checking
      'vite.config.ts',
      // Add other dev-specific includes if necessary
    ],
  }

  // Remove the file if it exists to ensure a clean state, or update carefully
  // For simplicity here, we'll overwrite. Consider merging strategies if needed.
  if (tree.exists(tsconfigDevPath)) {
    console.log(`Overwriting existing tsconfig.dev.json at: ${tsconfigDevPath}`)
  }

  writeJson(tree, tsconfigDevPath, tsconfigDevJson)
  console.log(`Created tsconfig.dev.json at: ${tsconfigDevPath}`)
}
