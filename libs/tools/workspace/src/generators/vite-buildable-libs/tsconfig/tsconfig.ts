import type { ProjectConfiguration, Tree } from '@nx/devkit'
import type { TsConfigJson } from 'type-fest'

import { joinPathFragments, readJson, updateJson, writeJson } from '@nx/devkit'

/**
 * Modifies the main tsconfig.json file:
 * - Removes references to tsconfig.lib.json, tsconfig.spec.json, and tsconfig.eslint.json.
 * - Adds a reference to tsconfig.dev.json.
 * - Ensures "noEmit": true is set under compilerOptions.
 * GENERATED BY CURSOR
 */
export const updateTsConfig = (
  tree: Tree,
  projectConfig: ProjectConfiguration,
) => {
  const tsconfigPath = joinPathFragments(projectConfig.root, 'tsconfig.json')

  if (!tree.exists(tsconfigPath)) {
    console.warn(`tsconfig.json not found at ${tsconfigPath}, skipping update.`)

    return
  }

  const tsconfigJson = readJson<TsConfigJson>(tree, tsconfigPath)
  let updated = false

  // Ensure references array exists
  if (!tsconfigJson.references) {
    tsconfigJson.references = []
    // Mark as updated if we are creating the array
    updated = true
  }

  if (Array.isArray(tsconfigJson.references)) {
    const originalLength = tsconfigJson.references.length
    const devRefPath = './tsconfig.dev.json'

    const unwantedRefs = [
      './tsconfig.lib.json',
      './tsconfig.spec.json',
      './tsconfig.eslint.json',
    ]

    // Filter out unwanted references
    tsconfigJson.references = tsconfigJson.references.filter(
      (ref) => !unwantedRefs.includes(ref.path),
    )

    // Check if dev reference needs to be added
    const hasDevRef = tsconfigJson.references.some(
      (ref) => ref.path === devRefPath,
    )

    if (!hasDevRef) {
      tsconfigJson.references.push({ path: devRefPath })
      updated = true
    }

    // Mark as updated if references were removed or added
    if (
      tsconfigJson.references.length !== originalLength ||
      (originalLength === 0 && tsconfigJson.references.length > 0)
    ) {
      updated = true
    }

    // Clean up if references array is empty after modifications (shouldn't happen if we add devRef)
    if (tsconfigJson.references.length === 0) {
      delete tsconfigJson.references
      // If we deleted the array, ensure 'updated' reflects if we added/removed anything before
      // Note: updated might already be true from adding the array initially or adding devRef
    }
  }

  if (!tsconfigJson.compilerOptions) {
    tsconfigJson.compilerOptions = {}
  }

  if (tsconfigJson.compilerOptions.noEmit !== true) {
    tsconfigJson.compilerOptions.noEmit = true
    updated = true
  }

  if (updated) {
    writeJson(tree, tsconfigPath, tsconfigJson)
    console.log(`Updated tsconfig file: ${tsconfigPath}`)
  } else {
    console.log(
      `No updates needed for tsconfig file (references / noEmit setting): ${tsconfigPath}`,
    )
  }
}
